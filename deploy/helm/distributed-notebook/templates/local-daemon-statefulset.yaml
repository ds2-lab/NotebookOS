apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.local_daemon.local_service_name }}
  labels:
    app: local-daemon
spec:
  internalTrafficPolicy: Local
  selector:
    app: local-daemon
  ports:
  - name: tcp
    port: {{ .Values.local_daemon.local_service_port }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.local_daemon.global_service_name }}
  labels:
    app: local-daemon # Still target the `local-daemon` app, but this service provides globally-visible networking.
spec:
  selector:
    app: local-daemon # Still target the `local-daemon` app, but this service provides globally-visible networking.
  ports:
  - name: tcp
    port: {{ .Values.local_daemon.global_service_port }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  name: local-daemon
  namespace: {{ .Release.Namespace }}
  labels:
    app: local-daemon
spec:
  replicas: 10
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: local-daemon
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: local-daemon
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - local-daemon
            topologyKey: "kubernetes.io/hostname"
      containers:
        - env:
            - name: NODE_NAME # The full name of the Pod.
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name 
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: ORDINAL_NUMBER # The Pod's oridinal with respect to the containing StatefulSet.
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: HOST_MOUNT_DIR
              value: /data
            - name: KERNEL_IMAGE
              value: {{ .Values.notebook_server.image }}:{{ .Values.notebook_server.image_tag }}
            - name: KERNEL_TEMP_BASE
              value: /data
            - name: SHARED_CONFIG_DIR
              value: "{{ .Values.common.config_file_dir }}"
          image: {{ .Values.local_daemon.image }}:{{ .Values.local_daemon.image_tag }}
          name: local-daemon
          command: ["./scheduler"]
          args: ["-yaml", "{{ .Values.common.config_file_dir }}/daemon.yml", "-debug", "-v"]
          resources: {}
          volumeMounts:
            - name: node-local
              mountPath: {{ .Values.common.node_local_pvc_mount_point }}
            - name: daemon-config-file
              mountPath: "{{ .Values.common.config_file_dir }}/daemon.yml"
              subPath: daemon.yml
      restartPolicy: Always
      volumes:
        - name: daemon-config-file
          configMap:
            name: daemon-configmap 
            defaultMode: 384
  volumeClaimTemplates: # This will be used to create a unique PVC for each of the LocalDaemon pods.
    - metadata:
        name: node-local
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: local-path
        resources:
          requests:
            storage: 128Mi
status: {}