# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import gateway_pb2 as gateway__pb2


class LocalGatewayStub(object):
    """The juypter gateway service for host local kernels.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartKernel = channel.unary_unary(
                '/gateway.LocalGateway/StartKernel',
                request_serializer=gateway__pb2.KernelSpec.SerializeToString,
                response_deserializer=gateway__pb2.KernelConnectionInfo.FromString,
                )
        self.GetKernelStatus = channel.unary_unary(
                '/gateway.LocalGateway/GetKernelStatus',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.KernelStatus.FromString,
                )
        self.KillKernel = channel.unary_unary(
                '/gateway.LocalGateway/KillKernel',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.StopKernel = channel.unary_unary(
                '/gateway.LocalGateway/StopKernel',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.WaitKernel = channel.unary_unary(
                '/gateway.LocalGateway/WaitKernel',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.KernelStatus.FromString,
                )


class LocalGatewayServicer(object):
    """The juypter gateway service for host local kernels.
    """

    def StartKernel(self, request, context):
        """Start a kernel or kernel replica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKernelStatus(self, request, context):
        """GetKernelStatus returns the status of a kernel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KillKernel(self, request, context):
        """KillKernel kills a kernel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopKernel(self, request, context):
        """StopKernel stops a kernel gracefully and return immediately.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitKernel(self, request, context):
        """WaitKernel waits for a kernel to stop and return status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LocalGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.StartKernel,
                    request_deserializer=gateway__pb2.KernelSpec.FromString,
                    response_serializer=gateway__pb2.KernelConnectionInfo.SerializeToString,
            ),
            'GetKernelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKernelStatus,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.KernelStatus.SerializeToString,
            ),
            'KillKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.KillKernel,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'StopKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.StopKernel,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'WaitKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitKernel,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.KernelStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gateway.LocalGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LocalGateway(object):
    """The juypter gateway service for host local kernels.
    """

    @staticmethod
    def StartKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/StartKernel',
            gateway__pb2.KernelSpec.SerializeToString,
            gateway__pb2.KernelConnectionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKernelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/GetKernelStatus',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.KernelStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KillKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/KillKernel',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/StopKernel',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/WaitKernel',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.KernelStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
