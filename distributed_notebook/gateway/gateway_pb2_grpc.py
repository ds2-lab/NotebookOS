# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import gateway_pb2 as gateway__pb2


class ClusterGatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ID = channel.unary_unary(
                '/gateway.ClusterGateway/ID',
                request_serializer=gateway__pb2.Void.SerializeToString,
                response_deserializer=gateway__pb2.ProvisionerId.FromString,
                )
        self.RemoveHost = channel.unary_unary(
                '/gateway.ClusterGateway/RemoveHost',
                request_serializer=gateway__pb2.HostId.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.MigrateKernelReplica = channel.unary_unary(
                '/gateway.ClusterGateway/MigrateKernelReplica',
                request_serializer=gateway__pb2.MigrationRequest.SerializeToString,
                response_deserializer=gateway__pb2.MigrateKernelResponse.FromString,
                )
        self.NotifyKernelRegistered = channel.unary_unary(
                '/gateway.ClusterGateway/NotifyKernelRegistered',
                request_serializer=gateway__pb2.KernelRegistrationNotification.SerializeToString,
                response_deserializer=gateway__pb2.KernelRegistrationNotificationResponse.FromString,
                )
        self.SmrReady = channel.unary_unary(
                '/gateway.ClusterGateway/SmrReady',
                request_serializer=gateway__pb2.SmrReadyNotification.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.SmrNodeAdded = channel.unary_unary(
                '/gateway.ClusterGateway/SmrNodeAdded',
                request_serializer=gateway__pb2.ReplicaInfo.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.ListKernels = channel.unary_unary(
                '/gateway.ClusterGateway/ListKernels',
                request_serializer=gateway__pb2.Void.SerializeToString,
                response_deserializer=gateway__pb2.ListKernelsResponse.FromString,
                )


class ClusterGatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ID(self, request, context):
        """ID returns the cluster gateway id and can be used to test connectivity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveHost(self, request, context):
        """RemoveHost removes a local gateway from the cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MigrateKernelReplica(self, request, context):
        """MigrateKernelReplica selects a qualified host and adds a kernel replica to the replica set.
        Unlike StartKernelReplica, a new replica is added to the replica set and a training task may
        need to start immediately after replica started, e.g., preempting a training task.

        The function will simply remove the replica from the kernel without stopping it.
        The caller should stop the replica after confirmed that the new replica is ready.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyKernelRegistered(self, request, context):
        """Notify the Gateway that a distributed kernel replica has started somewhere.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmrReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmrNodeAdded(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListKernels(self, request, context):
        """Return a list of all of the current kernel IDs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ID': grpc.unary_unary_rpc_method_handler(
                    servicer.ID,
                    request_deserializer=gateway__pb2.Void.FromString,
                    response_serializer=gateway__pb2.ProvisionerId.SerializeToString,
            ),
            'RemoveHost': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveHost,
                    request_deserializer=gateway__pb2.HostId.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'MigrateKernelReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.MigrateKernelReplica,
                    request_deserializer=gateway__pb2.MigrationRequest.FromString,
                    response_serializer=gateway__pb2.MigrateKernelResponse.SerializeToString,
            ),
            'NotifyKernelRegistered': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyKernelRegistered,
                    request_deserializer=gateway__pb2.KernelRegistrationNotification.FromString,
                    response_serializer=gateway__pb2.KernelRegistrationNotificationResponse.SerializeToString,
            ),
            'SmrReady': grpc.unary_unary_rpc_method_handler(
                    servicer.SmrReady,
                    request_deserializer=gateway__pb2.SmrReadyNotification.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'SmrNodeAdded': grpc.unary_unary_rpc_method_handler(
                    servicer.SmrNodeAdded,
                    request_deserializer=gateway__pb2.ReplicaInfo.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'ListKernels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKernels,
                    request_deserializer=gateway__pb2.Void.FromString,
                    response_serializer=gateway__pb2.ListKernelsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gateway.ClusterGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterGateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/ID',
            gateway__pb2.Void.SerializeToString,
            gateway__pb2.ProvisionerId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/RemoveHost',
            gateway__pb2.HostId.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MigrateKernelReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/MigrateKernelReplica',
            gateway__pb2.MigrationRequest.SerializeToString,
            gateway__pb2.MigrateKernelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyKernelRegistered(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/NotifyKernelRegistered',
            gateway__pb2.KernelRegistrationNotification.SerializeToString,
            gateway__pb2.KernelRegistrationNotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SmrReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/SmrReady',
            gateway__pb2.SmrReadyNotification.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SmrNodeAdded(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/SmrNodeAdded',
            gateway__pb2.ReplicaInfo.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListKernels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.ClusterGateway/ListKernels',
            gateway__pb2.Void.SerializeToString,
            gateway__pb2.ListKernelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LocalGatewayStub(object):
    """The juypter gateway service for host local kernels.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetID = channel.unary_unary(
                '/gateway.LocalGateway/SetID',
                request_serializer=gateway__pb2.HostId.SerializeToString,
                response_deserializer=gateway__pb2.HostId.FromString,
                )
        self.StartKernel = channel.unary_unary(
                '/gateway.LocalGateway/StartKernel',
                request_serializer=gateway__pb2.KernelSpec.SerializeToString,
                response_deserializer=gateway__pb2.KernelConnectionInfo.FromString,
                )
        self.StartKernelReplica = channel.unary_unary(
                '/gateway.LocalGateway/StartKernelReplica',
                request_serializer=gateway__pb2.KernelReplicaSpec.SerializeToString,
                response_deserializer=gateway__pb2.KernelConnectionInfo.FromString,
                )
        self.GetKernelStatus = channel.unary_unary(
                '/gateway.LocalGateway/GetKernelStatus',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.KernelStatus.FromString,
                )
        self.KillKernel = channel.unary_unary(
                '/gateway.LocalGateway/KillKernel',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.StopKernel = channel.unary_unary(
                '/gateway.LocalGateway/StopKernel',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.WaitKernel = channel.unary_unary(
                '/gateway.LocalGateway/WaitKernel',
                request_serializer=gateway__pb2.KernelId.SerializeToString,
                response_deserializer=gateway__pb2.KernelStatus.FromString,
                )
        self.SetClose = channel.unary_unary(
                '/gateway.LocalGateway/SetClose',
                request_serializer=gateway__pb2.Void.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.AddReplica = channel.unary_unary(
                '/gateway.LocalGateway/AddReplica',
                request_serializer=gateway__pb2.ReplicaInfoWithAddr.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.UpdateReplicaAddr = channel.unary_unary(
                '/gateway.LocalGateway/UpdateReplicaAddr',
                request_serializer=gateway__pb2.ReplicaInfoWithAddr.SerializeToString,
                response_deserializer=gateway__pb2.Void.FromString,
                )
        self.PrepareToMigrate = channel.unary_unary(
                '/gateway.LocalGateway/PrepareToMigrate',
                request_serializer=gateway__pb2.ReplicaInfo.SerializeToString,
                response_deserializer=gateway__pb2.PrepareToMigrateResponse.FromString,
                )
        self.GetGpuInfo = channel.unary_unary(
                '/gateway.LocalGateway/GetGpuInfo',
                request_serializer=gateway__pb2.Void.SerializeToString,
                response_deserializer=gateway__pb2.GpuInfo.FromString,
                )
        self.GetVirtualGPUs = channel.unary_unary(
                '/gateway.LocalGateway/GetVirtualGPUs',
                request_serializer=gateway__pb2.Void.SerializeToString,
                response_deserializer=gateway__pb2.VirtualGpuInfo.FromString,
                )
        self.SetTotalVirtualGPUs = channel.unary_unary(
                '/gateway.LocalGateway/SetTotalVirtualGPUs',
                request_serializer=gateway__pb2.SetVirtualGPUsRequest.SerializeToString,
                response_deserializer=gateway__pb2.VirtualGpuInfo.FromString,
                )
        self.GetVirtualGpuAllocations = channel.unary_unary(
                '/gateway.LocalGateway/GetVirtualGpuAllocations',
                request_serializer=gateway__pb2.Void.SerializeToString,
                response_deserializer=gateway__pb2.VirtualGpuAllocations.FromString,
                )


class LocalGatewayServicer(object):
    """The juypter gateway service for host local kernels.
    """

    def SetID(self, request, context):
        """SetID sets the local gatway id and return old id for failure tolerance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartKernel(self, request, context):
        """StartKernel a kernel or kernel replica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartKernelReplica(self, request, context):
        """StartKernelReplica starts a kernel replica on the local host.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKernelStatus(self, request, context):
        """GetKernelStatus returns the status of a kernel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KillKernel(self, request, context):
        """KillKernel kills a kernel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopKernel(self, request, context):
        """StopKernel stops a kernel gracefully and return immediately.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitKernel(self, request, context):
        """WaitKernel waits for a kernel to stop and return status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetClose(self, request, context):
        """SetClose request the gateway to close all kernels and stop.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddReplica(self, request, context):
        """Used to instruct a set of kernel replicas to add a new node to their SMR cluster.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReplicaAddr(self, request, context):
        """Used to instruct a set of kernel replicas to update the peer address of a particular node.
        This is primarily used during migrations.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareToMigrate(self, request, context):
        """Used to instruct a specific kernel replica to prepare to be migrated to a new node.
        This involves writing the contents of the etcd-raft data directory to HDFS so that
        it can be read back from HDFS by the new replica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGpuInfo(self, request, context):
        """Return the current GPU resource metrics on the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVirtualGPUs(self, request, context):
        """Return the current vGPU (or "deflated GPU") resource metrics on the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTotalVirtualGPUs(self, request, context):
        """Set the maximum number of vGPU resources availabe on the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVirtualGpuAllocations(self, request, context):
        """Return the current vGPU allocations on this node. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LocalGatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetID': grpc.unary_unary_rpc_method_handler(
                    servicer.SetID,
                    request_deserializer=gateway__pb2.HostId.FromString,
                    response_serializer=gateway__pb2.HostId.SerializeToString,
            ),
            'StartKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.StartKernel,
                    request_deserializer=gateway__pb2.KernelSpec.FromString,
                    response_serializer=gateway__pb2.KernelConnectionInfo.SerializeToString,
            ),
            'StartKernelReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.StartKernelReplica,
                    request_deserializer=gateway__pb2.KernelReplicaSpec.FromString,
                    response_serializer=gateway__pb2.KernelConnectionInfo.SerializeToString,
            ),
            'GetKernelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKernelStatus,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.KernelStatus.SerializeToString,
            ),
            'KillKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.KillKernel,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'StopKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.StopKernel,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'WaitKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitKernel,
                    request_deserializer=gateway__pb2.KernelId.FromString,
                    response_serializer=gateway__pb2.KernelStatus.SerializeToString,
            ),
            'SetClose': grpc.unary_unary_rpc_method_handler(
                    servicer.SetClose,
                    request_deserializer=gateway__pb2.Void.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'AddReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.AddReplica,
                    request_deserializer=gateway__pb2.ReplicaInfoWithAddr.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'UpdateReplicaAddr': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReplicaAddr,
                    request_deserializer=gateway__pb2.ReplicaInfoWithAddr.FromString,
                    response_serializer=gateway__pb2.Void.SerializeToString,
            ),
            'PrepareToMigrate': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareToMigrate,
                    request_deserializer=gateway__pb2.ReplicaInfo.FromString,
                    response_serializer=gateway__pb2.PrepareToMigrateResponse.SerializeToString,
            ),
            'GetGpuInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGpuInfo,
                    request_deserializer=gateway__pb2.Void.FromString,
                    response_serializer=gateway__pb2.GpuInfo.SerializeToString,
            ),
            'GetVirtualGPUs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVirtualGPUs,
                    request_deserializer=gateway__pb2.Void.FromString,
                    response_serializer=gateway__pb2.VirtualGpuInfo.SerializeToString,
            ),
            'SetTotalVirtualGPUs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTotalVirtualGPUs,
                    request_deserializer=gateway__pb2.SetVirtualGPUsRequest.FromString,
                    response_serializer=gateway__pb2.VirtualGpuInfo.SerializeToString,
            ),
            'GetVirtualGpuAllocations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVirtualGpuAllocations,
                    request_deserializer=gateway__pb2.Void.FromString,
                    response_serializer=gateway__pb2.VirtualGpuAllocations.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gateway.LocalGateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LocalGateway(object):
    """The juypter gateway service for host local kernels.
    """

    @staticmethod
    def SetID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/SetID',
            gateway__pb2.HostId.SerializeToString,
            gateway__pb2.HostId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/StartKernel',
            gateway__pb2.KernelSpec.SerializeToString,
            gateway__pb2.KernelConnectionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartKernelReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/StartKernelReplica',
            gateway__pb2.KernelReplicaSpec.SerializeToString,
            gateway__pb2.KernelConnectionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKernelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/GetKernelStatus',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.KernelStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KillKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/KillKernel',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/StopKernel',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/WaitKernel',
            gateway__pb2.KernelId.SerializeToString,
            gateway__pb2.KernelStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/SetClose',
            gateway__pb2.Void.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/AddReplica',
            gateway__pb2.ReplicaInfoWithAddr.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReplicaAddr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/UpdateReplicaAddr',
            gateway__pb2.ReplicaInfoWithAddr.SerializeToString,
            gateway__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareToMigrate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/PrepareToMigrate',
            gateway__pb2.ReplicaInfo.SerializeToString,
            gateway__pb2.PrepareToMigrateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGpuInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/GetGpuInfo',
            gateway__pb2.Void.SerializeToString,
            gateway__pb2.GpuInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVirtualGPUs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/GetVirtualGPUs',
            gateway__pb2.Void.SerializeToString,
            gateway__pb2.VirtualGpuInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTotalVirtualGPUs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/SetTotalVirtualGPUs',
            gateway__pb2.SetVirtualGPUsRequest.SerializeToString,
            gateway__pb2.VirtualGpuInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVirtualGpuAllocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gateway.LocalGateway/GetVirtualGpuAllocations',
            gateway__pb2.Void.SerializeToString,
            gateway__pb2.VirtualGpuAllocations.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
