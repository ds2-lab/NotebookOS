// Code generated by MockGen. DO NOT EDIT.
// Source: /home/bcarver2/go/pkg/distributed-notebook/scheduler/device/types.go

// Package mock_device is a generated GoMock package.
package mock_device

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"k8s.io/apimachinery/pkg/util/sets"
	gateway "github.com/zhangjyr/distributed-notebook/common/gateway"
	device "github.com/zhangjyr/distributed-notebook/scheduler/device"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/client-go/informers/core/v1"
	v1beta1 "k8s.io/kubelet/pkg/apis/deviceplugin/v1beta1"
)

// MockAllocator is a mock of Allocator interface.
type MockAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatorMockRecorder
}

// MockAllocatorMockRecorder is the mock recorder for MockAllocator.
type MockAllocatorMockRecorder struct {
	mock *MockAllocator
}

// NewMockAllocator creates a new mock instance.
func NewMockAllocator(ctrl *gomock.Controller) *MockAllocator {
	mock := &MockAllocator{ctrl: ctrl}
	mock.recorder = &MockAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllocator) EXPECT() *MockAllocatorMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockAllocator) Allocate(arg0 *v1beta1.AllocateRequest) (*v1beta1.AllocateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", arg0)
	ret0, _ := ret[0].(*v1beta1.AllocateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate.
func (mr *MockAllocatorMockRecorder) Allocate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockAllocator)(nil).Allocate), arg0)
}

// MockPreferredAllocator is a mock of PreferredAllocator interface.
type MockPreferredAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockPreferredAllocatorMockRecorder
}

// MockPreferredAllocatorMockRecorder is the mock recorder for MockPreferredAllocator.
type MockPreferredAllocatorMockRecorder struct {
	mock *MockPreferredAllocator
}

// NewMockPreferredAllocator creates a new mock instance.
func NewMockPreferredAllocator(ctrl *gomock.Controller) *MockPreferredAllocator {
	mock := &MockPreferredAllocator{ctrl: ctrl}
	mock.recorder = &MockPreferredAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreferredAllocator) EXPECT() *MockPreferredAllocatorMockRecorder {
	return m.recorder
}

// GetPreferredAllocation mocks base method.
func (m *MockPreferredAllocator) GetPreferredAllocation(arg0 *v1beta1.PreferredAllocationRequest) (*v1beta1.PreferredAllocationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferredAllocation", arg0)
	ret0, _ := ret[0].(*v1beta1.PreferredAllocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferredAllocation indicates an expected call of GetPreferredAllocation.
func (mr *MockPreferredAllocatorMockRecorder) GetPreferredAllocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferredAllocation", reflect.TypeOf((*MockPreferredAllocator)(nil).GetPreferredAllocation), arg0)
}

// MockVirtualGpuPluginServer is a mock of VirtualGpuPluginServer interface.
type MockVirtualGpuPluginServer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGpuPluginServerMockRecorder
}

// MockVirtualGpuPluginServerMockRecorder is the mock recorder for MockVirtualGpuPluginServer.
type MockVirtualGpuPluginServerMockRecorder struct {
	mock *MockVirtualGpuPluginServer
}

// NewMockVirtualGpuPluginServer creates a new mock instance.
func NewMockVirtualGpuPluginServer(ctrl *gomock.Controller) *MockVirtualGpuPluginServer {
	mock := &MockVirtualGpuPluginServer{ctrl: ctrl}
	mock.recorder = &MockVirtualGpuPluginServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGpuPluginServer) EXPECT() *MockVirtualGpuPluginServerMockRecorder {
	return m.recorder
}

// GetAllocations mocks base method.
func (m *MockVirtualGpuPluginServer) GetAllocations() map[string]*gateway.VirtualGpuAllocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocations")
	ret0, _ := ret[0].(map[string]*gateway.VirtualGpuAllocation)
	return ret0
}

// GetAllocations indicates an expected call of GetAllocations.
func (mr *MockVirtualGpuPluginServerMockRecorder) GetAllocations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocations", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).GetAllocations))
}

// NumAllocatedVirtualGPUs mocks base method.
func (m *MockVirtualGpuPluginServer) NumAllocatedVirtualGPUs() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumAllocatedVirtualGPUs")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumAllocatedVirtualGPUs indicates an expected call of NumAllocatedVirtualGPUs.
func (mr *MockVirtualGpuPluginServerMockRecorder) NumAllocatedVirtualGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumAllocatedVirtualGPUs", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).NumAllocatedVirtualGPUs))
}

// NumFreeVirtualGPUs mocks base method.
func (m *MockVirtualGpuPluginServer) NumFreeVirtualGPUs() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumFreeVirtualGPUs")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumFreeVirtualGPUs indicates an expected call of NumFreeVirtualGPUs.
func (mr *MockVirtualGpuPluginServerMockRecorder) NumFreeVirtualGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumFreeVirtualGPUs", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).NumFreeVirtualGPUs))
}

// NumVirtualGPUs mocks base method.
func (m *MockVirtualGpuPluginServer) NumVirtualGPUs() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumVirtualGPUs")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumVirtualGPUs indicates an expected call of NumVirtualGPUs.
func (mr *MockVirtualGpuPluginServerMockRecorder) NumVirtualGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumVirtualGPUs", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).NumVirtualGPUs))
}

// ResourceName mocks base method.
func (m *MockVirtualGpuPluginServer) ResourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceName indicates an expected call of ResourceName.
func (mr *MockVirtualGpuPluginServerMockRecorder) ResourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceName", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).ResourceName))
}

// Run mocks base method.
func (m *MockVirtualGpuPluginServer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockVirtualGpuPluginServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).Run))
}

// SetTotalVirtualGPUs mocks base method.
func (m *MockVirtualGpuPluginServer) SetTotalVirtualGPUs(arg0 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTotalVirtualGPUs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTotalVirtualGPUs indicates an expected call of SetTotalVirtualGPUs.
func (mr *MockVirtualGpuPluginServerMockRecorder) SetTotalVirtualGPUs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalVirtualGPUs", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).SetTotalVirtualGPUs), arg0)
}

// SocketFile mocks base method.
func (m *MockVirtualGpuPluginServer) SocketFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SocketFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// SocketFile indicates an expected call of SocketFile.
func (mr *MockVirtualGpuPluginServerMockRecorder) SocketFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SocketFile", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).SocketFile))
}

// SocketName mocks base method.
func (m *MockVirtualGpuPluginServer) SocketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SocketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SocketName indicates an expected call of SocketName.
func (mr *MockVirtualGpuPluginServerMockRecorder) SocketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SocketName", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).SocketName))
}

// Stop mocks base method.
func (m *MockVirtualGpuPluginServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockVirtualGpuPluginServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVirtualGpuPluginServer)(nil).Stop))
}

// MockVirtualGpuListerServer is a mock of VirtualGpuListerServer interface.
type MockVirtualGpuListerServer struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualGpuListerServerMockRecorder
}

// MockVirtualGpuListerServerMockRecorder is the mock recorder for MockVirtualGpuListerServer.
type MockVirtualGpuListerServerMockRecorder struct {
	mock *MockVirtualGpuListerServer
}

// NewMockVirtualGpuListerServer creates a new mock instance.
func NewMockVirtualGpuListerServer(ctrl *gomock.Controller) *MockVirtualGpuListerServer {
	mock := &MockVirtualGpuListerServer{ctrl: ctrl}
	mock.recorder = &MockVirtualGpuListerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualGpuListerServer) EXPECT() *MockVirtualGpuListerServerMockRecorder {
	return m.recorder
}

// ResourceName mocks base method.
func (m *MockVirtualGpuListerServer) ResourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceName indicates an expected call of ResourceName.
func (mr *MockVirtualGpuListerServerMockRecorder) ResourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceName", reflect.TypeOf((*MockVirtualGpuListerServer)(nil).ResourceName))
}

// Run mocks base method.
func (m *MockVirtualGpuListerServer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockVirtualGpuListerServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVirtualGpuListerServer)(nil).Run))
}

// SocketFile mocks base method.
func (m *MockVirtualGpuListerServer) SocketFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SocketFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// SocketFile indicates an expected call of SocketFile.
func (mr *MockVirtualGpuListerServerMockRecorder) SocketFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SocketFile", reflect.TypeOf((*MockVirtualGpuListerServer)(nil).SocketFile))
}

// SocketName mocks base method.
func (m *MockVirtualGpuListerServer) SocketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SocketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SocketName indicates an expected call of SocketName.
func (mr *MockVirtualGpuListerServerMockRecorder) SocketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SocketName", reflect.TypeOf((*MockVirtualGpuListerServer)(nil).SocketName))
}

// Stop mocks base method.
func (m *MockVirtualGpuListerServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockVirtualGpuListerServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVirtualGpuListerServer)(nil).Stop))
}

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// AllocateDevices mocks base method.
func (m *MockResourceManager) AllocateDevices(arg0 int) ([]string, []*v1beta1.DeviceSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateDevices", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]*v1beta1.DeviceSpec)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateDevices indicates an expected call of AllocateDevices.
func (mr *MockResourceManagerMockRecorder) AllocateDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateDevices", reflect.TypeOf((*MockResourceManager)(nil).AllocateDevices), arg0)
}

// AllocateSpecificDevice mocks base method.
func (m *MockResourceManager) AllocateSpecificDevice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateSpecificDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllocateSpecificDevice indicates an expected call of AllocateSpecificDevice.
func (mr *MockResourceManagerMockRecorder) AllocateSpecificDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSpecificDevice", reflect.TypeOf((*MockResourceManager)(nil).AllocateSpecificDevice), arg0)
}

// Devices mocks base method.
func (m *MockResourceManager) Devices() device.Devices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Devices")
	ret0, _ := ret[0].(device.Devices)
	return ret0
}

// Devices indicates an expected call of Devices.
func (mr *MockResourceManagerMockRecorder) Devices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockResourceManager)(nil).Devices))
}

// FreeDevice mocks base method.
func (m *MockResourceManager) FreeDevice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeDevice indicates an expected call of FreeDevice.
func (mr *MockResourceManagerMockRecorder) FreeDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeDevice", reflect.TypeOf((*MockResourceManager)(nil).FreeDevice), arg0)
}

// NumAllocatedDevices mocks base method.
func (m *MockResourceManager) NumAllocatedDevices() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumAllocatedDevices")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumAllocatedDevices indicates an expected call of NumAllocatedDevices.
func (mr *MockResourceManagerMockRecorder) NumAllocatedDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumAllocatedDevices", reflect.TypeOf((*MockResourceManager)(nil).NumAllocatedDevices))
}

// NumDevices mocks base method.
func (m *MockResourceManager) NumDevices() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumDevices")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumDevices indicates an expected call of NumDevices.
func (mr *MockResourceManagerMockRecorder) NumDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDevices", reflect.TypeOf((*MockResourceManager)(nil).NumDevices))
}

// NumFreeDevices mocks base method.
func (m *MockResourceManager) NumFreeDevices() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumFreeDevices")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumFreeDevices indicates an expected call of NumFreeDevices.
func (mr *MockResourceManagerMockRecorder) NumFreeDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumFreeDevices", reflect.TypeOf((*MockResourceManager)(nil).NumFreeDevices))
}

// Resource mocks base method.
func (m *MockResourceManager) Resource() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(string)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockResourceManagerMockRecorder) Resource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockResourceManager)(nil).Resource))
}

// SetTotalNumDevices mocks base method.
func (m *MockResourceManager) SetTotalNumDevices(arg0 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTotalNumDevices", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTotalNumDevices indicates an expected call of SetTotalNumDevices.
func (mr *MockResourceManagerMockRecorder) SetTotalNumDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalNumDevices", reflect.TypeOf((*MockResourceManager)(nil).SetTotalNumDevices), arg0)
}

// MockPodCache is a mock of PodCache interface.
type MockPodCache struct {
	ctrl     *gomock.Controller
	recorder *MockPodCacheMockRecorder
}

// MockPodCacheMockRecorder is the mock recorder for MockPodCache.
type MockPodCacheMockRecorder struct {
	mock *MockPodCache
}

// NewMockPodCache creates a new mock instance.
func NewMockPodCache(ctrl *gomock.Controller) *MockPodCache {
	mock := &MockPodCache{ctrl: ctrl}
	mock.recorder = &MockPodCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodCache) EXPECT() *MockPodCacheMockRecorder {
	return m.recorder
}

// GetActivePodIDs mocks base method.
func (m *MockPodCache) GetActivePodIDs() sets.Set[string] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePodIDs")
	ret0, _ := ret[0].(sets.Set[string])
	return ret0
}

// GetActivePodIDs indicates an expected call of GetActivePodIDs.
func (mr *MockPodCacheMockRecorder) GetActivePodIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePodIDs", reflect.TypeOf((*MockPodCache)(nil).GetActivePodIDs))
}

// GetActivePods mocks base method.
func (m *MockPodCache) GetActivePods() map[string]*v1.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePods")
	ret0, _ := ret[0].(map[string]*v1.Pod)
	return ret0
}

// GetActivePods indicates an expected call of GetActivePods.
func (mr *MockPodCacheMockRecorder) GetActivePods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePods", reflect.TypeOf((*MockPodCache)(nil).GetActivePods))
}

// GetPod mocks base method.
func (m *MockPodCache) GetPod(arg0, arg1 string) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", arg0, arg1)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockPodCacheMockRecorder) GetPod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockPodCache)(nil).GetPod), arg0, arg1)
}

// Informer mocks base method.
func (m *MockPodCache) Informer() v10.PodInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(v10.PodInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockPodCacheMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockPodCache)(nil).Informer))
}

// StopChan mocks base method.
func (m *MockPodCache) StopChan() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChan")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// StopChan indicates an expected call of StopChan.
func (mr *MockPodCacheMockRecorder) StopChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChan", reflect.TypeOf((*MockPodCache)(nil).StopChan))
}
