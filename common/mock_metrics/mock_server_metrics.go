// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/jupyter/server/server_metrics.go
//
// Generated by this command:
//
//	mockgen -source /home/scusemua/go/pkg/distributed-notebook/common/jupyter/server/server_metrics.go -package mock_metrics -destination /home/scusemua/go/pkg/distributed-notebook/common/mock_metrics/mock_server_metrics.go
//

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"
	time "time"

	messaging "github.com/scusemua/distributed-notebook/common/jupyter/messaging"
	metrics "github.com/scusemua/distributed-notebook/common/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockMessagingMetricsProvider is a mock of MessagingMetricsProvider interface.
type MockMessagingMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingMetricsProviderMockRecorder
	isgomock struct{}
}

// MockMessagingMetricsProviderMockRecorder is the mock recorder for MockMessagingMetricsProvider.
type MockMessagingMetricsProviderMockRecorder struct {
	mock *MockMessagingMetricsProvider
}

// NewMockMessagingMetricsProvider creates a new mock instance.
func NewMockMessagingMetricsProvider(ctrl *gomock.Controller) *MockMessagingMetricsProvider {
	mock := &MockMessagingMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockMessagingMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingMetricsProvider) EXPECT() *MockMessagingMetricsProviderMockRecorder {
	return m.recorder
}

// AddAckReceivedLatency mocks base method.
func (m *MockMessagingMetricsProvider) AddAckReceivedLatency(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAckReceivedLatency", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAckReceivedLatency indicates an expected call of AddAckReceivedLatency.
func (mr *MockMessagingMetricsProviderMockRecorder) AddAckReceivedLatency(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAckReceivedLatency", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddAckReceivedLatency), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddFailedSendAttempt mocks base method.
func (m *MockMessagingMetricsProvider) AddFailedSendAttempt(nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailedSendAttempt", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailedSendAttempt indicates an expected call of AddFailedSendAttempt.
func (mr *MockMessagingMetricsProviderMockRecorder) AddFailedSendAttempt(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailedSendAttempt", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddFailedSendAttempt), nodeId, nodeType, socketType, jupyterMessageType)
}

// AddMessageE2ELatencyObservation mocks base method.
func (m *MockMessagingMetricsProvider) AddMessageE2ELatencyObservation(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageE2ELatencyObservation", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageE2ELatencyObservation indicates an expected call of AddMessageE2ELatencyObservation.
func (mr *MockMessagingMetricsProviderMockRecorder) AddMessageE2ELatencyObservation(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageE2ELatencyObservation", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddMessageE2ELatencyObservation), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddNumSendAttemptsRequiredObservation mocks base method.
func (m *MockMessagingMetricsProvider) AddNumSendAttemptsRequiredObservation(acksRequired float64, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNumSendAttemptsRequiredObservation", acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNumSendAttemptsRequiredObservation indicates an expected call of AddNumSendAttemptsRequiredObservation.
func (mr *MockMessagingMetricsProviderMockRecorder) AddNumSendAttemptsRequiredObservation(acksRequired, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNumSendAttemptsRequiredObservation", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddNumSendAttemptsRequiredObservation), acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
}

// SentMessage mocks base method.
func (m *MockMessagingMetricsProvider) SentMessage(nodeId string, sendLatency time.Duration, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessage", nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessage indicates an expected call of SentMessage.
func (mr *MockMessagingMetricsProviderMockRecorder) SentMessage(nodeId, sendLatency, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessage", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).SentMessage), nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
}

// SentMessageUnique mocks base method.
func (m *MockMessagingMetricsProvider) SentMessageUnique(nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessageUnique", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessageUnique indicates an expected call of SentMessageUnique.
func (mr *MockMessagingMetricsProviderMockRecorder) SentMessageUnique(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessageUnique", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).SentMessageUnique), nodeId, nodeType, socketType, jupyterMessageType)
}

// UpdateClusterStatistics mocks base method.
func (m *MockMessagingMetricsProvider) UpdateClusterStatistics(arg0 func(*metrics.ClusterStatistics)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateClusterStatistics", arg0)
}

// UpdateClusterStatistics indicates an expected call of UpdateClusterStatistics.
func (mr *MockMessagingMetricsProviderMockRecorder) UpdateClusterStatistics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatistics", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).UpdateClusterStatistics), arg0)
}
