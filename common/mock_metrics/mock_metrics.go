// Code generated by MockGen. DO NOT EDIT.
// Source: core.go
//
// Generated by this command:
//
//	mockgen -source core.go -package mock_metrics -destination mock_metrics.go
//

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	types "github.com/scusemua/distributed-notebook/common/jupyter/types"
	metrics "github.com/scusemua/distributed-notebook/common/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockprometheusHandler is a mock of prometheusHandler interface.
type MockprometheusHandler struct {
	ctrl     *gomock.Controller
	recorder *MockprometheusHandlerMockRecorder
}

// MockprometheusHandlerMockRecorder is the mock recorder for MockprometheusHandler.
type MockprometheusHandlerMockRecorder struct {
	mock *MockprometheusHandler
}

// NewMockprometheusHandler creates a new mock instance.
func NewMockprometheusHandler(ctrl *gomock.Controller) *MockprometheusHandler {
	mock := &MockprometheusHandler{ctrl: ctrl}
	mock.recorder = &MockprometheusHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprometheusHandler) EXPECT() *MockprometheusHandlerMockRecorder {
	return m.recorder
}

// GetContainerMetricsProvider mocks base method.
func (m *MockprometheusHandler) GetContainerMetricsProvider() metrics.ContainerMetricsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetricsProvider")
	ret0, _ := ret[0].(metrics.ContainerMetricsProvider)
	return ret0
}

// GetContainerMetricsProvider indicates an expected call of GetContainerMetricsProvider.
func (mr *MockprometheusHandlerMockRecorder) GetContainerMetricsProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetricsProvider", reflect.TypeOf((*MockprometheusHandler)(nil).GetContainerMetricsProvider))
}

// GetMessagingMetricsProvider mocks base method.
func (m *MockprometheusHandler) GetMessagingMetricsProvider() metrics.MessagingMetricsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagingMetricsProvider")
	ret0, _ := ret[0].(metrics.MessagingMetricsProvider)
	return ret0
}

// GetMessagingMetricsProvider indicates an expected call of GetMessagingMetricsProvider.
func (mr *MockprometheusHandlerMockRecorder) GetMessagingMetricsProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingMetricsProvider", reflect.TypeOf((*MockprometheusHandler)(nil).GetMessagingMetricsProvider))
}

// HandleRequest mocks base method.
func (m *MockprometheusHandler) HandleRequest(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRequest", arg0)
}

// HandleRequest indicates an expected call of HandleRequest.
func (mr *MockprometheusHandlerMockRecorder) HandleRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRequest", reflect.TypeOf((*MockprometheusHandler)(nil).HandleRequest), arg0)
}

// HandleVariablesRequest mocks base method.
func (m *MockprometheusHandler) HandleVariablesRequest(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleVariablesRequest", arg0)
}

// HandleVariablesRequest indicates an expected call of HandleVariablesRequest.
func (mr *MockprometheusHandlerMockRecorder) HandleVariablesRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleVariablesRequest", reflect.TypeOf((*MockprometheusHandler)(nil).HandleVariablesRequest), arg0)
}

// IsRunning mocks base method.
func (m *MockprometheusHandler) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockprometheusHandlerMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockprometheusHandler)(nil).IsRunning))
}

// NodeId mocks base method.
func (m *MockprometheusHandler) NodeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeId indicates an expected call of NodeId.
func (mr *MockprometheusHandlerMockRecorder) NodeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeId", reflect.TypeOf((*MockprometheusHandler)(nil).NodeId))
}

// Start mocks base method.
func (m *MockprometheusHandler) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockprometheusHandlerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockprometheusHandler)(nil).Start))
}

// Stop mocks base method.
func (m *MockprometheusHandler) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockprometheusHandlerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockprometheusHandler)(nil).Stop))
}

// MockMessagingMetricsProvider is a mock of MessagingMetricsProvider interface.
type MockMessagingMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingMetricsProviderMockRecorder
}

// MockMessagingMetricsProviderMockRecorder is the mock recorder for MockMessagingMetricsProvider.
type MockMessagingMetricsProviderMockRecorder struct {
	mock *MockMessagingMetricsProvider
}

// NewMockMessagingMetricsProvider creates a new mock instance.
func NewMockMessagingMetricsProvider(ctrl *gomock.Controller) *MockMessagingMetricsProvider {
	mock := &MockMessagingMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockMessagingMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingMetricsProvider) EXPECT() *MockMessagingMetricsProviderMockRecorder {
	return m.recorder
}

// AddAckReceivedLatency mocks base method.
func (m *MockMessagingMetricsProvider) AddAckReceivedLatency(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType types.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAckReceivedLatency", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAckReceivedLatency indicates an expected call of AddAckReceivedLatency.
func (mr *MockMessagingMetricsProviderMockRecorder) AddAckReceivedLatency(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAckReceivedLatency", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddAckReceivedLatency), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddFailedSendAttempt mocks base method.
func (m *MockMessagingMetricsProvider) AddFailedSendAttempt(nodeId string, nodeType metrics.NodeType, socketType types.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailedSendAttempt", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailedSendAttempt indicates an expected call of AddFailedSendAttempt.
func (mr *MockMessagingMetricsProviderMockRecorder) AddFailedSendAttempt(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailedSendAttempt", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddFailedSendAttempt), nodeId, nodeType, socketType, jupyterMessageType)
}

// AddMessageE2ELatencyObservation mocks base method.
func (m *MockMessagingMetricsProvider) AddMessageE2ELatencyObservation(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType types.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageE2ELatencyObservation", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageE2ELatencyObservation indicates an expected call of AddMessageE2ELatencyObservation.
func (mr *MockMessagingMetricsProviderMockRecorder) AddMessageE2ELatencyObservation(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageE2ELatencyObservation", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddMessageE2ELatencyObservation), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddNumSendAttemptsRequiredObservation mocks base method.
func (m *MockMessagingMetricsProvider) AddNumSendAttemptsRequiredObservation(acksRequired float64, nodeId string, nodeType metrics.NodeType, socketType types.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNumSendAttemptsRequiredObservation", acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNumSendAttemptsRequiredObservation indicates an expected call of AddNumSendAttemptsRequiredObservation.
func (mr *MockMessagingMetricsProviderMockRecorder) AddNumSendAttemptsRequiredObservation(acksRequired, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNumSendAttemptsRequiredObservation", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).AddNumSendAttemptsRequiredObservation), acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
}

// SentMessage mocks base method.
func (m *MockMessagingMetricsProvider) SentMessage(nodeId string, sendLatency time.Duration, nodeType metrics.NodeType, socketType types.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessage", nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessage indicates an expected call of SentMessage.
func (mr *MockMessagingMetricsProviderMockRecorder) SentMessage(nodeId, sendLatency, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessage", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).SentMessage), nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
}

// SentMessageUnique mocks base method.
func (m *MockMessagingMetricsProvider) SentMessageUnique(nodeId string, nodeType metrics.NodeType, socketType types.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessageUnique", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessageUnique indicates an expected call of SentMessageUnique.
func (mr *MockMessagingMetricsProviderMockRecorder) SentMessageUnique(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessageUnique", reflect.TypeOf((*MockMessagingMetricsProvider)(nil).SentMessageUnique), nodeId, nodeType, socketType, jupyterMessageType)
}

// MockContainerMetricsProvider is a mock of ContainerMetricsProvider interface.
type MockContainerMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMetricsProviderMockRecorder
}

// MockContainerMetricsProviderMockRecorder is the mock recorder for MockContainerMetricsProvider.
type MockContainerMetricsProviderMockRecorder struct {
	mock *MockContainerMetricsProvider
}

// NewMockContainerMetricsProvider creates a new mock instance.
func NewMockContainerMetricsProvider(ctrl *gomock.Controller) *MockContainerMetricsProvider {
	mock := &MockContainerMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockContainerMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerMetricsProvider) EXPECT() *MockContainerMetricsProviderMockRecorder {
	return m.recorder
}

// AddContainerCreationLatencyObservation mocks base method.
func (m *MockContainerMetricsProvider) AddContainerCreationLatencyObservation(latency time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContainerCreationLatencyObservation", latency)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContainerCreationLatencyObservation indicates an expected call of AddContainerCreationLatencyObservation.
func (mr *MockContainerMetricsProviderMockRecorder) AddContainerCreationLatencyObservation(latency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainerCreationLatencyObservation", reflect.TypeOf((*MockContainerMetricsProvider)(nil).AddContainerCreationLatencyObservation), latency)
}

// MockPrometheusMetricsProvider is a mock of PrometheusMetricsProvider interface.
type MockPrometheusMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusMetricsProviderMockRecorder
}

// MockPrometheusMetricsProviderMockRecorder is the mock recorder for MockPrometheusMetricsProvider.
type MockPrometheusMetricsProviderMockRecorder struct {
	mock *MockPrometheusMetricsProvider
}

// NewMockPrometheusMetricsProvider creates a new mock instance.
func NewMockPrometheusMetricsProvider(ctrl *gomock.Controller) *MockPrometheusMetricsProvider {
	mock := &MockPrometheusMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockPrometheusMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusMetricsProvider) EXPECT() *MockPrometheusMetricsProviderMockRecorder {
	return m.recorder
}

// GetContainerMetricsProvider mocks base method.
func (m *MockPrometheusMetricsProvider) GetContainerMetricsProvider() metrics.ContainerMetricsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetricsProvider")
	ret0, _ := ret[0].(metrics.ContainerMetricsProvider)
	return ret0
}

// GetContainerMetricsProvider indicates an expected call of GetContainerMetricsProvider.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetContainerMetricsProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetricsProvider", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetContainerMetricsProvider))
}

// GetMessagingMetricsProvider mocks base method.
func (m *MockPrometheusMetricsProvider) GetMessagingMetricsProvider() metrics.MessagingMetricsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagingMetricsProvider")
	ret0, _ := ret[0].(metrics.MessagingMetricsProvider)
	return ret0
}

// GetMessagingMetricsProvider indicates an expected call of GetMessagingMetricsProvider.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetMessagingMetricsProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingMetricsProvider", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetMessagingMetricsProvider))
}

// IsRunning mocks base method.
func (m *MockPrometheusMetricsProvider) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockPrometheusMetricsProviderMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).IsRunning))
}

// NodeId mocks base method.
func (m *MockPrometheusMetricsProvider) NodeId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeId indicates an expected call of NodeId.
func (mr *MockPrometheusMetricsProviderMockRecorder) NodeId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeId", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).NodeId))
}

// Start mocks base method.
func (m *MockPrometheusMetricsProvider) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPrometheusMetricsProviderMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).Start))
}

// Stop mocks base method.
func (m *MockPrometheusMetricsProvider) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPrometheusMetricsProviderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).Stop))
}
