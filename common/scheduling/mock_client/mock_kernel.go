// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/scheduling/kernel.go
//
// Generated by this command:
//
//	mockgen -source /home/scusemua/go/pkg/distributed-notebook/common/scheduling/kernel.go -package mock_client -destination /home/scusemua/go/pkg/distributed-notebook/common/scheduling/mock_client/mock_kernel.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"
	time "time"

	jupyter "github.com/scusemua/distributed-notebook/common/jupyter"
	messaging "github.com/scusemua/distributed-notebook/common/jupyter/messaging"
	metrics "github.com/scusemua/distributed-notebook/common/metrics"
	proto "github.com/scusemua/distributed-notebook/common/proto"
	scheduling "github.com/scusemua/distributed-notebook/common/scheduling"
	types "github.com/scusemua/distributed-notebook/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockKernelInfo is a mock of KernelInfo interface.
type MockKernelInfo struct {
	ctrl     *gomock.Controller
	recorder *MockKernelInfoMockRecorder
}

// MockKernelInfoMockRecorder is the mock recorder for MockKernelInfo.
type MockKernelInfoMockRecorder struct {
	mock *MockKernelInfo
}

// NewMockKernelInfo creates a new mock instance.
func NewMockKernelInfo(ctrl *gomock.Controller) *MockKernelInfo {
	mock := &MockKernelInfo{ctrl: ctrl}
	mock.recorder = &MockKernelInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelInfo) EXPECT() *MockKernelInfoMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockKernelInfo) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelInfoMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernelInfo)(nil).ID))
}

// KernelSpec mocks base method.
func (m *MockKernelInfo) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelInfoMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernelInfo)(nil).KernelSpec))
}

// ResourceSpec mocks base method.
func (m *MockKernelInfo) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelInfoMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernelInfo)(nil).ResourceSpec))
}

// Socket mocks base method.
func (m *MockKernelInfo) Socket(arg0 messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", arg0)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelInfoMockRecorder) Socket(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernelInfo)(nil).Socket), arg0)
}

// String mocks base method.
func (m *MockKernelInfo) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelInfoMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelInfo)(nil).String))
}

// MockKernelReplicaInfo is a mock of KernelReplicaInfo interface.
type MockKernelReplicaInfo struct {
	ctrl     *gomock.Controller
	recorder *MockKernelReplicaInfoMockRecorder
}

// MockKernelReplicaInfoMockRecorder is the mock recorder for MockKernelReplicaInfo.
type MockKernelReplicaInfoMockRecorder struct {
	mock *MockKernelReplicaInfo
}

// NewMockKernelReplicaInfo creates a new mock instance.
func NewMockKernelReplicaInfo(ctrl *gomock.Controller) *MockKernelReplicaInfo {
	mock := &MockKernelReplicaInfo{ctrl: ctrl}
	mock.recorder = &MockKernelReplicaInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelReplicaInfo) EXPECT() *MockKernelReplicaInfoMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockKernelReplicaInfo) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelReplicaInfoMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernelReplicaInfo)(nil).ID))
}

// KernelSpec mocks base method.
func (m *MockKernelReplicaInfo) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelReplicaInfoMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernelReplicaInfo)(nil).KernelSpec))
}

// ReplicaID mocks base method.
func (m *MockKernelReplicaInfo) ReplicaID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID.
func (mr *MockKernelReplicaInfoMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockKernelReplicaInfo)(nil).ReplicaID))
}

// ResourceSpec mocks base method.
func (m *MockKernelReplicaInfo) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelReplicaInfoMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernelReplicaInfo)(nil).ResourceSpec))
}

// Socket mocks base method.
func (m *MockKernelReplicaInfo) Socket(arg0 messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", arg0)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelReplicaInfoMockRecorder) Socket(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernelReplicaInfo)(nil).Socket), arg0)
}

// String mocks base method.
func (m *MockKernelReplicaInfo) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelReplicaInfoMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelReplicaInfo)(nil).String))
}

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// BindSession mocks base method.
func (m *MockSessionManager) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockSessionManagerMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockSessionManager)(nil).BindSession), sess)
}

// ClearSessions mocks base method.
func (m *MockSessionManager) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockSessionManagerMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockSessionManager)(nil).ClearSessions))
}

// Sessions mocks base method.
func (m *MockSessionManager) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockSessionManagerMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockSessionManager)(nil).Sessions))
}

// UnbindSession mocks base method.
func (m *MockSessionManager) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockSessionManagerMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockSessionManager)(nil).UnbindSession), sess)
}

// MockKernel is a mock of Kernel interface.
type MockKernel struct {
	ctrl     *gomock.Controller
	recorder *MockKernelMockRecorder
}

// MockKernelMockRecorder is the mock recorder for MockKernel.
type MockKernelMockRecorder struct {
	mock *MockKernel
}

// NewMockKernel creates a new mock instance.
func NewMockKernel(ctrl *gomock.Controller) *MockKernel {
	mock := &MockKernel{ctrl: ctrl}
	mock.recorder = &MockKernelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernel) EXPECT() *MockKernelMockRecorder {
	return m.recorder
}

// ActiveExecution mocks base method.
func (m *MockKernel) ActiveExecution() scheduling.CodeExecution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveExecution")
	ret0, _ := ret[0].(scheduling.CodeExecution)
	return ret0
}

// ActiveExecution indicates an expected call of ActiveExecution.
func (mr *MockKernelMockRecorder) ActiveExecution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveExecution", reflect.TypeOf((*MockKernel)(nil).ActiveExecution))
}

// AddOperationCompleted mocks base method.
func (m *MockKernel) AddOperationCompleted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationCompleted")
}

// AddOperationCompleted indicates an expected call of AddOperationCompleted.
func (mr *MockKernelMockRecorder) AddOperationCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationCompleted", reflect.TypeOf((*MockKernel)(nil).AddOperationCompleted))
}

// AddOperationStarted mocks base method.
func (m *MockKernel) AddOperationStarted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationStarted")
}

// AddOperationStarted indicates an expected call of AddOperationStarted.
func (mr *MockKernelMockRecorder) AddOperationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationStarted", reflect.TypeOf((*MockKernel)(nil).AddOperationStarted))
}

// AddReplica mocks base method.
func (m *MockKernel) AddReplica(r scheduling.KernelReplica, host scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", r, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockKernelMockRecorder) AddReplica(r, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockKernel)(nil).AddReplica), r, host)
}

// AggregateBusyStatus mocks base method.
func (m *MockKernel) AggregateBusyStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateBusyStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// AggregateBusyStatus indicates an expected call of AggregateBusyStatus.
func (mr *MockKernelMockRecorder) AggregateBusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateBusyStatus", reflect.TypeOf((*MockKernel)(nil).AggregateBusyStatus))
}

// AssignMessagingMetricsProvider mocks base method.
func (m *MockKernel) AssignMessagingMetricsProvider(messagingMetricsProvider metrics.MessagingMetricsProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignMessagingMetricsProvider", messagingMetricsProvider)
}

// AssignMessagingMetricsProvider indicates an expected call of AssignMessagingMetricsProvider.
func (mr *MockKernelMockRecorder) AssignMessagingMetricsProvider(messagingMetricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignMessagingMetricsProvider", reflect.TypeOf((*MockKernel)(nil).AssignMessagingMetricsProvider), messagingMetricsProvider)
}

// BindSession mocks base method.
func (m *MockKernel) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockKernelMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockKernel)(nil).BindSession), sess)
}

// ClearSessions mocks base method.
func (m *MockKernel) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockKernelMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockKernel)(nil).ClearSessions))
}

// Close mocks base method.
func (m *MockKernel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKernelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKernel)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockKernel) ConnectionInfo() *jupyter.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*jupyter.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockKernelMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockKernel)(nil).ConnectionInfo))
}

// Context mocks base method.
func (m *MockKernel) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockKernelMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKernel)(nil).Context))
}

// EnqueueActiveExecution mocks base method.
func (m *MockKernel) EnqueueActiveExecution(attemptId int, msg *messaging.JupyterMessage) scheduling.CodeExecution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueActiveExecution", attemptId, msg)
	ret0, _ := ret[0].(scheduling.CodeExecution)
	return ret0
}

// EnqueueActiveExecution indicates an expected call of EnqueueActiveExecution.
func (mr *MockKernelMockRecorder) EnqueueActiveExecution(attemptId, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueActiveExecution", reflect.TypeOf((*MockKernel)(nil).EnqueueActiveExecution), attemptId, msg)
}

// ExecutionComplete mocks base method.
func (m *MockKernel) ExecutionComplete(msg *messaging.JupyterMessage) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionComplete", msg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutionComplete indicates an expected call of ExecutionComplete.
func (mr *MockKernelMockRecorder) ExecutionComplete(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionComplete", reflect.TypeOf((*MockKernel)(nil).ExecutionComplete), msg)
}

// ExecutionFailedCallback mocks base method.
func (m *MockKernel) ExecutionFailedCallback() scheduling.ExecutionFailedCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionFailedCallback")
	ret0, _ := ret[0].(scheduling.ExecutionFailedCallback)
	return ret0
}

// ExecutionFailedCallback indicates an expected call of ExecutionFailedCallback.
func (mr *MockKernelMockRecorder) ExecutionFailedCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionFailedCallback", reflect.TypeOf((*MockKernel)(nil).ExecutionFailedCallback))
}

// GetActiveExecutionByExecuteRequestMsgId mocks base method.
func (m *MockKernel) GetActiveExecutionByExecuteRequestMsgId(msgId string) (scheduling.CodeExecution, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutionByExecuteRequestMsgId", msgId)
	ret0, _ := ret[0].(scheduling.CodeExecution)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetActiveExecutionByExecuteRequestMsgId indicates an expected call of GetActiveExecutionByExecuteRequestMsgId.
func (mr *MockKernelMockRecorder) GetActiveExecutionByExecuteRequestMsgId(msgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutionByExecuteRequestMsgId", reflect.TypeOf((*MockKernel)(nil).GetActiveExecutionByExecuteRequestMsgId), msgId)
}

// GetContainers mocks base method.
func (m *MockKernel) GetContainers() []scheduling.KernelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]scheduling.KernelContainer)
	return ret0
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockKernelMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockKernel)(nil).GetContainers))
}

// GetReadyReplica mocks base method.
func (m *MockKernel) GetReadyReplica() scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyReplica")
	ret0, _ := ret[0].(scheduling.KernelReplica)
	return ret0
}

// GetReadyReplica indicates an expected call of GetReadyReplica.
func (mr *MockKernelMockRecorder) GetReadyReplica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyReplica", reflect.TypeOf((*MockKernel)(nil).GetReadyReplica))
}

// GetReplicaByID mocks base method.
func (m *MockKernel) GetReplicaByID(id int32) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaByID", id)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaByID indicates an expected call of GetReplicaByID.
func (mr *MockKernelMockRecorder) GetReplicaByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaByID", reflect.TypeOf((*MockKernel)(nil).GetReplicaByID), id)
}

// GetSession mocks base method.
func (m *MockKernel) GetSession() scheduling.UserSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(scheduling.UserSession)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockKernelMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockKernel)(nil).GetSession))
}

// GetSocketPort mocks base method.
func (m *MockKernel) GetSocketPort(typ messaging.MessageType) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocketPort", typ)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSocketPort indicates an expected call of GetSocketPort.
func (mr *MockKernelMockRecorder) GetSocketPort(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketPort", reflect.TypeOf((*MockKernel)(nil).GetSocketPort), typ)
}

// ID mocks base method.
func (m *MockKernel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernel)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockKernel) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockKernelMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockKernel)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockKernel) InitializeIOForwarder() (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockKernelMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockKernel)(nil).InitializeIOForwarder))
}

// InitializeShellForwarder mocks base method.
func (m *MockKernel) InitializeShellForwarder(handler scheduling.KernelMessageHandler) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockKernelMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockKernel)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockKernel) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockKernelMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockKernel)(nil).IsReady))
}

// IsReplicaReady mocks base method.
func (m *MockKernel) IsReplicaReady(replicaId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReplicaReady", replicaId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReplicaReady indicates an expected call of IsReplicaReady.
func (mr *MockKernelMockRecorder) IsReplicaReady(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReplicaReady", reflect.TypeOf((*MockKernel)(nil).IsReplicaReady), replicaId)
}

// KernelSpec mocks base method.
func (m *MockKernel) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernel)(nil).KernelSpec))
}

// MessageAcknowledgementsEnabled mocks base method.
func (m *MockKernel) MessageAcknowledgementsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAcknowledgementsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MessageAcknowledgementsEnabled indicates an expected call of MessageAcknowledgementsEnabled.
func (mr *MockKernelMockRecorder) MessageAcknowledgementsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAcknowledgementsEnabled", reflect.TypeOf((*MockKernel)(nil).MessageAcknowledgementsEnabled))
}

// NumActiveExecutionOperations mocks base method.
func (m *MockKernel) NumActiveExecutionOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveExecutionOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveExecutionOperations indicates an expected call of NumActiveExecutionOperations.
func (mr *MockKernelMockRecorder) NumActiveExecutionOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveExecutionOperations", reflect.TypeOf((*MockKernel)(nil).NumActiveExecutionOperations))
}

// NumActiveMigrationOperations mocks base method.
func (m *MockKernel) NumActiveMigrationOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveMigrationOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveMigrationOperations indicates an expected call of NumActiveMigrationOperations.
func (mr *MockKernelMockRecorder) NumActiveMigrationOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveMigrationOperations", reflect.TypeOf((*MockKernel)(nil).NumActiveMigrationOperations))
}

// PersistentID mocks base method.
func (m *MockKernel) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockKernelMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockKernel)(nil).PersistentID))
}

// PodOrContainerName mocks base method.
func (m *MockKernel) PodOrContainerName(id int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodOrContainerName", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodOrContainerName indicates an expected call of PodOrContainerName.
func (mr *MockKernelMockRecorder) PodOrContainerName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodOrContainerName", reflect.TypeOf((*MockKernel)(nil).PodOrContainerName), id)
}

// PrepareNewReplica mocks base method.
func (m *MockKernel) PrepareNewReplica(persistentId string, smrNodeId int32) *proto.KernelReplicaSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNewReplica", persistentId, smrNodeId)
	ret0, _ := ret[0].(*proto.KernelReplicaSpec)
	return ret0
}

// PrepareNewReplica indicates an expected call of PrepareNewReplica.
func (mr *MockKernelMockRecorder) PrepareNewReplica(persistentId, smrNodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNewReplica", reflect.TypeOf((*MockKernel)(nil).PrepareNewReplica), persistentId, smrNodeId)
}

// RegisterAck mocks base method.
func (m *MockKernel) RegisterAck(msg *messaging.JupyterMessage) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAck", msg)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAck indicates an expected call of RegisterAck.
func (mr *MockKernelMockRecorder) RegisterAck(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAck", reflect.TypeOf((*MockKernel)(nil).RegisterAck), msg)
}

// RegisterAckForRequest mocks base method.
func (m *MockKernel) RegisterAckForRequest(req messaging.Request) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAckForRequest", req)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAckForRequest indicates an expected call of RegisterAckForRequest.
func (mr *MockKernelMockRecorder) RegisterAckForRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAckForRequest", reflect.TypeOf((*MockKernel)(nil).RegisterAckForRequest), req)
}

// RemoveReplica mocks base method.
func (m *MockKernel) RemoveReplica(r scheduling.KernelReplica, remover scheduling.ReplicaRemover, noop bool) (scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplica", r, remover, noop)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplica indicates an expected call of RemoveReplica.
func (mr *MockKernelMockRecorder) RemoveReplica(r, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockKernel)(nil).RemoveReplica), r, remover, noop)
}

// RemoveReplicaByID mocks base method.
func (m *MockKernel) RemoveReplicaByID(id int32, remover scheduling.ReplicaRemover, noop bool) (scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaByID", id, remover, noop)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplicaByID indicates an expected call of RemoveReplicaByID.
func (mr *MockKernelMockRecorder) RemoveReplicaByID(id, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaByID", reflect.TypeOf((*MockKernel)(nil).RemoveReplicaByID), id, remover, noop)
}

// Replicas mocks base method.
func (m *MockKernel) Replicas() []scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].([]scheduling.KernelReplica)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockKernelMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockKernel)(nil).Replicas))
}

// RequestWithHandler mocks base method.
func (m *MockKernel) RequestWithHandler(ctx context.Context, arg1 string, typ messaging.MessageType, msg *messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, arg1, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockKernelMockRecorder) RequestWithHandler(ctx, arg1, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockKernel)(nil).RequestWithHandler), ctx, arg1, typ, msg, handler, done)
}

// RequestWithHandlerAndReplicas mocks base method.
func (m *MockKernel) RequestWithHandlerAndReplicas(ctx context.Context, typ messaging.MessageType, jMsg *messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func(), replicas ...scheduling.KernelReplica) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, typ, jMsg, handler, done}
	for _, a := range replicas {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithHandlerAndReplicas", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandlerAndReplicas indicates an expected call of RequestWithHandlerAndReplicas.
func (mr *MockKernelMockRecorder) RequestWithHandlerAndReplicas(ctx, typ, jMsg, handler, done any, replicas ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, typ, jMsg, handler, done}, replicas...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandlerAndReplicas", reflect.TypeOf((*MockKernel)(nil).RequestWithHandlerAndReplicas), varargs...)
}

// ResetID mocks base method.
func (m *MockKernel) ResetID(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetID", id)
}

// ResetID indicates an expected call of ResetID.
func (mr *MockKernelMockRecorder) ResetID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetID", reflect.TypeOf((*MockKernel)(nil).ResetID), id)
}

// ResourceSpec mocks base method.
func (m *MockKernel) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernel)(nil).ResourceSpec))
}

// SendRequest mocks base method.
func (m *MockKernel) SendRequest(request messaging.Request, socket *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", request, socket)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockKernelMockRecorder) SendRequest(request, socket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockKernel)(nil).SendRequest), request, socket)
}

// Sessions mocks base method.
func (m *MockKernel) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockKernelMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockKernel)(nil).Sessions))
}

// SetActiveExecution mocks base method.
func (m *MockKernel) SetActiveExecution(activeExecution scheduling.CodeExecution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActiveExecution", activeExecution)
}

// SetActiveExecution indicates an expected call of SetActiveExecution.
func (mr *MockKernelMockRecorder) SetActiveExecution(activeExecution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveExecution", reflect.TypeOf((*MockKernel)(nil).SetActiveExecution), activeExecution)
}

// SetComponentId mocks base method.
func (m *MockKernel) SetComponentId(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentId", id)
}

// SetComponentId indicates an expected call of SetComponentId.
func (mr *MockKernelMockRecorder) SetComponentId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentId", reflect.TypeOf((*MockKernel)(nil).SetComponentId), id)
}

// SetContext mocks base method.
func (m *MockKernel) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockKernelMockRecorder) SetContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockKernel)(nil).SetContext), arg0)
}

// SetIOPubSocket mocks base method.
func (m *MockKernel) SetIOPubSocket(iopub *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIOPubSocket", iopub)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIOPubSocket indicates an expected call of SetIOPubSocket.
func (mr *MockKernelMockRecorder) SetIOPubSocket(iopub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOPubSocket", reflect.TypeOf((*MockKernel)(nil).SetIOPubSocket), iopub)
}

// SetSession mocks base method.
func (m *MockKernel) SetSession(session scheduling.UserSession) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", session)
}

// SetSession indicates an expected call of SetSession.
func (mr *MockKernelMockRecorder) SetSession(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockKernel)(nil).SetSession), session)
}

// ShellListenPort mocks base method.
func (m *MockKernel) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockKernelMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockKernel)(nil).ShellListenPort))
}

// Shutdown mocks base method.
func (m *MockKernel) Shutdown(remover scheduling.ReplicaRemover, restart bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", remover, restart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockKernelMockRecorder) Shutdown(remover, restart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockKernel)(nil).Shutdown), remover, restart)
}

// Size mocks base method.
func (m *MockKernel) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockKernelMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockKernel)(nil).Size))
}

// Socket mocks base method.
func (m *MockKernel) Socket(typ messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernel)(nil).Socket), typ)
}

// SourceKernelID mocks base method.
func (m *MockKernel) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockKernelMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockKernel)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockKernel) Status() jupyter.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(jupyter.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockKernelMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKernel)(nil).Status))
}

// String mocks base method.
func (m *MockKernel) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernel)(nil).String))
}

// UnbindSession mocks base method.
func (m *MockKernel) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockKernelMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockKernel)(nil).UnbindSession), sess)
}

// Validate mocks base method.
func (m *MockKernel) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockKernelMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockKernel)(nil).Validate))
}

// WaitClosed mocks base method.
func (m *MockKernel) WaitClosed() jupyter.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitClosed")
	ret0, _ := ret[0].(jupyter.KernelStatus)
	return ret0
}

// WaitClosed indicates an expected call of WaitClosed.
func (mr *MockKernelMockRecorder) WaitClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitClosed", reflect.TypeOf((*MockKernel)(nil).WaitClosed))
}

// MockKernelReplica is a mock of KernelReplica interface.
type MockKernelReplica struct {
	ctrl     *gomock.Controller
	recorder *MockKernelReplicaMockRecorder
}

// MockKernelReplicaMockRecorder is the mock recorder for MockKernelReplica.
type MockKernelReplicaMockRecorder struct {
	mock *MockKernelReplica
}

// NewMockKernelReplica creates a new mock instance.
func NewMockKernelReplica(ctrl *gomock.Controller) *MockKernelReplica {
	mock := &MockKernelReplica{ctrl: ctrl}
	mock.recorder = &MockKernelReplicaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelReplica) EXPECT() *MockKernelReplicaMockRecorder {
	return m.recorder
}

// AddIOHandler mocks base method.
func (m *MockKernelReplica) AddIOHandler(topic string, handler scheduling.MessageBrokerHandler[scheduling.KernelReplica, *messaging.JupyterFrames, *messaging.JupyterMessage]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIOHandler", topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIOHandler indicates an expected call of AddIOHandler.
func (mr *MockKernelReplicaMockRecorder) AddIOHandler(topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIOHandler", reflect.TypeOf((*MockKernelReplica)(nil).AddIOHandler), topic, handler)
}

// Address mocks base method.
func (m *MockKernelReplica) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockKernelReplicaMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockKernelReplica)(nil).Address))
}

// AssignMessagingMetricsProvider mocks base method.
func (m *MockKernelReplica) AssignMessagingMetricsProvider(messagingMetricsProvider metrics.MessagingMetricsProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignMessagingMetricsProvider", messagingMetricsProvider)
}

// AssignMessagingMetricsProvider indicates an expected call of AssignMessagingMetricsProvider.
func (mr *MockKernelReplicaMockRecorder) AssignMessagingMetricsProvider(messagingMetricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignMessagingMetricsProvider", reflect.TypeOf((*MockKernelReplica)(nil).AssignMessagingMetricsProvider), messagingMetricsProvider)
}

// BindSession mocks base method.
func (m *MockKernelReplica) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockKernelReplicaMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockKernelReplica)(nil).BindSession), sess)
}

// BusyStatus mocks base method.
func (m *MockKernelReplica) BusyStatus() (string, *messaging.JupyterMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*messaging.JupyterMessage)
	return ret0, ret1
}

// BusyStatus indicates an expected call of BusyStatus.
func (mr *MockKernelReplicaMockRecorder) BusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyStatus", reflect.TypeOf((*MockKernelReplica)(nil).BusyStatus))
}

// ClearSessions mocks base method.
func (m *MockKernelReplica) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockKernelReplicaMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockKernelReplica)(nil).ClearSessions))
}

// Close mocks base method.
func (m *MockKernelReplica) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKernelReplicaMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKernelReplica)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockKernelReplica) ConnectionInfo() *jupyter.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*jupyter.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockKernelReplicaMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockKernelReplica)(nil).ConnectionInfo))
}

// Container mocks base method.
func (m *MockKernelReplica) Container() scheduling.KernelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(scheduling.KernelContainer)
	return ret0
}

// Container indicates an expected call of Container.
func (mr *MockKernelReplicaMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockKernelReplica)(nil).Container))
}

// Context mocks base method.
func (m *MockKernelReplica) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockKernelReplicaMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKernelReplica)(nil).Context))
}

// GetHost mocks base method.
func (m *MockKernelReplica) GetHost() scheduling.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(scheduling.Host)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockKernelReplicaMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockKernelReplica)(nil).GetHost))
}

// GetPodOrContainerName mocks base method.
func (m *MockKernelReplica) GetPodOrContainerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodOrContainerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPodOrContainerName indicates an expected call of GetPodOrContainerName.
func (mr *MockKernelReplicaMockRecorder) GetPodOrContainerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodOrContainerName", reflect.TypeOf((*MockKernelReplica)(nil).GetPodOrContainerName))
}

// GetSocketPort mocks base method.
func (m *MockKernelReplica) GetSocketPort(typ messaging.MessageType) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocketPort", typ)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSocketPort indicates an expected call of GetSocketPort.
func (mr *MockKernelReplicaMockRecorder) GetSocketPort(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketPort", reflect.TypeOf((*MockKernelReplica)(nil).GetSocketPort), typ)
}

// HostId mocks base method.
func (m *MockKernelReplica) HostId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostId")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostId indicates an expected call of HostId.
func (mr *MockKernelReplicaMockRecorder) HostId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostId", reflect.TypeOf((*MockKernelReplica)(nil).HostId))
}

// ID mocks base method.
func (m *MockKernelReplica) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelReplicaMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernelReplica)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockKernelReplica) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockKernelReplicaMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockKernelReplica)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockKernelReplica) InitializeIOForwarder() (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockKernelReplicaMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockKernelReplica)(nil).InitializeIOForwarder))
}

// InitializeIOSub mocks base method.
func (m *MockKernelReplica) InitializeIOSub(handler messaging.MessageHandler, subscriptionTopic string) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOSub", handler, subscriptionTopic)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOSub indicates an expected call of InitializeIOSub.
func (mr *MockKernelReplicaMockRecorder) InitializeIOSub(handler, subscriptionTopic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOSub", reflect.TypeOf((*MockKernelReplica)(nil).InitializeIOSub), handler, subscriptionTopic)
}

// InitializeShellForwarder mocks base method.
func (m *MockKernelReplica) InitializeShellForwarder(handler scheduling.KernelMessageHandler) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockKernelReplicaMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockKernelReplica)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockKernelReplica) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockKernelReplicaMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockKernelReplica)(nil).IsReady))
}

// IsTraining mocks base method.
func (m *MockKernelReplica) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockKernelReplicaMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockKernelReplica)(nil).IsTraining))
}

// KernelSpec mocks base method.
func (m *MockKernelReplica) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelReplicaMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernelReplica)(nil).KernelSpec))
}

// KernelStartedTraining mocks base method.
func (m *MockKernelReplica) KernelStartedTraining() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelStartedTraining")
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelStartedTraining indicates an expected call of KernelStartedTraining.
func (mr *MockKernelReplicaMockRecorder) KernelStartedTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelStartedTraining", reflect.TypeOf((*MockKernelReplica)(nil).KernelStartedTraining))
}

// KernelStoppedTraining mocks base method.
func (m *MockKernelReplica) KernelStoppedTraining() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelStoppedTraining")
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelStoppedTraining indicates an expected call of KernelStoppedTraining.
func (mr *MockKernelReplicaMockRecorder) KernelStoppedTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelStoppedTraining", reflect.TypeOf((*MockKernelReplica)(nil).KernelStoppedTraining))
}

// LastTrainingTimePrometheusUpdate mocks base method.
func (m *MockKernelReplica) LastTrainingTimePrometheusUpdate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastTrainingTimePrometheusUpdate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastTrainingTimePrometheusUpdate indicates an expected call of LastTrainingTimePrometheusUpdate.
func (mr *MockKernelReplicaMockRecorder) LastTrainingTimePrometheusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTrainingTimePrometheusUpdate", reflect.TypeOf((*MockKernelReplica)(nil).LastTrainingTimePrometheusUpdate))
}

// MessageAcknowledgementsEnabled mocks base method.
func (m *MockKernelReplica) MessageAcknowledgementsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAcknowledgementsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MessageAcknowledgementsEnabled indicates an expected call of MessageAcknowledgementsEnabled.
func (mr *MockKernelReplicaMockRecorder) MessageAcknowledgementsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAcknowledgementsEnabled", reflect.TypeOf((*MockKernelReplica)(nil).MessageAcknowledgementsEnabled))
}

// NodeName mocks base method.
func (m *MockKernelReplica) NodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeName indicates an expected call of NodeName.
func (mr *MockKernelReplicaMockRecorder) NodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeName", reflect.TypeOf((*MockKernelReplica)(nil).NodeName))
}

// NumPendingExecuteRequests mocks base method.
func (m *MockKernelReplica) NumPendingExecuteRequests() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumPendingExecuteRequests")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumPendingExecuteRequests indicates an expected call of NumPendingExecuteRequests.
func (mr *MockKernelReplicaMockRecorder) NumPendingExecuteRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumPendingExecuteRequests", reflect.TypeOf((*MockKernelReplica)(nil).NumPendingExecuteRequests))
}

// PersistentID mocks base method.
func (m *MockKernelReplica) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockKernelReplicaMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockKernelReplica)(nil).PersistentID))
}

// ReceivedExecuteReply mocks base method.
func (m *MockKernelReplica) ReceivedExecuteReply(msg *messaging.JupyterMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedExecuteReply", msg)
}

// ReceivedExecuteReply indicates an expected call of ReceivedExecuteReply.
func (mr *MockKernelReplicaMockRecorder) ReceivedExecuteReply(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedExecuteReply", reflect.TypeOf((*MockKernelReplica)(nil).ReceivedExecuteReply), msg)
}

// ReconnectSocket mocks base method.
func (m *MockKernelReplica) ReconnectSocket(typ messaging.MessageType) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconnectSocket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectSocket indicates an expected call of ReconnectSocket.
func (mr *MockKernelReplicaMockRecorder) ReconnectSocket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectSocket", reflect.TypeOf((*MockKernelReplica)(nil).ReconnectSocket), typ)
}

// RegisterAck mocks base method.
func (m *MockKernelReplica) RegisterAck(msg *messaging.JupyterMessage) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAck", msg)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAck indicates an expected call of RegisterAck.
func (mr *MockKernelReplicaMockRecorder) RegisterAck(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAck", reflect.TypeOf((*MockKernelReplica)(nil).RegisterAck), msg)
}

// RegisterAckForRequest mocks base method.
func (m *MockKernelReplica) RegisterAckForRequest(req messaging.Request) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAckForRequest", req)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAckForRequest indicates an expected call of RegisterAckForRequest.
func (mr *MockKernelReplicaMockRecorder) RegisterAckForRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAckForRequest", reflect.TypeOf((*MockKernelReplica)(nil).RegisterAckForRequest), req)
}

// ReplicaID mocks base method.
func (m *MockKernelReplica) ReplicaID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID.
func (mr *MockKernelReplicaMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockKernelReplica)(nil).ReplicaID))
}

// RequestWithHandler mocks base method.
func (m *MockKernelReplica) RequestWithHandler(ctx context.Context, arg1 string, typ messaging.MessageType, msg *messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, arg1, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockKernelReplicaMockRecorder) RequestWithHandler(ctx, arg1, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockKernelReplica)(nil).RequestWithHandler), ctx, arg1, typ, msg, handler, done)
}

// ResourceSpec mocks base method.
func (m *MockKernelReplica) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelReplicaMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernelReplica)(nil).ResourceSpec))
}

// SendRequest mocks base method.
func (m *MockKernelReplica) SendRequest(request messaging.Request, socket *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", request, socket)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockKernelReplicaMockRecorder) SendRequest(request, socket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockKernelReplica)(nil).SendRequest), request, socket)
}

// SentExecuteRequest mocks base method.
func (m *MockKernelReplica) SentExecuteRequest(msg *messaging.JupyterMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SentExecuteRequest", msg)
}

// SentExecuteRequest indicates an expected call of SentExecuteRequest.
func (mr *MockKernelReplicaMockRecorder) SentExecuteRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentExecuteRequest", reflect.TypeOf((*MockKernelReplica)(nil).SentExecuteRequest), msg)
}

// Sessions mocks base method.
func (m *MockKernelReplica) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockKernelReplicaMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockKernelReplica)(nil).Sessions))
}

// SetComponentId mocks base method.
func (m *MockKernelReplica) SetComponentId(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentId", id)
}

// SetComponentId indicates an expected call of SetComponentId.
func (mr *MockKernelReplicaMockRecorder) SetComponentId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentId", reflect.TypeOf((*MockKernelReplica)(nil).SetComponentId), id)
}

// SetContainer mocks base method.
func (m *MockKernelReplica) SetContainer(container scheduling.KernelContainer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContainer", container)
}

// SetContainer indicates an expected call of SetContainer.
func (mr *MockKernelReplicaMockRecorder) SetContainer(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainer", reflect.TypeOf((*MockKernelReplica)(nil).SetContainer), container)
}

// SetContext mocks base method.
func (m *MockKernelReplica) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockKernelReplicaMockRecorder) SetContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockKernelReplica)(nil).SetContext), arg0)
}

// SetHost mocks base method.
func (m *MockKernelReplica) SetHost(host scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHost", host)
}

// SetHost indicates an expected call of SetHost.
func (mr *MockKernelReplicaMockRecorder) SetHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHost", reflect.TypeOf((*MockKernelReplica)(nil).SetHost), host)
}

// SetIOPubSocket mocks base method.
func (m *MockKernelReplica) SetIOPubSocket(iopub *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIOPubSocket", iopub)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIOPubSocket indicates an expected call of SetIOPubSocket.
func (mr *MockKernelReplicaMockRecorder) SetIOPubSocket(iopub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOPubSocket", reflect.TypeOf((*MockKernelReplica)(nil).SetIOPubSocket), iopub)
}

// SetLastTrainingTimePrometheusUpdate mocks base method.
func (m *MockKernelReplica) SetLastTrainingTimePrometheusUpdate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastTrainingTimePrometheusUpdate")
}

// SetLastTrainingTimePrometheusUpdate indicates an expected call of SetLastTrainingTimePrometheusUpdate.
func (mr *MockKernelReplicaMockRecorder) SetLastTrainingTimePrometheusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastTrainingTimePrometheusUpdate", reflect.TypeOf((*MockKernelReplica)(nil).SetLastTrainingTimePrometheusUpdate))
}

// SetNodeName mocks base method.
func (m *MockKernelReplica) SetNodeName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNodeName", name)
}

// SetNodeName indicates an expected call of SetNodeName.
func (mr *MockKernelReplicaMockRecorder) SetNodeName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeName", reflect.TypeOf((*MockKernelReplica)(nil).SetNodeName), name)
}

// SetPersistentID mocks base method.
func (m *MockKernelReplica) SetPersistentID(persistentId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPersistentID", persistentId)
}

// SetPersistentID indicates an expected call of SetPersistentID.
func (mr *MockKernelReplicaMockRecorder) SetPersistentID(persistentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersistentID", reflect.TypeOf((*MockKernelReplica)(nil).SetPersistentID), persistentId)
}

// SetPodOrContainerName mocks base method.
func (m *MockKernelReplica) SetPodOrContainerName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPodOrContainerName", name)
}

// SetPodOrContainerName indicates an expected call of SetPodOrContainerName.
func (mr *MockKernelReplicaMockRecorder) SetPodOrContainerName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPodOrContainerName", reflect.TypeOf((*MockKernelReplica)(nil).SetPodOrContainerName), name)
}

// SetReady mocks base method.
func (m *MockKernelReplica) SetReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReady")
}

// SetReady indicates an expected call of SetReady.
func (mr *MockKernelReplicaMockRecorder) SetReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockKernelReplica)(nil).SetReady))
}

// SetReplicaID mocks base method.
func (m *MockKernelReplica) SetReplicaID(replicaId int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicaID", replicaId)
}

// SetReplicaID indicates an expected call of SetReplicaID.
func (mr *MockKernelReplicaMockRecorder) SetReplicaID(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicaID", reflect.TypeOf((*MockKernelReplica)(nil).SetReplicaID), replicaId)
}

// SetResourceSpec mocks base method.
func (m *MockKernelReplica) SetResourceSpec(spec *proto.ResourceSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceSpec", spec)
}

// SetResourceSpec indicates an expected call of SetResourceSpec.
func (mr *MockKernelReplicaMockRecorder) SetResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceSpec", reflect.TypeOf((*MockKernelReplica)(nil).SetResourceSpec), spec)
}

// SetWorkloadId mocks base method.
func (m *MockKernelReplica) SetWorkloadId(workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWorkloadId", workloadId)
}

// SetWorkloadId indicates an expected call of SetWorkloadId.
func (mr *MockKernelReplicaMockRecorder) SetWorkloadId(workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkloadId", reflect.TypeOf((*MockKernelReplica)(nil).SetWorkloadId), workloadId)
}

// ShellListenPort mocks base method.
func (m *MockKernelReplica) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockKernelReplicaMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockKernelReplica)(nil).ShellListenPort))
}

// ShouldAckMessages mocks base method.
func (m *MockKernelReplica) ShouldAckMessages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldAckMessages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldAckMessages indicates an expected call of ShouldAckMessages.
func (mr *MockKernelReplicaMockRecorder) ShouldAckMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldAckMessages", reflect.TypeOf((*MockKernelReplica)(nil).ShouldAckMessages))
}

// Socket mocks base method.
func (m *MockKernelReplica) Socket(typ messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelReplicaMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernelReplica)(nil).Socket), typ)
}

// SourceKernelID mocks base method.
func (m *MockKernelReplica) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockKernelReplicaMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockKernelReplica)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockKernelReplica) Status() jupyter.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(jupyter.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockKernelReplicaMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKernelReplica)(nil).Status))
}

// String mocks base method.
func (m *MockKernelReplica) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelReplicaMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelReplica)(nil).String))
}

// SupposedToYieldNextExecutionRequest mocks base method.
func (m *MockKernelReplica) SupposedToYieldNextExecutionRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupposedToYieldNextExecutionRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupposedToYieldNextExecutionRequest indicates an expected call of SupposedToYieldNextExecutionRequest.
func (mr *MockKernelReplicaMockRecorder) SupposedToYieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupposedToYieldNextExecutionRequest", reflect.TypeOf((*MockKernelReplica)(nil).SupposedToYieldNextExecutionRequest))
}

// TrainingStartedAt mocks base method.
func (m *MockKernelReplica) TrainingStartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingStartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TrainingStartedAt indicates an expected call of TrainingStartedAt.
func (mr *MockKernelReplicaMockRecorder) TrainingStartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingStartedAt", reflect.TypeOf((*MockKernelReplica)(nil).TrainingStartedAt))
}

// UnbindSession mocks base method.
func (m *MockKernelReplica) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockKernelReplicaMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockKernelReplica)(nil).UnbindSession), sess)
}

// UpdateResourceSpec mocks base method.
func (m *MockKernelReplica) UpdateResourceSpec(arg0 types.Spec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceSpec", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceSpec indicates an expected call of UpdateResourceSpec.
func (mr *MockKernelReplicaMockRecorder) UpdateResourceSpec(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSpec", reflect.TypeOf((*MockKernelReplica)(nil).UpdateResourceSpec), arg0)
}

// Validate mocks base method.
func (m *MockKernelReplica) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockKernelReplicaMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockKernelReplica)(nil).Validate))
}

// WaitForPendingExecuteRequests mocks base method.
func (m *MockKernelReplica) WaitForPendingExecuteRequests() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForPendingExecuteRequests")
}

// WaitForPendingExecuteRequests indicates an expected call of WaitForPendingExecuteRequests.
func (mr *MockKernelReplicaMockRecorder) WaitForPendingExecuteRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForPendingExecuteRequests", reflect.TypeOf((*MockKernelReplica)(nil).WaitForPendingExecuteRequests))
}

// WaitForTrainingToStop mocks base method.
func (m *MockKernelReplica) WaitForTrainingToStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForTrainingToStop")
}

// WaitForTrainingToStop indicates an expected call of WaitForTrainingToStop.
func (mr *MockKernelReplicaMockRecorder) WaitForTrainingToStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTrainingToStop", reflect.TypeOf((*MockKernelReplica)(nil).WaitForTrainingToStop))
}

// WorkloadId mocks base method.
func (m *MockKernelReplica) WorkloadId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadId")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadId indicates an expected call of WorkloadId.
func (mr *MockKernelReplicaMockRecorder) WorkloadId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadId", reflect.TypeOf((*MockKernelReplica)(nil).WorkloadId))
}

// WorkloadIdSet mocks base method.
func (m *MockKernelReplica) WorkloadIdSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadIdSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WorkloadIdSet indicates an expected call of WorkloadIdSet.
func (mr *MockKernelReplicaMockRecorder) WorkloadIdSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadIdSet", reflect.TypeOf((*MockKernelReplica)(nil).WorkloadIdSet))
}

// YieldNextExecutionRequest mocks base method.
func (m *MockKernelReplica) YieldNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldNextExecutionRequest")
}

// YieldNextExecutionRequest indicates an expected call of YieldNextExecutionRequest.
func (mr *MockKernelReplicaMockRecorder) YieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecutionRequest", reflect.TypeOf((*MockKernelReplica)(nil).YieldNextExecutionRequest))
}

// YieldedNextExecutionRequest mocks base method.
func (m *MockKernelReplica) YieldedNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldedNextExecutionRequest")
}

// YieldedNextExecutionRequest indicates an expected call of YieldedNextExecutionRequest.
func (mr *MockKernelReplicaMockRecorder) YieldedNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldedNextExecutionRequest", reflect.TypeOf((*MockKernelReplica)(nil).YieldedNextExecutionRequest))
}
