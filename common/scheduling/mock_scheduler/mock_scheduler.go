// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/scheduling/scheduler (interfaces: NotificationBroker,KernelProvider,HostMapper,SchedulingPolicy)
//
// Generated by this command:
//
//	mockgen -destination /home/scusemua/go/pkg/distributed-notebook/common/scheduling/mock_scheduler/mock_scheduler.go /home/scusemua/go/pkg/distributed-notebook/common/scheduling/scheduler NotificationBroker,KernelProvider,HostMapper,SchedulingPolicy
//

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	reflect "reflect"

	scheduling "github.com/scusemua/distributed-notebook/common/scheduling"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationBroker is a mock of NotificationBroker interface.
type MockNotificationBroker struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationBrokerMockRecorder
	isgomock struct{}
}

// MockNotificationBrokerMockRecorder is the mock recorder for MockNotificationBroker.
type MockNotificationBrokerMockRecorder struct {
	mock *MockNotificationBroker
}

// NewMockNotificationBroker creates a new mock instance.
func NewMockNotificationBroker(ctrl *gomock.Controller) *MockNotificationBroker {
	mock := &MockNotificationBroker{ctrl: ctrl}
	mock.recorder = &MockNotificationBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationBroker) EXPECT() *MockNotificationBrokerMockRecorder {
	return m.recorder
}

// SendErrorNotification mocks base method.
func (m *MockNotificationBroker) SendErrorNotification(errorName, errorMessage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendErrorNotification", errorName, errorMessage)
}

// SendErrorNotification indicates an expected call of SendErrorNotification.
func (mr *MockNotificationBrokerMockRecorder) SendErrorNotification(errorName, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorNotification", reflect.TypeOf((*MockNotificationBroker)(nil).SendErrorNotification), errorName, errorMessage)
}

// SendInfoNotification mocks base method.
func (m *MockNotificationBroker) SendInfoNotification(title, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInfoNotification", title, message)
}

// SendInfoNotification indicates an expected call of SendInfoNotification.
func (mr *MockNotificationBrokerMockRecorder) SendInfoNotification(title, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInfoNotification", reflect.TypeOf((*MockNotificationBroker)(nil).SendInfoNotification), title, message)
}

// MockKernelProvider is a mock of KernelProvider interface.
type MockKernelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKernelProviderMockRecorder
	isgomock struct{}
}

// MockKernelProviderMockRecorder is the mock recorder for MockKernelProvider.
type MockKernelProviderMockRecorder struct {
	mock *MockKernelProvider
}

// NewMockKernelProvider creates a new mock instance.
func NewMockKernelProvider(ctrl *gomock.Controller) *MockKernelProvider {
	mock := &MockKernelProvider{ctrl: ctrl}
	mock.recorder = &MockKernelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelProvider) EXPECT() *MockKernelProviderMockRecorder {
	return m.recorder
}

// GetKernel mocks base method.
func (m *MockKernelProvider) GetKernel(kernelId string) (scheduling.Kernel, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKernel", kernelId)
	ret0, _ := ret[0].(scheduling.Kernel)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetKernel indicates an expected call of GetKernel.
func (mr *MockKernelProviderMockRecorder) GetKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKernel", reflect.TypeOf((*MockKernelProvider)(nil).GetKernel), kernelId)
}

// MockHostMapper is a mock of HostMapper interface.
type MockHostMapper struct {
	ctrl     *gomock.Controller
	recorder *MockHostMapperMockRecorder
	isgomock struct{}
}

// MockHostMapperMockRecorder is the mock recorder for MockHostMapper.
type MockHostMapperMockRecorder struct {
	mock *MockHostMapper
}

// NewMockHostMapper creates a new mock instance.
func NewMockHostMapper(ctrl *gomock.Controller) *MockHostMapper {
	mock := &MockHostMapper{ctrl: ctrl}
	mock.recorder = &MockHostMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostMapper) EXPECT() *MockHostMapperMockRecorder {
	return m.recorder
}

// GetHostsOfKernel mocks base method.
func (m *MockHostMapper) GetHostsOfKernel(kernelId string) ([]scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsOfKernel", kernelId)
	ret0, _ := ret[0].([]scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsOfKernel indicates an expected call of GetHostsOfKernel.
func (mr *MockHostMapperMockRecorder) GetHostsOfKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsOfKernel", reflect.TypeOf((*MockHostMapper)(nil).GetHostsOfKernel), kernelId)
}

// MockSchedulingPolicy is a mock of SchedulingPolicy interface.
type MockSchedulingPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulingPolicyMockRecorder
	isgomock struct{}
}

// MockSchedulingPolicyMockRecorder is the mock recorder for MockSchedulingPolicy.
type MockSchedulingPolicyMockRecorder struct {
	mock *MockSchedulingPolicy
}

// NewMockSchedulingPolicy creates a new mock instance.
func NewMockSchedulingPolicy(ctrl *gomock.Controller) *MockSchedulingPolicy {
	mock := &MockSchedulingPolicy{ctrl: ctrl}
	mock.recorder = &MockSchedulingPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulingPolicy) EXPECT() *MockSchedulingPolicyMockRecorder {
	return m.recorder
}

// ContainerLifetime mocks base method.
func (m *MockSchedulingPolicy) ContainerLifetime() scheduling.ContainerLifetime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLifetime")
	ret0, _ := ret[0].(scheduling.ContainerLifetime)
	return ret0
}

// ContainerLifetime indicates an expected call of ContainerLifetime.
func (mr *MockSchedulingPolicyMockRecorder) ContainerLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLifetime", reflect.TypeOf((*MockSchedulingPolicy)(nil).ContainerLifetime))
}

// FindReadyReplica mocks base method.
func (m *MockSchedulingPolicy) FindReadyReplica(kernel scheduling.Kernel, executionId string) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReadyReplica", kernel, executionId)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReadyReplica indicates an expected call of FindReadyReplica.
func (mr *MockSchedulingPolicyMockRecorder) FindReadyReplica(kernel, executionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReadyReplica", reflect.TypeOf((*MockSchedulingPolicy)(nil).FindReadyReplica), kernel, executionId)
}

// GetGpusPerHost mocks base method.
func (m *MockSchedulingPolicy) GetGpusPerHost() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpusPerHost")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetGpusPerHost indicates an expected call of GetGpusPerHost.
func (mr *MockSchedulingPolicyMockRecorder) GetGpusPerHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpusPerHost", reflect.TypeOf((*MockSchedulingPolicy)(nil).GetGpusPerHost))
}

// GetNewPlacer mocks base method.
func (m *MockSchedulingPolicy) GetNewPlacer(metricsProvider scheduling.MetricsProvider) (scheduling.Placer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewPlacer", metricsProvider)
	ret0, _ := ret[0].(scheduling.Placer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewPlacer indicates an expected call of GetNewPlacer.
func (mr *MockSchedulingPolicyMockRecorder) GetNewPlacer(metricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPlacer", reflect.TypeOf((*MockSchedulingPolicy)(nil).GetNewPlacer), metricsProvider)
}

// IdleSessionReclamationPolicy mocks base method.
func (m *MockSchedulingPolicy) IdleSessionReclamationPolicy() scheduling.IdleSessionReclamationPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleSessionReclamationPolicy")
	ret0, _ := ret[0].(scheduling.IdleSessionReclamationPolicy)
	return ret0
}

// IdleSessionReclamationPolicy indicates an expected call of IdleSessionReclamationPolicy.
func (mr *MockSchedulingPolicyMockRecorder) IdleSessionReclamationPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleSessionReclamationPolicy", reflect.TypeOf((*MockSchedulingPolicy)(nil).IdleSessionReclamationPolicy))
}

// Name mocks base method.
func (m *MockSchedulingPolicy) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSchedulingPolicyMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSchedulingPolicy)(nil).Name))
}

// NumReplicas mocks base method.
func (m *MockSchedulingPolicy) NumReplicas() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReplicas indicates an expected call of NumReplicas.
func (mr *MockSchedulingPolicyMockRecorder) NumReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicas", reflect.TypeOf((*MockSchedulingPolicy)(nil).NumReplicas))
}

// PolicyKey mocks base method.
func (m *MockSchedulingPolicy) PolicyKey() scheduling.PolicyKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyKey")
	ret0, _ := ret[0].(scheduling.PolicyKey)
	return ret0
}

// PolicyKey indicates an expected call of PolicyKey.
func (mr *MockSchedulingPolicyMockRecorder) PolicyKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyKey", reflect.TypeOf((*MockSchedulingPolicy)(nil).PolicyKey))
}

// PostExecutionStatePolicy mocks base method.
func (m *MockSchedulingPolicy) PostExecutionStatePolicy() scheduling.PostExecutionStatePolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostExecutionStatePolicy")
	ret0, _ := ret[0].(scheduling.PostExecutionStatePolicy)
	return ret0
}

// PostExecutionStatePolicy indicates an expected call of PostExecutionStatePolicy.
func (mr *MockSchedulingPolicyMockRecorder) PostExecutionStatePolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostExecutionStatePolicy", reflect.TypeOf((*MockSchedulingPolicy)(nil).PostExecutionStatePolicy))
}

// PreExecutionStatePolicy mocks base method.
func (m *MockSchedulingPolicy) PreExecutionStatePolicy() scheduling.PreExecutionStatePolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreExecutionStatePolicy")
	ret0, _ := ret[0].(scheduling.PreExecutionStatePolicy)
	return ret0
}

// PreExecutionStatePolicy indicates an expected call of PreExecutionStatePolicy.
func (mr *MockSchedulingPolicyMockRecorder) PreExecutionStatePolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreExecutionStatePolicy", reflect.TypeOf((*MockSchedulingPolicy)(nil).PreExecutionStatePolicy))
}

// ResourceBindingMode mocks base method.
func (m *MockSchedulingPolicy) ResourceBindingMode() scheduling.ResourceBindingMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceBindingMode")
	ret0, _ := ret[0].(scheduling.ResourceBindingMode)
	return ret0
}

// ResourceBindingMode indicates an expected call of ResourceBindingMode.
func (mr *MockSchedulingPolicyMockRecorder) ResourceBindingMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceBindingMode", reflect.TypeOf((*MockSchedulingPolicy)(nil).ResourceBindingMode))
}

// ResourceScalingPolicy mocks base method.
func (m *MockSchedulingPolicy) ResourceScalingPolicy() scheduling.ResourceScalingPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceScalingPolicy")
	ret0, _ := ret[0].(scheduling.ResourceScalingPolicy)
	return ret0
}

// ResourceScalingPolicy indicates an expected call of ResourceScalingPolicy.
func (mr *MockSchedulingPolicyMockRecorder) ResourceScalingPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceScalingPolicy", reflect.TypeOf((*MockSchedulingPolicy)(nil).ResourceScalingPolicy))
}

// ScalingConfiguration mocks base method.
func (m *MockSchedulingPolicy) ScalingConfiguration() *scheduling.ScalingConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScalingConfiguration")
	ret0, _ := ret[0].(*scheduling.ScalingConfiguration)
	return ret0
}

// ScalingConfiguration indicates an expected call of ScalingConfiguration.
func (mr *MockSchedulingPolicyMockRecorder) ScalingConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScalingConfiguration", reflect.TypeOf((*MockSchedulingPolicy)(nil).ScalingConfiguration))
}

// SelectReplicaForMigration mocks base method.
func (m *MockSchedulingPolicy) SelectReplicaForMigration(kernel scheduling.Kernel) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectReplicaForMigration", kernel)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectReplicaForMigration indicates an expected call of SelectReplicaForMigration.
func (mr *MockSchedulingPolicyMockRecorder) SelectReplicaForMigration(kernel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectReplicaForMigration", reflect.TypeOf((*MockSchedulingPolicy)(nil).SelectReplicaForMigration), kernel)
}

// SmrEnabled mocks base method.
func (m *MockSchedulingPolicy) SmrEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmrEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SmrEnabled indicates an expected call of SmrEnabled.
func (mr *MockSchedulingPolicyMockRecorder) SmrEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmrEnabled", reflect.TypeOf((*MockSchedulingPolicy)(nil).SmrEnabled))
}

// SupportsMigration mocks base method.
func (m *MockSchedulingPolicy) SupportsMigration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsMigration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsMigration indicates an expected call of SupportsMigration.
func (mr *MockSchedulingPolicyMockRecorder) SupportsMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsMigration", reflect.TypeOf((*MockSchedulingPolicy)(nil).SupportsMigration))
}
