// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/scheduling/scheduler (interfaces: NotificationBroker,KernelProvider,HostMapper)
//
// Generated by this command:
//
//	mockgen -destination /home/scusemua/go/pkg/distributed-notebook/common/scheduling/mock_scheduler/mock_scheduler.go /home/scusemua/go/pkg/distributed-notebook/common/scheduling/scheduler NotificationBroker,KernelProvider,HostMapper
//

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	reflect "reflect"

	scheduling "github.com/scusemua/distributed-notebook/common/scheduling"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationBroker is a mock of NotificationBroker interface.
type MockNotificationBroker struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationBrokerMockRecorder
	isgomock struct{}
}

// MockNotificationBrokerMockRecorder is the mock recorder for MockNotificationBroker.
type MockNotificationBrokerMockRecorder struct {
	mock *MockNotificationBroker
}

// NewMockNotificationBroker creates a new mock instance.
func NewMockNotificationBroker(ctrl *gomock.Controller) *MockNotificationBroker {
	mock := &MockNotificationBroker{ctrl: ctrl}
	mock.recorder = &MockNotificationBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationBroker) EXPECT() *MockNotificationBrokerMockRecorder {
	return m.recorder
}

// SendErrorNotification mocks base method.
func (m *MockNotificationBroker) SendErrorNotification(errorName, errorMessage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendErrorNotification", errorName, errorMessage)
}

// SendErrorNotification indicates an expected call of SendErrorNotification.
func (mr *MockNotificationBrokerMockRecorder) SendErrorNotification(errorName, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendErrorNotification", reflect.TypeOf((*MockNotificationBroker)(nil).SendErrorNotification), errorName, errorMessage)
}

// SendInfoNotification mocks base method.
func (m *MockNotificationBroker) SendInfoNotification(title, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendInfoNotification", title, message)
}

// SendInfoNotification indicates an expected call of SendInfoNotification.
func (mr *MockNotificationBrokerMockRecorder) SendInfoNotification(title, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInfoNotification", reflect.TypeOf((*MockNotificationBroker)(nil).SendInfoNotification), title, message)
}

// MockKernelProvider is a mock of KernelProvider interface.
type MockKernelProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKernelProviderMockRecorder
	isgomock struct{}
}

// MockKernelProviderMockRecorder is the mock recorder for MockKernelProvider.
type MockKernelProviderMockRecorder struct {
	mock *MockKernelProvider
}

// NewMockKernelProvider creates a new mock instance.
func NewMockKernelProvider(ctrl *gomock.Controller) *MockKernelProvider {
	mock := &MockKernelProvider{ctrl: ctrl}
	mock.recorder = &MockKernelProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelProvider) EXPECT() *MockKernelProviderMockRecorder {
	return m.recorder
}

// GetKernel mocks base method.
func (m *MockKernelProvider) GetKernel(kernelId string) (scheduling.Kernel, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKernel", kernelId)
	ret0, _ := ret[0].(scheduling.Kernel)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetKernel indicates an expected call of GetKernel.
func (mr *MockKernelProviderMockRecorder) GetKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKernel", reflect.TypeOf((*MockKernelProvider)(nil).GetKernel), kernelId)
}

// MockHostMapper is a mock of HostMapper interface.
type MockHostMapper struct {
	ctrl     *gomock.Controller
	recorder *MockHostMapperMockRecorder
	isgomock struct{}
}

// MockHostMapperMockRecorder is the mock recorder for MockHostMapper.
type MockHostMapperMockRecorder struct {
	mock *MockHostMapper
}

// NewMockHostMapper creates a new mock instance.
func NewMockHostMapper(ctrl *gomock.Controller) *MockHostMapper {
	mock := &MockHostMapper{ctrl: ctrl}
	mock.recorder = &MockHostMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostMapper) EXPECT() *MockHostMapperMockRecorder {
	return m.recorder
}

// GetHostsOfKernel mocks base method.
func (m *MockHostMapper) GetHostsOfKernel(kernelId string) ([]scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostsOfKernel", kernelId)
	ret0, _ := ret[0].([]scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostsOfKernel indicates an expected call of GetHostsOfKernel.
func (mr *MockHostMapperMockRecorder) GetHostsOfKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostsOfKernel", reflect.TypeOf((*MockHostMapper)(nil).GetHostsOfKernel), kernelId)
}
