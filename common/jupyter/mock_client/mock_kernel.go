// Code generated by MockGen. DO NOT EDIT.
// Source: kernel.go
//
// Generated by this command:
//
//	mockgen -source kernel.go -package mock_client -destination /home/bcarver2/go/pkg/distributed-notebook/common/jupyter/mock_client/mock_kernel.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	zmq4 "github.com/go-zeromq/zmq4"
	core "github.com/zhangjyr/distributed-notebook/common/core"
	gateway "github.com/zhangjyr/distributed-notebook/common/gateway"
	client "github.com/zhangjyr/distributed-notebook/common/jupyter/client"
	server "github.com/zhangjyr/distributed-notebook/common/jupyter/server"
	types "github.com/zhangjyr/distributed-notebook/common/jupyter/types"
	gomock "go.uber.org/mock/gomock"
)

// MockKernelReplicaClient is a mock of KernelReplicaClient interface.
type MockKernelReplicaClient struct {
	ctrl     *gomock.Controller
	recorder *MockKernelReplicaClientMockRecorder
}

// MockKernelReplicaClientMockRecorder is the mock recorder for MockKernelReplicaClient.
type MockKernelReplicaClientMockRecorder struct {
	mock *MockKernelReplicaClient
}

// NewMockKernelReplicaClient creates a new mock instance.
func NewMockKernelReplicaClient(ctrl *gomock.Controller) *MockKernelReplicaClient {
	mock := &MockKernelReplicaClient{ctrl: ctrl}
	mock.recorder = &MockKernelReplicaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelReplicaClient) EXPECT() *MockKernelReplicaClientMockRecorder {
	return m.recorder
}

// AddDestFrame mocks base method.
func (m *MockKernelReplicaClient) AddDestFrame(frames [][]byte, destID string, jOffset int) ([][]byte, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDestFrame", frames, destID, jOffset)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// AddDestFrame indicates an expected call of AddDestFrame.
func (mr *MockKernelReplicaClientMockRecorder) AddDestFrame(frames, destID, jOffset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDestFrame", reflect.TypeOf((*MockKernelReplicaClient)(nil).AddDestFrame), frames, destID, jOffset)
}

// AddIOHandler mocks base method.
func (m *MockKernelReplicaClient) AddIOHandler(topic string, handler client.KernelMessageBrokerHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIOHandler", topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIOHandler indicates an expected call of AddIOHandler.
func (mr *MockKernelReplicaClientMockRecorder) AddIOHandler(topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIOHandler", reflect.TypeOf((*MockKernelReplicaClient)(nil).AddIOHandler), topic, handler)
}

// AddSourceKernelFrame mocks base method.
func (m *MockKernelReplicaClient) AddSourceKernelFrame(frames [][]byte, destID string, jOffset int) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSourceKernelFrame", frames, destID, jOffset)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// AddSourceKernelFrame indicates an expected call of AddSourceKernelFrame.
func (mr *MockKernelReplicaClientMockRecorder) AddSourceKernelFrame(frames, destID, jOffset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSourceKernelFrame", reflect.TypeOf((*MockKernelReplicaClient)(nil).AddSourceKernelFrame), frames, destID, jOffset)
}

// Address mocks base method.
func (m *MockKernelReplicaClient) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockKernelReplicaClientMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockKernelReplicaClient)(nil).Address))
}

// BindSession mocks base method.
func (m *MockKernelReplicaClient) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockKernelReplicaClientMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockKernelReplicaClient)(nil).BindSession), sess)
}

// BusyStatus mocks base method.
func (m *MockKernelReplicaClient) BusyStatus() (string, *zmq4.Msg) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*zmq4.Msg)
	return ret0, ret1
}

// BusyStatus indicates an expected call of BusyStatus.
func (mr *MockKernelReplicaClientMockRecorder) BusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyStatus", reflect.TypeOf((*MockKernelReplicaClient)(nil).BusyStatus))
}

// Close mocks base method.
func (m *MockKernelReplicaClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKernelReplicaClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKernelReplicaClient)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockKernelReplicaClient) ConnectionInfo() *types.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*types.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockKernelReplicaClientMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockKernelReplicaClient)(nil).ConnectionInfo))
}

// Context mocks base method.
func (m *MockKernelReplicaClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockKernelReplicaClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKernelReplicaClient)(nil).Context))
}

// ExtractDestFrame mocks base method.
func (m *MockKernelReplicaClient) ExtractDestFrame(frames [][]byte) (string, string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractDestFrame", frames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// ExtractDestFrame indicates an expected call of ExtractDestFrame.
func (mr *MockKernelReplicaClientMockRecorder) ExtractDestFrame(frames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractDestFrame", reflect.TypeOf((*MockKernelReplicaClient)(nil).ExtractDestFrame), frames)
}

// ExtractSourceKernelFrame mocks base method.
func (m *MockKernelReplicaClient) ExtractSourceKernelFrame(frames [][]byte) (string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractSourceKernelFrame", frames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ExtractSourceKernelFrame indicates an expected call of ExtractSourceKernelFrame.
func (mr *MockKernelReplicaClientMockRecorder) ExtractSourceKernelFrame(frames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractSourceKernelFrame", reflect.TypeOf((*MockKernelReplicaClient)(nil).ExtractSourceKernelFrame), frames)
}

// HostId mocks base method.
func (m *MockKernelReplicaClient) HostId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostId")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostId indicates an expected call of HostId.
func (mr *MockKernelReplicaClientMockRecorder) HostId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostId", reflect.TypeOf((*MockKernelReplicaClient)(nil).HostId))
}

// ID mocks base method.
func (m *MockKernelReplicaClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelReplicaClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernelReplicaClient)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockKernelReplicaClient) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockKernelReplicaClientMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockKernelReplicaClient)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockKernelReplicaClient) InitializeIOForwarder() (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockKernelReplicaClientMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockKernelReplicaClient)(nil).InitializeIOForwarder))
}

// InitializeIOSub mocks base method.
func (m *MockKernelReplicaClient) InitializeIOSub(handler types.MessageHandler, subscriptionTopic string) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOSub", handler, subscriptionTopic)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOSub indicates an expected call of InitializeIOSub.
func (mr *MockKernelReplicaClientMockRecorder) InitializeIOSub(handler, subscriptionTopic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOSub", reflect.TypeOf((*MockKernelReplicaClient)(nil).InitializeIOSub), handler, subscriptionTopic)
}

// InitializeShellForwarder mocks base method.
func (m *MockKernelReplicaClient) InitializeShellForwarder(handler core.KernelMessageHandler) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockKernelReplicaClientMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockKernelReplicaClient)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockKernelReplicaClient) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockKernelReplicaClientMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockKernelReplicaClient)(nil).IsReady))
}

// KernelSpec mocks base method.
func (m *MockKernelReplicaClient) KernelSpec() *gateway.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*gateway.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelReplicaClientMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernelReplicaClient)(nil).KernelSpec))
}

// NodeName mocks base method.
func (m *MockKernelReplicaClient) NodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeName indicates an expected call of NodeName.
func (mr *MockKernelReplicaClientMockRecorder) NodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeName", reflect.TypeOf((*MockKernelReplicaClient)(nil).NodeName))
}

// PersistentID mocks base method.
func (m *MockKernelReplicaClient) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockKernelReplicaClientMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockKernelReplicaClient)(nil).PersistentID))
}

// PodName mocks base method.
func (m *MockKernelReplicaClient) PodName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PodName indicates an expected call of PodName.
func (mr *MockKernelReplicaClientMockRecorder) PodName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodName", reflect.TypeOf((*MockKernelReplicaClient)(nil).PodName))
}

// RemoveDestFrame mocks base method.
func (m *MockKernelReplicaClient) RemoveDestFrame(frames [][]byte, jOffset int) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDestFrame", frames, jOffset)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// RemoveDestFrame indicates an expected call of RemoveDestFrame.
func (mr *MockKernelReplicaClientMockRecorder) RemoveDestFrame(frames, jOffset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDestFrame", reflect.TypeOf((*MockKernelReplicaClient)(nil).RemoveDestFrame), frames, jOffset)
}

// RemoveSourceKernelFrame mocks base method.
func (m *MockKernelReplicaClient) RemoveSourceKernelFrame(frames [][]byte, jOffset int) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSourceKernelFrame", frames, jOffset)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// RemoveSourceKernelFrame indicates an expected call of RemoveSourceKernelFrame.
func (mr *MockKernelReplicaClientMockRecorder) RemoveSourceKernelFrame(frames, jOffset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSourceKernelFrame", reflect.TypeOf((*MockKernelReplicaClient)(nil).RemoveSourceKernelFrame), frames, jOffset)
}

// ReplicaID mocks base method.
func (m *MockKernelReplicaClient) ReplicaID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID.
func (mr *MockKernelReplicaClientMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockKernelReplicaClient)(nil).ReplicaID))
}

// RequestDestID mocks base method.
func (m *MockKernelReplicaClient) RequestDestID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestDestID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestDestID indicates an expected call of RequestDestID.
func (mr *MockKernelReplicaClientMockRecorder) RequestDestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestDestID", reflect.TypeOf((*MockKernelReplicaClient)(nil).RequestDestID))
}

// RequestWithHandler mocks base method.
func (m *MockKernelReplicaClient) RequestWithHandler(ctx context.Context, prompt string, typ types.MessageType, msg *zmq4.Msg, handler core.KernelMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, prompt, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockKernelReplicaClientMockRecorder) RequestWithHandler(ctx, prompt, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockKernelReplicaClient)(nil).RequestWithHandler), ctx, prompt, typ, msg, handler, done)
}

// ResourceSpec mocks base method.
func (m *MockKernelReplicaClient) ResourceSpec() *gateway.ResourceSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*gateway.ResourceSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelReplicaClientMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernelReplicaClient)(nil).ResourceSpec))
}

// SendMessage mocks base method.
func (m *MockKernelReplicaClient) SendMessage(requiresACK bool, socket *types.Socket, reqId string, req *zmq4.Msg, dest server.RequestDest, sourceKernel server.SourceKernel, offset int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", requiresACK, socket, reqId, req, dest, sourceKernel, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockKernelReplicaClientMockRecorder) SendMessage(requiresACK, socket, reqId, req, dest, sourceKernel, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockKernelReplicaClient)(nil).SendMessage), requiresACK, socket, reqId, req, dest, sourceKernel, offset)
}

// Sessions mocks base method.
func (m *MockKernelReplicaClient) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockKernelReplicaClientMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockKernelReplicaClient)(nil).Sessions))
}

// SetContext mocks base method.
func (m *MockKernelReplicaClient) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockKernelReplicaClientMockRecorder) SetContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockKernelReplicaClient)(nil).SetContext), arg0)
}

// SetPersistentID mocks base method.
func (m *MockKernelReplicaClient) SetPersistentID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPersistentID", arg0)
}

// SetPersistentID indicates an expected call of SetPersistentID.
func (mr *MockKernelReplicaClientMockRecorder) SetPersistentID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersistentID", reflect.TypeOf((*MockKernelReplicaClient)(nil).SetPersistentID), arg0)
}

// SetReady mocks base method.
func (m *MockKernelReplicaClient) SetReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReady")
}

// SetReady indicates an expected call of SetReady.
func (mr *MockKernelReplicaClientMockRecorder) SetReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockKernelReplicaClient)(nil).SetReady))
}

// SetReplicaID mocks base method.
func (m *MockKernelReplicaClient) SetReplicaID(replicaId int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicaID", replicaId)
}

// SetReplicaID indicates an expected call of SetReplicaID.
func (mr *MockKernelReplicaClientMockRecorder) SetReplicaID(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicaID", reflect.TypeOf((*MockKernelReplicaClient)(nil).SetReplicaID), replicaId)
}

// SetResourceSpec mocks base method.
func (m *MockKernelReplicaClient) SetResourceSpec(spec *gateway.ResourceSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceSpec", spec)
}

// SetResourceSpec indicates an expected call of SetResourceSpec.
func (mr *MockKernelReplicaClientMockRecorder) SetResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceSpec", reflect.TypeOf((*MockKernelReplicaClient)(nil).SetResourceSpec), spec)
}

// ShellListenPort mocks base method.
func (m *MockKernelReplicaClient) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockKernelReplicaClientMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockKernelReplicaClient)(nil).ShellListenPort))
}

// SkipIdentities mocks base method.
func (m *MockKernelReplicaClient) SkipIdentities(frames [][]byte) (types.JupyterFrames, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipIdentities", frames)
	ret0, _ := ret[0].(types.JupyterFrames)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// SkipIdentities indicates an expected call of SkipIdentities.
func (mr *MockKernelReplicaClientMockRecorder) SkipIdentities(frames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipIdentities", reflect.TypeOf((*MockKernelReplicaClient)(nil).SkipIdentities), frames)
}

// Socket mocks base method.
func (m *MockKernelReplicaClient) Socket(arg0 types.MessageType) *types.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", arg0)
	ret0, _ := ret[0].(*types.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelReplicaClientMockRecorder) Socket(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernelReplicaClient)(nil).Socket), arg0)
}

// SourceKernelID mocks base method.
func (m *MockKernelReplicaClient) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockKernelReplicaClientMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockKernelReplicaClient)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockKernelReplicaClient) Status() types.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(types.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockKernelReplicaClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKernelReplicaClient)(nil).Status))
}

// String mocks base method.
func (m *MockKernelReplicaClient) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelReplicaClientMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelReplicaClient)(nil).String))
}

// SupposedToYieldNextExecutionRequest mocks base method.
func (m *MockKernelReplicaClient) SupposedToYieldNextExecutionRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupposedToYieldNextExecutionRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupposedToYieldNextExecutionRequest indicates an expected call of SupposedToYieldNextExecutionRequest.
func (mr *MockKernelReplicaClientMockRecorder) SupposedToYieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupposedToYieldNextExecutionRequest", reflect.TypeOf((*MockKernelReplicaClient)(nil).SupposedToYieldNextExecutionRequest))
}

// Validate mocks base method.
func (m *MockKernelReplicaClient) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockKernelReplicaClientMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockKernelReplicaClient)(nil).Validate))
}

// YieldNextExecutionRequest mocks base method.
func (m *MockKernelReplicaClient) YieldNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldNextExecutionRequest")
}

// YieldNextExecutionRequest indicates an expected call of YieldNextExecutionRequest.
func (mr *MockKernelReplicaClientMockRecorder) YieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecutionRequest", reflect.TypeOf((*MockKernelReplicaClient)(nil).YieldNextExecutionRequest))
}

// YieldedNextExecutionRequest mocks base method.
func (m *MockKernelReplicaClient) YieldedNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldedNextExecutionRequest")
}

// YieldedNextExecutionRequest indicates an expected call of YieldedNextExecutionRequest.
func (mr *MockKernelReplicaClientMockRecorder) YieldedNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldedNextExecutionRequest", reflect.TypeOf((*MockKernelReplicaClient)(nil).YieldedNextExecutionRequest))
}
