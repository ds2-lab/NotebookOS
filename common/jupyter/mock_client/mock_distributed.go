// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/jupyter/client/distributed.go
//
// Generated by this command:
//
//	mockgen -source /home/scusemua/go/pkg/distributed-notebook/common/jupyter/client/distributed.go -package mock_client -destination /home/scusemua/go/pkg/distributed-notebook/common/jupyter/mock_client/mock_distributed.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	client "github.com/zhangjyr/distributed-notebook/common/jupyter/client"
	types "github.com/zhangjyr/distributed-notebook/common/jupyter/types"
	metrics "github.com/zhangjyr/distributed-notebook/common/metrics"
	proto "github.com/zhangjyr/distributed-notebook/common/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// BindSession mocks base method.
func (m *MockSessionManager) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockSessionManagerMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockSessionManager)(nil).BindSession), sess)
}

// ClearSessions mocks base method.
func (m *MockSessionManager) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockSessionManagerMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockSessionManager)(nil).ClearSessions))
}

// Sessions mocks base method.
func (m *MockSessionManager) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockSessionManagerMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockSessionManager)(nil).Sessions))
}

// UnbindSession mocks base method.
func (m *MockSessionManager) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockSessionManagerMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockSessionManager)(nil).UnbindSession), sess)
}

// MockDistributedClientProvider is a mock of DistributedClientProvider interface.
type MockDistributedClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedClientProviderMockRecorder
}

// MockDistributedClientProviderMockRecorder is the mock recorder for MockDistributedClientProvider.
type MockDistributedClientProviderMockRecorder struct {
	mock *MockDistributedClientProvider
}

// NewMockDistributedClientProvider creates a new mock instance.
func NewMockDistributedClientProvider(ctrl *gomock.Controller) *MockDistributedClientProvider {
	mock := &MockDistributedClientProvider{ctrl: ctrl}
	mock.recorder = &MockDistributedClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedClientProvider) EXPECT() *MockDistributedClientProviderMockRecorder {
	return m.recorder
}

// NewDistributedKernelClient mocks base method.
func (m *MockDistributedClientProvider) NewDistributedKernelClient(ctx context.Context, spec *proto.KernelSpec, numReplicas int, hostId string, connectionInfo *types.ConnectionInfo, shellListenPort, iopubListenPort int, persistentId string, debugMode bool, executionFailedCallback client.ExecutionFailedCallback, executionLatencyCallback client.ExecutionLatencyCallback, messagingMetricsProvider metrics.MessagingMetricsProvider) client.AbstractDistributedKernelClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDistributedKernelClient", ctx, spec, numReplicas, hostId, connectionInfo, shellListenPort, iopubListenPort, persistentId, debugMode, executionFailedCallback, executionLatencyCallback, messagingMetricsProvider)
	ret0, _ := ret[0].(client.AbstractDistributedKernelClient)
	return ret0
}

// NewDistributedKernelClient indicates an expected call of NewDistributedKernelClient.
func (mr *MockDistributedClientProviderMockRecorder) NewDistributedKernelClient(ctx, spec, numReplicas, hostId, connectionInfo, shellListenPort, iopubListenPort, persistentId, debugMode, executionFailedCallback, executionLatencyCallback, messagingMetricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDistributedKernelClient", reflect.TypeOf((*MockDistributedClientProvider)(nil).NewDistributedKernelClient), ctx, spec, numReplicas, hostId, connectionInfo, shellListenPort, iopubListenPort, persistentId, debugMode, executionFailedCallback, executionLatencyCallback, messagingMetricsProvider)
}
