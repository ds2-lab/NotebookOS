// Code generated by MockGen. DO NOT EDIT.
// Source: distributed.go
//
// Generated by this command:
//
//	mockgen -source distributed.go -package mock_client -destination /home/bcarver2/go/pkg/distributed-notebook/common/jupyter/mock_client/mock_distributed.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	zmq4 "github.com/pebbe/zmq4"
	core "github.com/zhangjyr/distributed-notebook/common/core"
	gateway "github.com/zhangjyr/distributed-notebook/common/gateway"
	client "github.com/zhangjyr/distributed-notebook/common/jupyter/client"
	types "github.com/zhangjyr/distributed-notebook/common/jupyter/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDistributedKernelClient is a mock of DistributedKernelClient interface.
type MockDistributedKernelClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedKernelClientMockRecorder
}

// MockDistributedKernelClientMockRecorder is the mock recorder for MockDistributedKernelClient.
type MockDistributedKernelClientMockRecorder struct {
	mock *MockDistributedKernelClient
}

// NewMockDistributedKernelClient creates a new mock instance.
func NewMockDistributedKernelClient(ctrl *gomock.Controller) *MockDistributedKernelClient {
	mock := &MockDistributedKernelClient{ctrl: ctrl}
	mock.recorder = &MockDistributedKernelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedKernelClient) EXPECT() *MockDistributedKernelClientMockRecorder {
	return m.recorder
}

// ActiveExecution mocks base method.
func (m *MockDistributedKernelClient) ActiveExecution() *client.ActiveExecution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveExecution")
	ret0, _ := ret[0].(*client.ActiveExecution)
	return ret0
}

// ActiveExecution indicates an expected call of ActiveExecution.
func (mr *MockDistributedKernelClientMockRecorder) ActiveExecution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveExecution", reflect.TypeOf((*MockDistributedKernelClient)(nil).ActiveExecution))
}

// AddDestFrame mocks base method.
func (m *MockDistributedKernelClient) AddDestFrame(frames [][]byte, destID string, jOffset int) ([][]byte, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDestFrame", frames, destID, jOffset)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// AddDestFrame indicates an expected call of AddDestFrame.
func (mr *MockDistributedKernelClientMockRecorder) AddDestFrame(frames, destID, jOffset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDestFrame", reflect.TypeOf((*MockDistributedKernelClient)(nil).AddDestFrame), frames, destID, jOffset)
}

// AddOperationCompleted mocks base method.
func (m *MockDistributedKernelClient) AddOperationCompleted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationCompleted")
}

// AddOperationCompleted indicates an expected call of AddOperationCompleted.
func (mr *MockDistributedKernelClientMockRecorder) AddOperationCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationCompleted", reflect.TypeOf((*MockDistributedKernelClient)(nil).AddOperationCompleted))
}

// AddOperationStarted mocks base method.
func (m *MockDistributedKernelClient) AddOperationStarted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationStarted")
}

// AddOperationStarted indicates an expected call of AddOperationStarted.
func (mr *MockDistributedKernelClientMockRecorder) AddOperationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationStarted", reflect.TypeOf((*MockDistributedKernelClient)(nil).AddOperationStarted))
}

// AddReplica mocks base method.
func (m *MockDistributedKernelClient) AddReplica(r core.KernelReplica, host core.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", r, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockDistributedKernelClientMockRecorder) AddReplica(r, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockDistributedKernelClient)(nil).AddReplica), r, host)
}

// AggregateBusyStatus mocks base method.
func (m *MockDistributedKernelClient) AggregateBusyStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateBusyStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// AggregateBusyStatus indicates an expected call of AggregateBusyStatus.
func (mr *MockDistributedKernelClientMockRecorder) AggregateBusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateBusyStatus", reflect.TypeOf((*MockDistributedKernelClient)(nil).AggregateBusyStatus))
}

// BindSession mocks base method.
func (m *MockDistributedKernelClient) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockDistributedKernelClientMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockDistributedKernelClient)(nil).BindSession), sess)
}

// ClearSessions mocks base method.
func (m *MockDistributedKernelClient) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockDistributedKernelClientMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockDistributedKernelClient)(nil).ClearSessions))
}

// Close mocks base method.
func (m *MockDistributedKernelClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDistributedKernelClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDistributedKernelClient)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockDistributedKernelClient) ConnectionInfo() *types.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*types.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockDistributedKernelClientMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockDistributedKernelClient)(nil).ConnectionInfo))
}

// ExecutionFailedCallback mocks base method.
func (m *MockDistributedKernelClient) ExecutionFailedCallback() client.ExecutionFailedCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionFailedCallback")
	ret0, _ := ret[0].(client.ExecutionFailedCallback)
	return ret0
}

// ExecutionFailedCallback indicates an expected call of ExecutionFailedCallback.
func (mr *MockDistributedKernelClientMockRecorder) ExecutionFailedCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionFailedCallback", reflect.TypeOf((*MockDistributedKernelClient)(nil).ExecutionFailedCallback))
}

// ExtractDestFrame mocks base method.
func (m *MockDistributedKernelClient) ExtractDestFrame(frames [][]byte) (string, string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractDestFrame", frames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// ExtractDestFrame indicates an expected call of ExtractDestFrame.
func (mr *MockDistributedKernelClientMockRecorder) ExtractDestFrame(frames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractDestFrame", reflect.TypeOf((*MockDistributedKernelClient)(nil).ExtractDestFrame), frames)
}

// GetReadyReplica mocks base method.
func (m *MockDistributedKernelClient) GetReadyReplica() core.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyReplica")
	ret0, _ := ret[0].(core.KernelReplica)
	return ret0
}

// GetReadyReplica indicates an expected call of GetReadyReplica.
func (mr *MockDistributedKernelClientMockRecorder) GetReadyReplica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyReplica", reflect.TypeOf((*MockDistributedKernelClient)(nil).GetReadyReplica))
}

// GetReplicaByID mocks base method.
func (m *MockDistributedKernelClient) GetReplicaByID(id int32) (core.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaByID", id)
	ret0, _ := ret[0].(core.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaByID indicates an expected call of GetReplicaByID.
func (mr *MockDistributedKernelClientMockRecorder) GetReplicaByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaByID", reflect.TypeOf((*MockDistributedKernelClient)(nil).GetReplicaByID), id)
}

// ID mocks base method.
func (m *MockDistributedKernelClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDistributedKernelClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDistributedKernelClient)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockDistributedKernelClient) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockDistributedKernelClientMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockDistributedKernelClient)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockDistributedKernelClient) InitializeIOForwarder() (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockDistributedKernelClientMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockDistributedKernelClient)(nil).InitializeIOForwarder))
}

// InitializeShellForwarder mocks base method.
func (m *MockDistributedKernelClient) InitializeShellForwarder(handler core.KernelMessageHandler) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockDistributedKernelClientMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockDistributedKernelClient)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockDistributedKernelClient) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockDistributedKernelClientMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockDistributedKernelClient)(nil).IsReady))
}

// IsReplicaReady mocks base method.
func (m *MockDistributedKernelClient) IsReplicaReady(replicaId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReplicaReady", replicaId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReplicaReady indicates an expected call of IsReplicaReady.
func (mr *MockDistributedKernelClientMockRecorder) IsReplicaReady(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReplicaReady", reflect.TypeOf((*MockDistributedKernelClient)(nil).IsReplicaReady), replicaId)
}

// KernelSpec mocks base method.
func (m *MockDistributedKernelClient) KernelSpec() *gateway.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*gateway.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockDistributedKernelClientMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockDistributedKernelClient)(nil).KernelSpec))
}

// NumActiveAddOperations mocks base method.
func (m *MockDistributedKernelClient) NumActiveAddOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveAddOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveAddOperations indicates an expected call of NumActiveAddOperations.
func (mr *MockDistributedKernelClientMockRecorder) NumActiveAddOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveAddOperations", reflect.TypeOf((*MockDistributedKernelClient)(nil).NumActiveAddOperations))
}

// PersistentID mocks base method.
func (m *MockDistributedKernelClient) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockDistributedKernelClientMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockDistributedKernelClient)(nil).PersistentID))
}

// PodName mocks base method.
func (m *MockDistributedKernelClient) PodName(id int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodName", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodName indicates an expected call of PodName.
func (mr *MockDistributedKernelClientMockRecorder) PodName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodName", reflect.TypeOf((*MockDistributedKernelClient)(nil).PodName), id)
}

// PrepareNewReplica mocks base method.
func (m *MockDistributedKernelClient) PrepareNewReplica(persistentId string, smrNodeId int32) *gateway.KernelReplicaSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNewReplica", persistentId, smrNodeId)
	ret0, _ := ret[0].(*gateway.KernelReplicaSpec)
	return ret0
}

// PrepareNewReplica indicates an expected call of PrepareNewReplica.
func (mr *MockDistributedKernelClientMockRecorder) PrepareNewReplica(persistentId, smrNodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNewReplica", reflect.TypeOf((*MockDistributedKernelClient)(nil).PrepareNewReplica), persistentId, smrNodeId)
}

// RemoveReplicaByID mocks base method.
func (m *MockDistributedKernelClient) RemoveReplicaByID(id int32, remover client.ReplicaRemover, noop bool) (core.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaByID", id, remover, noop)
	ret0, _ := ret[0].(core.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplicaByID indicates an expected call of RemoveReplicaByID.
func (mr *MockDistributedKernelClientMockRecorder) RemoveReplicaByID(id, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaByID", reflect.TypeOf((*MockDistributedKernelClient)(nil).RemoveReplicaByID), id, remover, noop)
}

// Replicas mocks base method.
func (m *MockDistributedKernelClient) Replicas() []core.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].([]core.KernelReplica)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockDistributedKernelClientMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockDistributedKernelClient)(nil).Replicas))
}

// RequestDestID mocks base method.
func (m *MockDistributedKernelClient) RequestDestID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestDestID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestDestID indicates an expected call of RequestDestID.
func (mr *MockDistributedKernelClientMockRecorder) RequestDestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestDestID", reflect.TypeOf((*MockDistributedKernelClient)(nil).RequestDestID))
}

// RequestWithHandler mocks base method.
func (m *MockDistributedKernelClient) RequestWithHandler(ctx context.Context, prompt string, typ types.MessageType, msg [][]byte, handler core.KernelMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, prompt, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockDistributedKernelClientMockRecorder) RequestWithHandler(ctx, prompt, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockDistributedKernelClient)(nil).RequestWithHandler), ctx, prompt, typ, msg, handler, done)
}

// ResourceSpec mocks base method.
func (m *MockDistributedKernelClient) ResourceSpec() *gateway.ResourceSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*gateway.ResourceSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockDistributedKernelClientMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockDistributedKernelClient)(nil).ResourceSpec))
}

// Sessions mocks base method.
func (m *MockDistributedKernelClient) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockDistributedKernelClientMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockDistributedKernelClient)(nil).Sessions))
}

// SetActiveExecution mocks base method.
func (m *MockDistributedKernelClient) SetActiveExecution(activeExecution *client.ActiveExecution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActiveExecution", activeExecution)
}

// SetActiveExecution indicates an expected call of SetActiveExecution.
func (mr *MockDistributedKernelClientMockRecorder) SetActiveExecution(activeExecution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveExecution", reflect.TypeOf((*MockDistributedKernelClient)(nil).SetActiveExecution), activeExecution)
}

// ShellListenPort mocks base method.
func (m *MockDistributedKernelClient) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockDistributedKernelClientMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockDistributedKernelClient)(nil).ShellListenPort))
}

// Shutdown mocks base method.
func (m *MockDistributedKernelClient) Shutdown(remover client.ReplicaRemover, restart bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", remover, restart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockDistributedKernelClientMockRecorder) Shutdown(remover, restart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDistributedKernelClient)(nil).Shutdown), remover, restart)
}

// Size mocks base method.
func (m *MockDistributedKernelClient) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockDistributedKernelClientMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDistributedKernelClient)(nil).Size))
}

// SkipIdentities mocks base method.
func (m *MockDistributedKernelClient) SkipIdentities(frames [][]byte) (types.JupyterFrames, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipIdentities", frames)
	ret0, _ := ret[0].(types.JupyterFrames)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// SkipIdentities indicates an expected call of SkipIdentities.
func (mr *MockDistributedKernelClientMockRecorder) SkipIdentities(frames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipIdentities", reflect.TypeOf((*MockDistributedKernelClient)(nil).SkipIdentities), frames)
}

// Socket mocks base method.
func (m *MockDistributedKernelClient) Socket(typ types.MessageType) *types.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*types.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockDistributedKernelClientMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockDistributedKernelClient)(nil).Socket), typ)
}

// SourceKernelID mocks base method.
func (m *MockDistributedKernelClient) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockDistributedKernelClientMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockDistributedKernelClient)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockDistributedKernelClient) Status() types.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(types.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockDistributedKernelClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDistributedKernelClient)(nil).Status))
}

// String mocks base method.
func (m *MockDistributedKernelClient) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDistributedKernelClientMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDistributedKernelClient)(nil).String))
}

// UnbindSession mocks base method.
func (m *MockDistributedKernelClient) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockDistributedKernelClientMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockDistributedKernelClient)(nil).UnbindSession), sess)
}

// Validate mocks base method.
func (m *MockDistributedKernelClient) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockDistributedKernelClientMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockDistributedKernelClient)(nil).Validate))
}

// WaitClosed mocks base method.
func (m *MockDistributedKernelClient) WaitClosed() types.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitClosed")
	ret0, _ := ret[0].(types.KernelStatus)
	return ret0
}

// WaitClosed indicates an expected call of WaitClosed.
func (mr *MockDistributedKernelClientMockRecorder) WaitClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitClosed", reflect.TypeOf((*MockDistributedKernelClient)(nil).WaitClosed))
}
