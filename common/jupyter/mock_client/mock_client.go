// Code generated by MockGen. DO NOT EDIT.
// Source: common/jupyter/client/types.go
//
// Generated by this command:
//
//	mockgen -source common/jupyter/client/types.go -package mock_client -destination /home/scusemua/go/pkg/distributed-notebook/common/jupyter/mock_client/mock_client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"
	time "time"

	client "github.com/zhangjyr/distributed-notebook/common/jupyter/client"
	types "github.com/zhangjyr/distributed-notebook/common/jupyter/types"
	proto "github.com/zhangjyr/distributed-notebook/common/proto"
	scheduling "github.com/zhangjyr/distributed-notebook/common/scheduling"
	types0 "github.com/zhangjyr/distributed-notebook/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAbstractDistributedKernelClient is a mock of AbstractDistributedKernelClient interface.
type MockAbstractDistributedKernelClient struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractDistributedKernelClientMockRecorder
}

// MockAbstractDistributedKernelClientMockRecorder is the mock recorder for MockAbstractDistributedKernelClient.
type MockAbstractDistributedKernelClientMockRecorder struct {
	mock *MockAbstractDistributedKernelClient
}

// NewMockAbstractDistributedKernelClient creates a new mock instance.
func NewMockAbstractDistributedKernelClient(ctrl *gomock.Controller) *MockAbstractDistributedKernelClient {
	mock := &MockAbstractDistributedKernelClient{ctrl: ctrl}
	mock.recorder = &MockAbstractDistributedKernelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractDistributedKernelClient) EXPECT() *MockAbstractDistributedKernelClientMockRecorder {
	return m.recorder
}

// ActiveExecution mocks base method.
func (m *MockAbstractDistributedKernelClient) ActiveExecution() *scheduling.ActiveExecution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveExecution")
	ret0, _ := ret[0].(*scheduling.ActiveExecution)
	return ret0
}

// ActiveExecution indicates an expected call of ActiveExecution.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ActiveExecution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveExecution", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ActiveExecution))
}

// AddOperationCompleted mocks base method.
func (m *MockAbstractDistributedKernelClient) AddOperationCompleted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationCompleted")
}

// AddOperationCompleted indicates an expected call of AddOperationCompleted.
func (mr *MockAbstractDistributedKernelClientMockRecorder) AddOperationCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationCompleted", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).AddOperationCompleted))
}

// AddOperationStarted mocks base method.
func (m *MockAbstractDistributedKernelClient) AddOperationStarted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationStarted")
}

// AddOperationStarted indicates an expected call of AddOperationStarted.
func (mr *MockAbstractDistributedKernelClientMockRecorder) AddOperationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationStarted", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).AddOperationStarted))
}

// AddReplica mocks base method.
func (m *MockAbstractDistributedKernelClient) AddReplica(r scheduling.KernelReplica, host *scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", r, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockAbstractDistributedKernelClientMockRecorder) AddReplica(r, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).AddReplica), r, host)
}

// AggregateBusyStatus mocks base method.
func (m *MockAbstractDistributedKernelClient) AggregateBusyStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateBusyStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// AggregateBusyStatus indicates an expected call of AggregateBusyStatus.
func (mr *MockAbstractDistributedKernelClientMockRecorder) AggregateBusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateBusyStatus", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).AggregateBusyStatus))
}

// BindSession mocks base method.
func (m *MockAbstractDistributedKernelClient) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockAbstractDistributedKernelClientMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).BindSession), sess)
}

// Close mocks base method.
func (m *MockAbstractDistributedKernelClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAbstractDistributedKernelClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockAbstractDistributedKernelClient) ConnectionInfo() *types.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*types.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ConnectionInfo))
}

// EnqueueActiveExecution mocks base method.
func (m *MockAbstractDistributedKernelClient) EnqueueActiveExecution(attemptId int, msg *types.JupyterMessage) *scheduling.ActiveExecution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueActiveExecution", attemptId, msg)
	ret0, _ := ret[0].(*scheduling.ActiveExecution)
	return ret0
}

// EnqueueActiveExecution indicates an expected call of EnqueueActiveExecution.
func (mr *MockAbstractDistributedKernelClientMockRecorder) EnqueueActiveExecution(attemptId, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueActiveExecution", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).EnqueueActiveExecution), attemptId, msg)
}

// ExecutionComplete mocks base method.
func (m *MockAbstractDistributedKernelClient) ExecutionComplete(snapshot types0.HostResourceSnapshot[*scheduling.ResourceSnapshot], msg *types.JupyterMessage) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionComplete", snapshot, msg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutionComplete indicates an expected call of ExecutionComplete.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ExecutionComplete(snapshot, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionComplete", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ExecutionComplete), snapshot, msg)
}

// ExecutionFailedCallback mocks base method.
func (m *MockAbstractDistributedKernelClient) ExecutionFailedCallback() client.ExecutionFailedCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionFailedCallback")
	ret0, _ := ret[0].(client.ExecutionFailedCallback)
	return ret0
}

// ExecutionFailedCallback indicates an expected call of ExecutionFailedCallback.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ExecutionFailedCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionFailedCallback", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ExecutionFailedCallback))
}

// GetActiveExecutionByExecuteRequestMsgId mocks base method.
func (m *MockAbstractDistributedKernelClient) GetActiveExecutionByExecuteRequestMsgId(msgId string) (*scheduling.ActiveExecution, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutionByExecuteRequestMsgId", msgId)
	ret0, _ := ret[0].(*scheduling.ActiveExecution)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetActiveExecutionByExecuteRequestMsgId indicates an expected call of GetActiveExecutionByExecuteRequestMsgId.
func (mr *MockAbstractDistributedKernelClientMockRecorder) GetActiveExecutionByExecuteRequestMsgId(msgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutionByExecuteRequestMsgId", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).GetActiveExecutionByExecuteRequestMsgId), msgId)
}

// GetContainers mocks base method.
func (m *MockAbstractDistributedKernelClient) GetContainers() []*scheduling.Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]*scheduling.Container)
	return ret0
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockAbstractDistributedKernelClientMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).GetContainers))
}

// GetReadyReplica mocks base method.
func (m *MockAbstractDistributedKernelClient) GetReadyReplica() scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyReplica")
	ret0, _ := ret[0].(scheduling.KernelReplica)
	return ret0
}

// GetReadyReplica indicates an expected call of GetReadyReplica.
func (mr *MockAbstractDistributedKernelClientMockRecorder) GetReadyReplica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyReplica", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).GetReadyReplica))
}

// GetReplicaByID mocks base method.
func (m *MockAbstractDistributedKernelClient) GetReplicaByID(id int32) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaByID", id)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaByID indicates an expected call of GetReplicaByID.
func (mr *MockAbstractDistributedKernelClientMockRecorder) GetReplicaByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaByID", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).GetReplicaByID), id)
}

// GetSession mocks base method.
func (m *MockAbstractDistributedKernelClient) GetSession() *scheduling.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(*scheduling.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockAbstractDistributedKernelClientMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).GetSession))
}

// ID mocks base method.
func (m *MockAbstractDistributedKernelClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockAbstractDistributedKernelClient) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockAbstractDistributedKernelClientMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockAbstractDistributedKernelClient) InitializeIOForwarder() (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockAbstractDistributedKernelClientMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).InitializeIOForwarder))
}

// InitializeShellForwarder mocks base method.
func (m *MockAbstractDistributedKernelClient) InitializeShellForwarder(handler scheduling.KernelMessageHandler) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockAbstractDistributedKernelClientMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockAbstractDistributedKernelClient) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockAbstractDistributedKernelClientMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).IsReady))
}

// IsReplicaReady mocks base method.
func (m *MockAbstractDistributedKernelClient) IsReplicaReady(replicaId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReplicaReady", replicaId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReplicaReady indicates an expected call of IsReplicaReady.
func (mr *MockAbstractDistributedKernelClientMockRecorder) IsReplicaReady(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReplicaReady", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).IsReplicaReady), replicaId)
}

// KernelSpec mocks base method.
func (m *MockAbstractDistributedKernelClient) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockAbstractDistributedKernelClientMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).KernelSpec))
}

// NumActiveExecutionOperations mocks base method.
func (m *MockAbstractDistributedKernelClient) NumActiveExecutionOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveExecutionOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveExecutionOperations indicates an expected call of NumActiveExecutionOperations.
func (mr *MockAbstractDistributedKernelClientMockRecorder) NumActiveExecutionOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveExecutionOperations", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).NumActiveExecutionOperations))
}

// NumActiveMigrationOperations mocks base method.
func (m *MockAbstractDistributedKernelClient) NumActiveMigrationOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveMigrationOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveMigrationOperations indicates an expected call of NumActiveMigrationOperations.
func (mr *MockAbstractDistributedKernelClientMockRecorder) NumActiveMigrationOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveMigrationOperations", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).NumActiveMigrationOperations))
}

// PersistentID mocks base method.
func (m *MockAbstractDistributedKernelClient) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockAbstractDistributedKernelClientMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).PersistentID))
}

// PodOrContainerName mocks base method.
func (m *MockAbstractDistributedKernelClient) PodOrContainerName(id int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodOrContainerName", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodOrContainerName indicates an expected call of PodOrContainerName.
func (mr *MockAbstractDistributedKernelClientMockRecorder) PodOrContainerName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodOrContainerName", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).PodOrContainerName), id)
}

// PrepareNewReplica mocks base method.
func (m *MockAbstractDistributedKernelClient) PrepareNewReplica(persistentId string, smrNodeId int32) *proto.KernelReplicaSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNewReplica", persistentId, smrNodeId)
	ret0, _ := ret[0].(*proto.KernelReplicaSpec)
	return ret0
}

// PrepareNewReplica indicates an expected call of PrepareNewReplica.
func (mr *MockAbstractDistributedKernelClientMockRecorder) PrepareNewReplica(persistentId, smrNodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNewReplica", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).PrepareNewReplica), persistentId, smrNodeId)
}

// RemoveReplica mocks base method.
func (m *MockAbstractDistributedKernelClient) RemoveReplica(r scheduling.KernelReplica, remover client.ReplicaRemover, noop bool) (*scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplica", r, remover, noop)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplica indicates an expected call of RemoveReplica.
func (mr *MockAbstractDistributedKernelClientMockRecorder) RemoveReplica(r, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).RemoveReplica), r, remover, noop)
}

// RemoveReplicaByID mocks base method.
func (m *MockAbstractDistributedKernelClient) RemoveReplicaByID(id int32, remover client.ReplicaRemover, noop bool) (*scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaByID", id, remover, noop)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplicaByID indicates an expected call of RemoveReplicaByID.
func (mr *MockAbstractDistributedKernelClientMockRecorder) RemoveReplicaByID(id, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaByID", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).RemoveReplicaByID), id, remover, noop)
}

// Replicas mocks base method.
func (m *MockAbstractDistributedKernelClient) Replicas() []scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].([]scheduling.KernelReplica)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockAbstractDistributedKernelClientMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).Replicas))
}

// RequestWithHandler mocks base method.
func (m *MockAbstractDistributedKernelClient) RequestWithHandler(ctx context.Context, arg1 string, typ types.MessageType, msg *types.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, arg1, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockAbstractDistributedKernelClientMockRecorder) RequestWithHandler(ctx, arg1, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).RequestWithHandler), ctx, arg1, typ, msg, handler, done)
}

// RequestWithHandlerAndReplicas mocks base method.
func (m *MockAbstractDistributedKernelClient) RequestWithHandlerAndReplicas(ctx context.Context, typ types.MessageType, jMsg *types.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func(), replicas ...scheduling.KernelReplica) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, typ, jMsg, handler, done}
	for _, a := range replicas {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithHandlerAndReplicas", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandlerAndReplicas indicates an expected call of RequestWithHandlerAndReplicas.
func (mr *MockAbstractDistributedKernelClientMockRecorder) RequestWithHandlerAndReplicas(ctx, typ, jMsg, handler, done any, replicas ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, typ, jMsg, handler, done}, replicas...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandlerAndReplicas", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).RequestWithHandlerAndReplicas), varargs...)
}

// ResetID mocks base method.
func (m *MockAbstractDistributedKernelClient) ResetID(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetID", id)
}

// ResetID indicates an expected call of ResetID.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ResetID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetID", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ResetID), id)
}

// ResourceSpec mocks base method.
func (m *MockAbstractDistributedKernelClient) ResourceSpec() *types0.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types0.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ResourceSpec))
}

// SetActiveExecution mocks base method.
func (m *MockAbstractDistributedKernelClient) SetActiveExecution(activeExecution *scheduling.ActiveExecution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActiveExecution", activeExecution)
}

// SetActiveExecution indicates an expected call of SetActiveExecution.
func (mr *MockAbstractDistributedKernelClientMockRecorder) SetActiveExecution(activeExecution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveExecution", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).SetActiveExecution), activeExecution)
}

// SetSession mocks base method.
func (m *MockAbstractDistributedKernelClient) SetSession(session *scheduling.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", session)
}

// SetSession indicates an expected call of SetSession.
func (mr *MockAbstractDistributedKernelClientMockRecorder) SetSession(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).SetSession), session)
}

// ShellListenPort mocks base method.
func (m *MockAbstractDistributedKernelClient) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockAbstractDistributedKernelClientMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).ShellListenPort))
}

// Shutdown mocks base method.
func (m *MockAbstractDistributedKernelClient) Shutdown(remover client.ReplicaRemover, restart bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", remover, restart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockAbstractDistributedKernelClientMockRecorder) Shutdown(remover, restart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).Shutdown), remover, restart)
}

// Size mocks base method.
func (m *MockAbstractDistributedKernelClient) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockAbstractDistributedKernelClientMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).Size))
}

// SourceKernelID mocks base method.
func (m *MockAbstractDistributedKernelClient) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockAbstractDistributedKernelClientMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockAbstractDistributedKernelClient) Status() types.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(types.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockAbstractDistributedKernelClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).Status))
}

// String mocks base method.
func (m *MockAbstractDistributedKernelClient) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAbstractDistributedKernelClientMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).String))
}

// Validate mocks base method.
func (m *MockAbstractDistributedKernelClient) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAbstractDistributedKernelClientMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).Validate))
}

// WaitClosed mocks base method.
func (m *MockAbstractDistributedKernelClient) WaitClosed() types.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitClosed")
	ret0, _ := ret[0].(types.KernelStatus)
	return ret0
}

// WaitClosed indicates an expected call of WaitClosed.
func (mr *MockAbstractDistributedKernelClientMockRecorder) WaitClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitClosed", reflect.TypeOf((*MockAbstractDistributedKernelClient)(nil).WaitClosed))
}

// MockAbstractKernelClient is a mock of AbstractKernelClient interface.
type MockAbstractKernelClient struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractKernelClientMockRecorder
}

// MockAbstractKernelClientMockRecorder is the mock recorder for MockAbstractKernelClient.
type MockAbstractKernelClientMockRecorder struct {
	mock *MockAbstractKernelClient
}

// NewMockAbstractKernelClient creates a new mock instance.
func NewMockAbstractKernelClient(ctrl *gomock.Controller) *MockAbstractKernelClient {
	mock := &MockAbstractKernelClient{ctrl: ctrl}
	mock.recorder = &MockAbstractKernelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractKernelClient) EXPECT() *MockAbstractKernelClientMockRecorder {
	return m.recorder
}

// AddIOHandler mocks base method.
func (m *MockAbstractKernelClient) AddIOHandler(topic string, handler client.MessageBrokerHandler[scheduling.Kernel, *types.JupyterFrames, *types.JupyterMessage]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIOHandler", topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIOHandler indicates an expected call of AddIOHandler.
func (mr *MockAbstractKernelClientMockRecorder) AddIOHandler(topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIOHandler", reflect.TypeOf((*MockAbstractKernelClient)(nil).AddIOHandler), topic, handler)
}

// Address mocks base method.
func (m *MockAbstractKernelClient) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockAbstractKernelClientMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockAbstractKernelClient)(nil).Address))
}

// BindSession mocks base method.
func (m *MockAbstractKernelClient) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockAbstractKernelClientMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockAbstractKernelClient)(nil).BindSession), sess)
}

// BusyStatus mocks base method.
func (m *MockAbstractKernelClient) BusyStatus() (string, *types.JupyterMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.JupyterMessage)
	return ret0, ret1
}

// BusyStatus indicates an expected call of BusyStatus.
func (mr *MockAbstractKernelClientMockRecorder) BusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyStatus", reflect.TypeOf((*MockAbstractKernelClient)(nil).BusyStatus))
}

// Close mocks base method.
func (m *MockAbstractKernelClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAbstractKernelClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAbstractKernelClient)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockAbstractKernelClient) ConnectionInfo() *types.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*types.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockAbstractKernelClientMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockAbstractKernelClient)(nil).ConnectionInfo))
}

// Container mocks base method.
func (m *MockAbstractKernelClient) Container() *scheduling.Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(*scheduling.Container)
	return ret0
}

// Container indicates an expected call of Container.
func (mr *MockAbstractKernelClientMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockAbstractKernelClient)(nil).Container))
}

// GetHost mocks base method.
func (m *MockAbstractKernelClient) GetHost() *scheduling.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(*scheduling.Host)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockAbstractKernelClientMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockAbstractKernelClient)(nil).GetHost))
}

// HostId mocks base method.
func (m *MockAbstractKernelClient) HostId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostId")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostId indicates an expected call of HostId.
func (mr *MockAbstractKernelClientMockRecorder) HostId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostId", reflect.TypeOf((*MockAbstractKernelClient)(nil).HostId))
}

// ID mocks base method.
func (m *MockAbstractKernelClient) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAbstractKernelClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAbstractKernelClient)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockAbstractKernelClient) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockAbstractKernelClientMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockAbstractKernelClient)(nil).IOPubListenPort))
}

// InitializeIOSub mocks base method.
func (m *MockAbstractKernelClient) InitializeIOSub(handler types.MessageHandler, subscriptionTopic string) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOSub", handler, subscriptionTopic)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOSub indicates an expected call of InitializeIOSub.
func (mr *MockAbstractKernelClientMockRecorder) InitializeIOSub(handler, subscriptionTopic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOSub", reflect.TypeOf((*MockAbstractKernelClient)(nil).InitializeIOSub), handler, subscriptionTopic)
}

// InitializeShellForwarder mocks base method.
func (m *MockAbstractKernelClient) InitializeShellForwarder(handler scheduling.KernelMessageHandler) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockAbstractKernelClientMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockAbstractKernelClient)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockAbstractKernelClient) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockAbstractKernelClientMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockAbstractKernelClient)(nil).IsReady))
}

// IsTraining mocks base method.
func (m *MockAbstractKernelClient) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockAbstractKernelClientMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockAbstractKernelClient)(nil).IsTraining))
}

// KernelSpec mocks base method.
func (m *MockAbstractKernelClient) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockAbstractKernelClientMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockAbstractKernelClient)(nil).KernelSpec))
}

// KernelStoppedTraining mocks base method.
func (m *MockAbstractKernelClient) KernelStoppedTraining(snapshot types0.HostResourceSnapshot[*scheduling.ResourceSnapshot]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelStoppedTraining", snapshot)
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelStoppedTraining indicates an expected call of KernelStoppedTraining.
func (mr *MockAbstractKernelClientMockRecorder) KernelStoppedTraining(snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelStoppedTraining", reflect.TypeOf((*MockAbstractKernelClient)(nil).KernelStoppedTraining), snapshot)
}

// LastTrainingTimePrometheusUpdate mocks base method.
func (m *MockAbstractKernelClient) LastTrainingTimePrometheusUpdate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastTrainingTimePrometheusUpdate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastTrainingTimePrometheusUpdate indicates an expected call of LastTrainingTimePrometheusUpdate.
func (mr *MockAbstractKernelClientMockRecorder) LastTrainingTimePrometheusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTrainingTimePrometheusUpdate", reflect.TypeOf((*MockAbstractKernelClient)(nil).LastTrainingTimePrometheusUpdate))
}

// NodeName mocks base method.
func (m *MockAbstractKernelClient) NodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeName indicates an expected call of NodeName.
func (mr *MockAbstractKernelClientMockRecorder) NodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeName", reflect.TypeOf((*MockAbstractKernelClient)(nil).NodeName))
}

// NumPendingExecuteRequests mocks base method.
func (m *MockAbstractKernelClient) NumPendingExecuteRequests() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumPendingExecuteRequests")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumPendingExecuteRequests indicates an expected call of NumPendingExecuteRequests.
func (mr *MockAbstractKernelClientMockRecorder) NumPendingExecuteRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumPendingExecuteRequests", reflect.TypeOf((*MockAbstractKernelClient)(nil).NumPendingExecuteRequests))
}

// PersistentID mocks base method.
func (m *MockAbstractKernelClient) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockAbstractKernelClientMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockAbstractKernelClient)(nil).PersistentID))
}

// GetPodOrContainerName mocks base method.
func (m *MockAbstractKernelClient) GetPodOrContainerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodOrContainerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPodOrContainerName indicates an expected call of GetPodOrContainerName.
func (mr *MockAbstractKernelClientMockRecorder) GetPodOrContainerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodOrContainerName", reflect.TypeOf((*MockAbstractKernelClient)(nil).GetPodOrContainerName))
}

// ReceivedExecuteReply mocks base method.
func (m *MockAbstractKernelClient) ReceivedExecuteReply(msg *types.JupyterMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedExecuteReply", msg)
}

// ReceivedExecuteReply indicates an expected call of ReceivedExecuteReply.
func (mr *MockAbstractKernelClientMockRecorder) ReceivedExecuteReply(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedExecuteReply", reflect.TypeOf((*MockAbstractKernelClient)(nil).ReceivedExecuteReply), msg)
}

// ReconnectSocket mocks base method.
func (m *MockAbstractKernelClient) ReconnectSocket(typ types.MessageType) (*types.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconnectSocket", typ)
	ret0, _ := ret[0].(*types.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectSocket indicates an expected call of ReconnectSocket.
func (mr *MockAbstractKernelClientMockRecorder) ReconnectSocket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectSocket", reflect.TypeOf((*MockAbstractKernelClient)(nil).ReconnectSocket), typ)
}

// ReplicaID mocks base method.
func (m *MockAbstractKernelClient) ReplicaID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID.
func (mr *MockAbstractKernelClientMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockAbstractKernelClient)(nil).ReplicaID))
}

// RequestWithHandler mocks base method.
func (m *MockAbstractKernelClient) RequestWithHandler(ctx context.Context, arg1 string, typ types.MessageType, msg *types.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, arg1, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockAbstractKernelClientMockRecorder) RequestWithHandler(ctx, arg1, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockAbstractKernelClient)(nil).RequestWithHandler), ctx, arg1, typ, msg, handler, done)
}

// ResourceSpec mocks base method.
func (m *MockAbstractKernelClient) ResourceSpec() *types0.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types0.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockAbstractKernelClientMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockAbstractKernelClient)(nil).ResourceSpec))
}

// SentExecuteRequest mocks base method.
func (m *MockAbstractKernelClient) SentExecuteRequest(msg *types.JupyterMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SentExecuteRequest", msg)
}

// SentExecuteRequest indicates an expected call of SentExecuteRequest.
func (mr *MockAbstractKernelClientMockRecorder) SentExecuteRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentExecuteRequest", reflect.TypeOf((*MockAbstractKernelClient)(nil).SentExecuteRequest), msg)
}

// SetContainer mocks base method.
func (m *MockAbstractKernelClient) SetContainer(container *scheduling.Container) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContainer", container)
}

// SetContainer indicates an expected call of SetContainer.
func (mr *MockAbstractKernelClientMockRecorder) SetContainer(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainer", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetContainer), container)
}

// SetHost mocks base method.
func (m *MockAbstractKernelClient) SetHost(host *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHost", host)
}

// SetHost indicates an expected call of SetHost.
func (mr *MockAbstractKernelClientMockRecorder) SetHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHost", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetHost), host)
}

// SetLastTrainingTimePrometheusUpdate mocks base method.
func (m *MockAbstractKernelClient) SetLastTrainingTimePrometheusUpdate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastTrainingTimePrometheusUpdate")
}

// SetLastTrainingTimePrometheusUpdate indicates an expected call of SetLastTrainingTimePrometheusUpdate.
func (mr *MockAbstractKernelClientMockRecorder) SetLastTrainingTimePrometheusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastTrainingTimePrometheusUpdate", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetLastTrainingTimePrometheusUpdate))
}

// SetPersistentID mocks base method.
func (m *MockAbstractKernelClient) SetPersistentID(persistentId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPersistentID", persistentId)
}

// SetPersistentID indicates an expected call of SetPersistentID.
func (mr *MockAbstractKernelClientMockRecorder) SetPersistentID(persistentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersistentID", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetPersistentID), persistentId)
}

// SetReady mocks base method.
func (m *MockAbstractKernelClient) SetReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReady")
}

// SetReady indicates an expected call of SetReady.
func (mr *MockAbstractKernelClientMockRecorder) SetReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetReady))
}

// SetReplicaID mocks base method.
func (m *MockAbstractKernelClient) SetReplicaID(replicaId int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicaID", replicaId)
}

// SetReplicaID indicates an expected call of SetReplicaID.
func (mr *MockAbstractKernelClientMockRecorder) SetReplicaID(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicaID", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetReplicaID), replicaId)
}

// SetResourceSpec mocks base method.
func (m *MockAbstractKernelClient) SetResourceSpec(spec *proto.ResourceSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceSpec", spec)
}

// SetResourceSpec indicates an expected call of SetResourceSpec.
func (mr *MockAbstractKernelClientMockRecorder) SetResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceSpec", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetResourceSpec), spec)
}

// SetWorkloadId mocks base method.
func (m *MockAbstractKernelClient) SetWorkloadId(workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWorkloadId", workloadId)
}

// SetWorkloadId indicates an expected call of SetWorkloadId.
func (mr *MockAbstractKernelClientMockRecorder) SetWorkloadId(workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkloadId", reflect.TypeOf((*MockAbstractKernelClient)(nil).SetWorkloadId), workloadId)
}

// ShellListenPort mocks base method.
func (m *MockAbstractKernelClient) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockAbstractKernelClientMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockAbstractKernelClient)(nil).ShellListenPort))
}

// ShouldAckMessages mocks base method.
func (m *MockAbstractKernelClient) ShouldAckMessages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldAckMessages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldAckMessages indicates an expected call of ShouldAckMessages.
func (mr *MockAbstractKernelClientMockRecorder) ShouldAckMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldAckMessages", reflect.TypeOf((*MockAbstractKernelClient)(nil).ShouldAckMessages))
}

// Socket mocks base method.
func (m *MockAbstractKernelClient) Socket(typ types.MessageType) *types.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*types.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockAbstractKernelClientMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockAbstractKernelClient)(nil).Socket), typ)
}

// SourceKernelID mocks base method.
func (m *MockAbstractKernelClient) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockAbstractKernelClientMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockAbstractKernelClient)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockAbstractKernelClient) Status() types.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(types.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockAbstractKernelClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAbstractKernelClient)(nil).Status))
}

// String mocks base method.
func (m *MockAbstractKernelClient) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAbstractKernelClientMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAbstractKernelClient)(nil).String))
}

// SupposedToYieldNextExecutionRequest mocks base method.
func (m *MockAbstractKernelClient) SupposedToYieldNextExecutionRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupposedToYieldNextExecutionRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupposedToYieldNextExecutionRequest indicates an expected call of SupposedToYieldNextExecutionRequest.
func (mr *MockAbstractKernelClientMockRecorder) SupposedToYieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupposedToYieldNextExecutionRequest", reflect.TypeOf((*MockAbstractKernelClient)(nil).SupposedToYieldNextExecutionRequest))
}

// TrainingStartedAt mocks base method.
func (m *MockAbstractKernelClient) TrainingStartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingStartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TrainingStartedAt indicates an expected call of TrainingStartedAt.
func (mr *MockAbstractKernelClientMockRecorder) TrainingStartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingStartedAt", reflect.TypeOf((*MockAbstractKernelClient)(nil).TrainingStartedAt))
}

// Validate mocks base method.
func (m *MockAbstractKernelClient) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockAbstractKernelClientMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAbstractKernelClient)(nil).Validate))
}

// WaitForRepliesToPendingExecuteRequests mocks base method.
func (m *MockAbstractKernelClient) WaitForPendingExecuteRequests() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForPendingExecuteRequests")
}

// WaitForRepliesToPendingExecuteRequests indicates an expected call of WaitForRepliesToPendingExecuteRequests.
func (mr *MockAbstractKernelClientMockRecorder) WaitForRepliesToPendingExecuteRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForPendingExecuteRequests", reflect.TypeOf((*MockAbstractKernelClient)(nil).WaitForPendingExecuteRequests))
}

// WaitForTrainingToStop mocks base method.
func (m *MockAbstractKernelClient) WaitForTrainingToStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForTrainingToStop")
}

// WaitForTrainingToStop indicates an expected call of WaitForTrainingToStop.
func (mr *MockAbstractKernelClientMockRecorder) WaitForTrainingToStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTrainingToStop", reflect.TypeOf((*MockAbstractKernelClient)(nil).WaitForTrainingToStop))
}

// WorkloadId mocks base method.
func (m *MockAbstractKernelClient) WorkloadId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadId")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadId indicates an expected call of WorkloadId.
func (mr *MockAbstractKernelClientMockRecorder) WorkloadId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadId", reflect.TypeOf((*MockAbstractKernelClient)(nil).WorkloadId))
}

// WorkloadIdSet mocks base method.
func (m *MockAbstractKernelClient) WorkloadIdSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadIdSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WorkloadIdSet indicates an expected call of WorkloadIdSet.
func (mr *MockAbstractKernelClientMockRecorder) WorkloadIdSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadIdSet", reflect.TypeOf((*MockAbstractKernelClient)(nil).WorkloadIdSet))
}

// YieldNextExecutionRequest mocks base method.
func (m *MockAbstractKernelClient) YieldNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldNextExecutionRequest")
}

// YieldNextExecutionRequest indicates an expected call of YieldNextExecutionRequest.
func (mr *MockAbstractKernelClientMockRecorder) YieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecutionRequest", reflect.TypeOf((*MockAbstractKernelClient)(nil).YieldNextExecutionRequest))
}

// YieldedNextExecutionRequest mocks base method.
func (m *MockAbstractKernelClient) YieldedNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldedNextExecutionRequest")
}

// YieldedNextExecutionRequest indicates an expected call of YieldedNextExecutionRequest.
func (mr *MockAbstractKernelClientMockRecorder) YieldedNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldedNextExecutionRequest", reflect.TypeOf((*MockAbstractKernelClient)(nil).YieldedNextExecutionRequest))
}
