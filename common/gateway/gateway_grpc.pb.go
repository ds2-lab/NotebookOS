// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: common/gateway/gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalGatewayClient is the client API for LocalGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalGatewayClient interface {
	// Start a kernel or kernel replica.
	StartKernel(ctx context.Context, in *KernelSpec, opts ...grpc.CallOption) (*KernelConnectionInfo, error)
	// GetKernelStatus returns the status of a kernel.
	GetKernelStatus(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error)
	// KillKernel kills a kernel.
	KillKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error)
	// StopKernel stops a kernel gracefully and return immediately.
	StopKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error)
	// WaitKernel waits for a kernel to stop and return status.
	WaitKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error)
}

type localGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalGatewayClient(cc grpc.ClientConnInterface) LocalGatewayClient {
	return &localGatewayClient{cc}
}

func (c *localGatewayClient) StartKernel(ctx context.Context, in *KernelSpec, opts ...grpc.CallOption) (*KernelConnectionInfo, error) {
	out := new(KernelConnectionInfo)
	err := c.cc.Invoke(ctx, "/gateway.LocalGateway/StartKernel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) GetKernelStatus(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error) {
	out := new(KernelStatus)
	err := c.cc.Invoke(ctx, "/gateway.LocalGateway/GetKernelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) KillKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/gateway.LocalGateway/KillKernel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) StopKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/gateway.LocalGateway/StopKernel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localGatewayClient) WaitKernel(ctx context.Context, in *KernelId, opts ...grpc.CallOption) (*KernelStatus, error) {
	out := new(KernelStatus)
	err := c.cc.Invoke(ctx, "/gateway.LocalGateway/WaitKernel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalGatewayServer is the server API for LocalGateway service.
// All implementations must embed UnimplementedLocalGatewayServer
// for forward compatibility
type LocalGatewayServer interface {
	// Start a kernel or kernel replica.
	StartKernel(context.Context, *KernelSpec) (*KernelConnectionInfo, error)
	// GetKernelStatus returns the status of a kernel.
	GetKernelStatus(context.Context, *KernelId) (*KernelStatus, error)
	// KillKernel kills a kernel.
	KillKernel(context.Context, *KernelId) (*Void, error)
	// StopKernel stops a kernel gracefully and return immediately.
	StopKernel(context.Context, *KernelId) (*Void, error)
	// WaitKernel waits for a kernel to stop and return status.
	WaitKernel(context.Context, *KernelId) (*KernelStatus, error)
	mustEmbedUnimplementedLocalGatewayServer()
}

// UnimplementedLocalGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedLocalGatewayServer struct {
}

func (UnimplementedLocalGatewayServer) StartKernel(context.Context, *KernelSpec) (*KernelConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKernel not implemented")
}
func (UnimplementedLocalGatewayServer) GetKernelStatus(context.Context, *KernelId) (*KernelStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKernelStatus not implemented")
}
func (UnimplementedLocalGatewayServer) KillKernel(context.Context, *KernelId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillKernel not implemented")
}
func (UnimplementedLocalGatewayServer) StopKernel(context.Context, *KernelId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopKernel not implemented")
}
func (UnimplementedLocalGatewayServer) WaitKernel(context.Context, *KernelId) (*KernelStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitKernel not implemented")
}
func (UnimplementedLocalGatewayServer) mustEmbedUnimplementedLocalGatewayServer() {}

// UnsafeLocalGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalGatewayServer will
// result in compilation errors.
type UnsafeLocalGatewayServer interface {
	mustEmbedUnimplementedLocalGatewayServer()
}

func RegisterLocalGatewayServer(s grpc.ServiceRegistrar, srv LocalGatewayServer) {
	s.RegisterService(&LocalGateway_ServiceDesc, srv)
}

func _LocalGateway_StartKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).StartKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.LocalGateway/StartKernel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).StartKernel(ctx, req.(*KernelSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_GetKernelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).GetKernelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.LocalGateway/GetKernelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).GetKernelStatus(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_KillKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).KillKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.LocalGateway/KillKernel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).KillKernel(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_StopKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).StopKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.LocalGateway/StopKernel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).StopKernel(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalGateway_WaitKernel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KernelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalGatewayServer).WaitKernel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.LocalGateway/WaitKernel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalGatewayServer).WaitKernel(ctx, req.(*KernelId))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalGateway_ServiceDesc is the grpc.ServiceDesc for LocalGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.LocalGateway",
	HandlerType: (*LocalGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartKernel",
			Handler:    _LocalGateway_StartKernel_Handler,
		},
		{
			MethodName: "GetKernelStatus",
			Handler:    _LocalGateway_GetKernelStatus_Handler,
		},
		{
			MethodName: "KillKernel",
			Handler:    _LocalGateway_KillKernel_Handler,
		},
		{
			MethodName: "StopKernel",
			Handler:    _LocalGateway_StopKernel_Handler,
		},
		{
			MethodName: "WaitKernel",
			Handler:    _LocalGateway_WaitKernel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/gateway/gateway.proto",
}
