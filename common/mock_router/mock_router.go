// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/jupyter/router/router.go
//
// Generated by this command:
//
//	mockgen -source /home/scusemua/go/pkg/distributed-notebook/common/jupyter/router/router.go -package mock_router -destination /home/scusemua/go/pkg/distributed-notebook/common/mock_router/mock_router.go
//

// Package mock_router is a generated GoMock package.
package mock_router

import (
	reflect "reflect"

	messaging "github.com/scusemua/distributed-notebook/common/jupyter/messaging"
	router "github.com/scusemua/distributed-notebook/common/jupyter/router"
	gomock "go.uber.org/mock/gomock"
)

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
	isgomock struct{}
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockInfo) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockInfoMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockInfo)(nil).ID))
}

// Socket mocks base method.
func (m *MockInfo) Socket(arg0 messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", arg0)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockInfoMockRecorder) Socket(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockInfo)(nil).Socket), arg0)
}

// String mocks base method.
func (m *MockInfo) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockInfoMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockInfo)(nil).String))
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ControlHandler mocks base method.
func (m *MockProvider) ControlHandler(arg0 router.Info, arg1 *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ControlHandler indicates an expected call of ControlHandler.
func (mr *MockProviderMockRecorder) ControlHandler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlHandler", reflect.TypeOf((*MockProvider)(nil).ControlHandler), arg0, arg1)
}

// HBHandler mocks base method.
func (m *MockProvider) HBHandler(arg0 router.Info, arg1 *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HBHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HBHandler indicates an expected call of HBHandler.
func (mr *MockProviderMockRecorder) HBHandler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HBHandler", reflect.TypeOf((*MockProvider)(nil).HBHandler), arg0, arg1)
}

// ShellHandler mocks base method.
func (m *MockProvider) ShellHandler(arg0 router.Info, arg1 *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShellHandler indicates an expected call of ShellHandler.
func (mr *MockProviderMockRecorder) ShellHandler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellHandler", reflect.TypeOf((*MockProvider)(nil).ShellHandler), arg0, arg1)
}

// StdinHandler mocks base method.
func (m *MockProvider) StdinHandler(arg0 router.Info, arg1 *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdinHandler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StdinHandler indicates an expected call of StdinHandler.
func (mr *MockProviderMockRecorder) StdinHandler(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdinHandler", reflect.TypeOf((*MockProvider)(nil).StdinHandler), arg0, arg1)
}
