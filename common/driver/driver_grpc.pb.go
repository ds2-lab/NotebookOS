// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: common/driver/driver.proto

package driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DistributedNotebookCluster_ListKernels_FullMethodName = "/driver.DistributedNotebookCluster/ListKernels"
)

// DistributedNotebookClusterClient is the client API for DistributedNotebookCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedNotebookClusterClient interface {
	// Return a list of all of the current kernel IDs.
	ListKernels(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListKernelsResponse, error)
}

type distributedNotebookClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedNotebookClusterClient(cc grpc.ClientConnInterface) DistributedNotebookClusterClient {
	return &distributedNotebookClusterClient{cc}
}

func (c *distributedNotebookClusterClient) ListKernels(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListKernelsResponse, error) {
	out := new(ListKernelsResponse)
	err := c.cc.Invoke(ctx, DistributedNotebookCluster_ListKernels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedNotebookClusterServer is the server API for DistributedNotebookCluster service.
// All implementations must embed UnimplementedDistributedNotebookClusterServer
// for forward compatibility
type DistributedNotebookClusterServer interface {
	// Return a list of all of the current kernel IDs.
	ListKernels(context.Context, *Void) (*ListKernelsResponse, error)
	mustEmbedUnimplementedDistributedNotebookClusterServer()
}

// UnimplementedDistributedNotebookClusterServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedNotebookClusterServer struct {
}

func (UnimplementedDistributedNotebookClusterServer) ListKernels(context.Context, *Void) (*ListKernelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKernels not implemented")
}
func (UnimplementedDistributedNotebookClusterServer) mustEmbedUnimplementedDistributedNotebookClusterServer() {
}

// UnsafeDistributedNotebookClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedNotebookClusterServer will
// result in compilation errors.
type UnsafeDistributedNotebookClusterServer interface {
	mustEmbedUnimplementedDistributedNotebookClusterServer()
}

func RegisterDistributedNotebookClusterServer(s grpc.ServiceRegistrar, srv DistributedNotebookClusterServer) {
	s.RegisterService(&DistributedNotebookCluster_ServiceDesc, srv)
}

func _DistributedNotebookCluster_ListKernels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedNotebookClusterServer).ListKernels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistributedNotebookCluster_ListKernels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedNotebookClusterServer).ListKernels(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedNotebookCluster_ServiceDesc is the grpc.ServiceDesc for DistributedNotebookCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedNotebookCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driver.DistributedNotebookCluster",
	HandlerType: (*DistributedNotebookClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKernels",
			Handler:    _DistributedNotebookCluster_ListKernels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/driver/driver.proto",
}
