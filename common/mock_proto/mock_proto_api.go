// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/proto/gateway_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source /home/scusemua/go/pkg/distributed-notebook/common/proto/gateway_grpc.pb.go -package mock_proto -destination /home/scusemua/go/pkg/distributed-notebook/common/mock_proto/mock_proto_api.go
//

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/scusemua/distributed-notebook/common/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClusterGatewayClient is a mock of ClusterGatewayClient interface.
type MockClusterGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterGatewayClientMockRecorder
}

// MockClusterGatewayClientMockRecorder is the mock recorder for MockClusterGatewayClient.
type MockClusterGatewayClientMockRecorder struct {
	mock *MockClusterGatewayClient
}

// NewMockClusterGatewayClient creates a new mock instance.
func NewMockClusterGatewayClient(ctrl *gomock.Controller) *MockClusterGatewayClient {
	mock := &MockClusterGatewayClient{ctrl: ctrl}
	mock.recorder = &MockClusterGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterGatewayClient) EXPECT() *MockClusterGatewayClientMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockClusterGatewayClient) ID(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.ProvisionerId, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ID", varargs...)
	ret0, _ := ret[0].(*proto.ProvisionerId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockClusterGatewayClientMockRecorder) ID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClusterGatewayClient)(nil).ID), varargs...)
}

// MigrateKernelReplica mocks base method.
func (m *MockClusterGatewayClient) MigrateKernelReplica(ctx context.Context, in *proto.MigrationRequest, opts ...grpc.CallOption) (*proto.MigrateKernelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateKernelReplica", varargs...)
	ret0, _ := ret[0].(*proto.MigrateKernelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateKernelReplica indicates an expected call of MigrateKernelReplica.
func (mr *MockClusterGatewayClientMockRecorder) MigrateKernelReplica(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateKernelReplica", reflect.TypeOf((*MockClusterGatewayClient)(nil).MigrateKernelReplica), varargs...)
}

// Notify mocks base method.
func (m *MockClusterGatewayClient) Notify(ctx context.Context, in *proto.Notification, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Notify", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockClusterGatewayClientMockRecorder) Notify(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockClusterGatewayClient)(nil).Notify), varargs...)
}

// NotifyKernelRegistered mocks base method.
func (m *MockClusterGatewayClient) NotifyKernelRegistered(ctx context.Context, in *proto.KernelRegistrationNotification, opts ...grpc.CallOption) (*proto.KernelRegistrationNotificationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyKernelRegistered", varargs...)
	ret0, _ := ret[0].(*proto.KernelRegistrationNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyKernelRegistered indicates an expected call of NotifyKernelRegistered.
func (mr *MockClusterGatewayClientMockRecorder) NotifyKernelRegistered(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyKernelRegistered", reflect.TypeOf((*MockClusterGatewayClient)(nil).NotifyKernelRegistered), varargs...)
}

// PingGateway mocks base method.
func (m *MockClusterGatewayClient) PingGateway(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingGateway", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingGateway indicates an expected call of PingGateway.
func (mr *MockClusterGatewayClientMockRecorder) PingGateway(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingGateway", reflect.TypeOf((*MockClusterGatewayClient)(nil).PingGateway), varargs...)
}

// RemoveHost mocks base method.
func (m *MockClusterGatewayClient) RemoveHost(ctx context.Context, in *proto.HostId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveHost", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterGatewayClientMockRecorder) RemoveHost(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockClusterGatewayClient)(nil).RemoveHost), varargs...)
}

// SmrNodeAdded mocks base method.
func (m *MockClusterGatewayClient) SmrNodeAdded(ctx context.Context, in *proto.ReplicaInfo, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SmrNodeAdded", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmrNodeAdded indicates an expected call of SmrNodeAdded.
func (mr *MockClusterGatewayClientMockRecorder) SmrNodeAdded(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmrNodeAdded", reflect.TypeOf((*MockClusterGatewayClient)(nil).SmrNodeAdded), varargs...)
}

// SmrReady mocks base method.
func (m *MockClusterGatewayClient) SmrReady(ctx context.Context, in *proto.SmrReadyNotification, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SmrReady", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmrReady indicates an expected call of SmrReady.
func (mr *MockClusterGatewayClientMockRecorder) SmrReady(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmrReady", reflect.TypeOf((*MockClusterGatewayClient)(nil).SmrReady), varargs...)
}

// MockClusterGatewayServer is a mock of ClusterGatewayServer interface.
type MockClusterGatewayServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterGatewayServerMockRecorder
}

// MockClusterGatewayServerMockRecorder is the mock recorder for MockClusterGatewayServer.
type MockClusterGatewayServerMockRecorder struct {
	mock *MockClusterGatewayServer
}

// NewMockClusterGatewayServer creates a new mock instance.
func NewMockClusterGatewayServer(ctrl *gomock.Controller) *MockClusterGatewayServer {
	mock := &MockClusterGatewayServer{ctrl: ctrl}
	mock.recorder = &MockClusterGatewayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterGatewayServer) EXPECT() *MockClusterGatewayServerMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockClusterGatewayServer) ID(arg0 context.Context, arg1 *proto.Void) (*proto.ProvisionerId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0, arg1)
	ret0, _ := ret[0].(*proto.ProvisionerId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockClusterGatewayServerMockRecorder) ID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClusterGatewayServer)(nil).ID), arg0, arg1)
}

// MigrateKernelReplica mocks base method.
func (m *MockClusterGatewayServer) MigrateKernelReplica(arg0 context.Context, arg1 *proto.MigrationRequest) (*proto.MigrateKernelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateKernelReplica", arg0, arg1)
	ret0, _ := ret[0].(*proto.MigrateKernelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateKernelReplica indicates an expected call of MigrateKernelReplica.
func (mr *MockClusterGatewayServerMockRecorder) MigrateKernelReplica(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateKernelReplica", reflect.TypeOf((*MockClusterGatewayServer)(nil).MigrateKernelReplica), arg0, arg1)
}

// Notify mocks base method.
func (m *MockClusterGatewayServer) Notify(arg0 context.Context, arg1 *proto.Notification) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockClusterGatewayServerMockRecorder) Notify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockClusterGatewayServer)(nil).Notify), arg0, arg1)
}

// NotifyKernelRegistered mocks base method.
func (m *MockClusterGatewayServer) NotifyKernelRegistered(arg0 context.Context, arg1 *proto.KernelRegistrationNotification) (*proto.KernelRegistrationNotificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyKernelRegistered", arg0, arg1)
	ret0, _ := ret[0].(*proto.KernelRegistrationNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyKernelRegistered indicates an expected call of NotifyKernelRegistered.
func (mr *MockClusterGatewayServerMockRecorder) NotifyKernelRegistered(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyKernelRegistered", reflect.TypeOf((*MockClusterGatewayServer)(nil).NotifyKernelRegistered), arg0, arg1)
}

// PingGateway mocks base method.
func (m *MockClusterGatewayServer) PingGateway(arg0 context.Context, arg1 *proto.Void) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingGateway", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingGateway indicates an expected call of PingGateway.
func (mr *MockClusterGatewayServerMockRecorder) PingGateway(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingGateway", reflect.TypeOf((*MockClusterGatewayServer)(nil).PingGateway), arg0, arg1)
}

// RemoveHost mocks base method.
func (m *MockClusterGatewayServer) RemoveHost(arg0 context.Context, arg1 *proto.HostId) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHost", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterGatewayServerMockRecorder) RemoveHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockClusterGatewayServer)(nil).RemoveHost), arg0, arg1)
}

// SmrNodeAdded mocks base method.
func (m *MockClusterGatewayServer) SmrNodeAdded(arg0 context.Context, arg1 *proto.ReplicaInfo) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmrNodeAdded", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmrNodeAdded indicates an expected call of SmrNodeAdded.
func (mr *MockClusterGatewayServerMockRecorder) SmrNodeAdded(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmrNodeAdded", reflect.TypeOf((*MockClusterGatewayServer)(nil).SmrNodeAdded), arg0, arg1)
}

// SmrReady mocks base method.
func (m *MockClusterGatewayServer) SmrReady(arg0 context.Context, arg1 *proto.SmrReadyNotification) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmrReady", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmrReady indicates an expected call of SmrReady.
func (mr *MockClusterGatewayServerMockRecorder) SmrReady(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmrReady", reflect.TypeOf((*MockClusterGatewayServer)(nil).SmrReady), arg0, arg1)
}

// mustEmbedUnimplementedClusterGatewayServer mocks base method.
func (m *MockClusterGatewayServer) mustEmbedUnimplementedClusterGatewayServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterGatewayServer")
}

// mustEmbedUnimplementedClusterGatewayServer indicates an expected call of mustEmbedUnimplementedClusterGatewayServer.
func (mr *MockClusterGatewayServerMockRecorder) mustEmbedUnimplementedClusterGatewayServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterGatewayServer", reflect.TypeOf((*MockClusterGatewayServer)(nil).mustEmbedUnimplementedClusterGatewayServer))
}

// MockUnsafeClusterGatewayServer is a mock of UnsafeClusterGatewayServer interface.
type MockUnsafeClusterGatewayServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeClusterGatewayServerMockRecorder
}

// MockUnsafeClusterGatewayServerMockRecorder is the mock recorder for MockUnsafeClusterGatewayServer.
type MockUnsafeClusterGatewayServerMockRecorder struct {
	mock *MockUnsafeClusterGatewayServer
}

// NewMockUnsafeClusterGatewayServer creates a new mock instance.
func NewMockUnsafeClusterGatewayServer(ctrl *gomock.Controller) *MockUnsafeClusterGatewayServer {
	mock := &MockUnsafeClusterGatewayServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeClusterGatewayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeClusterGatewayServer) EXPECT() *MockUnsafeClusterGatewayServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedClusterGatewayServer mocks base method.
func (m *MockUnsafeClusterGatewayServer) mustEmbedUnimplementedClusterGatewayServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterGatewayServer")
}

// mustEmbedUnimplementedClusterGatewayServer indicates an expected call of mustEmbedUnimplementedClusterGatewayServer.
func (mr *MockUnsafeClusterGatewayServerMockRecorder) mustEmbedUnimplementedClusterGatewayServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterGatewayServer", reflect.TypeOf((*MockUnsafeClusterGatewayServer)(nil).mustEmbedUnimplementedClusterGatewayServer))
}

// MockDistributedClusterClient is a mock of DistributedClusterClient interface.
type MockDistributedClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedClusterClientMockRecorder
}

// MockDistributedClusterClientMockRecorder is the mock recorder for MockDistributedClusterClient.
type MockDistributedClusterClientMockRecorder struct {
	mock *MockDistributedClusterClient
}

// NewMockDistributedClusterClient creates a new mock instance.
func NewMockDistributedClusterClient(ctrl *gomock.Controller) *MockDistributedClusterClient {
	mock := &MockDistributedClusterClient{ctrl: ctrl}
	mock.recorder = &MockDistributedClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedClusterClient) EXPECT() *MockDistributedClusterClientMockRecorder {
	return m.recorder
}

// AddClusterNodes mocks base method.
func (m *MockDistributedClusterClient) AddClusterNodes(ctx context.Context, in *proto.AddClusterNodesRequest, opts ...grpc.CallOption) (*proto.AddClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddClusterNodes", varargs...)
	ret0, _ := ret[0].(*proto.AddClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterNodes indicates an expected call of AddClusterNodes.
func (mr *MockDistributedClusterClientMockRecorder) AddClusterNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).AddClusterNodes), varargs...)
}

// ClusterAge mocks base method.
func (m *MockDistributedClusterClient) ClusterAge(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.ClusterAgeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterAge", varargs...)
	ret0, _ := ret[0].(*proto.ClusterAgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterAge indicates an expected call of ClusterAge.
func (mr *MockDistributedClusterClientMockRecorder) ClusterAge(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAge", reflect.TypeOf((*MockDistributedClusterClient)(nil).ClusterAge), varargs...)
}

// FailNextExecution mocks base method.
func (m *MockDistributedClusterClient) FailNextExecution(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailNextExecution", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailNextExecution indicates an expected call of FailNextExecution.
func (mr *MockDistributedClusterClientMockRecorder) FailNextExecution(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailNextExecution", reflect.TypeOf((*MockDistributedClusterClient)(nil).FailNextExecution), varargs...)
}

// ForceLocalDaemonToReconnect mocks base method.
func (m *MockDistributedClusterClient) ForceLocalDaemonToReconnect(ctx context.Context, in *proto.ForceLocalDaemonToReconnectRequest, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForceLocalDaemonToReconnect", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceLocalDaemonToReconnect indicates an expected call of ForceLocalDaemonToReconnect.
func (mr *MockDistributedClusterClientMockRecorder) ForceLocalDaemonToReconnect(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceLocalDaemonToReconnect", reflect.TypeOf((*MockDistributedClusterClient)(nil).ForceLocalDaemonToReconnect), varargs...)
}

// GetClusterActualGpuInfo mocks base method.
func (m *MockDistributedClusterClient) GetClusterActualGpuInfo(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.ClusterActualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterActualGpuInfo", varargs...)
	ret0, _ := ret[0].(*proto.ClusterActualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterActualGpuInfo indicates an expected call of GetClusterActualGpuInfo.
func (mr *MockDistributedClusterClientMockRecorder) GetClusterActualGpuInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterActualGpuInfo", reflect.TypeOf((*MockDistributedClusterClient)(nil).GetClusterActualGpuInfo), varargs...)
}

// GetClusterVirtualGpuInfo mocks base method.
func (m *MockDistributedClusterClient) GetClusterVirtualGpuInfo(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.ClusterVirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterVirtualGpuInfo", varargs...)
	ret0, _ := ret[0].(*proto.ClusterVirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterVirtualGpuInfo indicates an expected call of GetClusterVirtualGpuInfo.
func (mr *MockDistributedClusterClientMockRecorder) GetClusterVirtualGpuInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterVirtualGpuInfo", reflect.TypeOf((*MockDistributedClusterClient)(nil).GetClusterVirtualGpuInfo), varargs...)
}

// GetDockerSwarmNodes mocks base method.
func (m *MockDistributedClusterClient) GetDockerSwarmNodes(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.GetDockerSwarmNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDockerSwarmNodes", varargs...)
	ret0, _ := ret[0].(*proto.GetDockerSwarmNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerSwarmNodes indicates an expected call of GetDockerSwarmNodes.
func (mr *MockDistributedClusterClientMockRecorder) GetDockerSwarmNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerSwarmNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).GetDockerSwarmNodes), varargs...)
}

// GetLocalDaemonNodeIDs mocks base method.
func (m *MockDistributedClusterClient) GetLocalDaemonNodeIDs(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.GetLocalDaemonNodeIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLocalDaemonNodeIDs", varargs...)
	ret0, _ := ret[0].(*proto.GetLocalDaemonNodeIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalDaemonNodeIDs indicates an expected call of GetLocalDaemonNodeIDs.
func (mr *MockDistributedClusterClientMockRecorder) GetLocalDaemonNodeIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDaemonNodeIDs", reflect.TypeOf((*MockDistributedClusterClient)(nil).GetLocalDaemonNodeIDs), varargs...)
}

// GetNumNodes mocks base method.
func (m *MockDistributedClusterClient) GetNumNodes(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.NumNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumNodes", varargs...)
	ret0, _ := ret[0].(*proto.NumNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumNodes indicates an expected call of GetNumNodes.
func (mr *MockDistributedClusterClientMockRecorder) GetNumNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).GetNumNodes), varargs...)
}

// GetVirtualDockerNodes mocks base method.
func (m *MockDistributedClusterClient) GetVirtualDockerNodes(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.GetVirtualDockerNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualDockerNodes", varargs...)
	ret0, _ := ret[0].(*proto.GetVirtualDockerNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualDockerNodes indicates an expected call of GetVirtualDockerNodes.
func (mr *MockDistributedClusterClientMockRecorder) GetVirtualDockerNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualDockerNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).GetVirtualDockerNodes), varargs...)
}

// InducePanic mocks base method.
func (m *MockDistributedClusterClient) InducePanic(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InducePanic", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InducePanic indicates an expected call of InducePanic.
func (mr *MockDistributedClusterClientMockRecorder) InducePanic(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InducePanic", reflect.TypeOf((*MockDistributedClusterClient)(nil).InducePanic), varargs...)
}

// ListKernels mocks base method.
func (m *MockDistributedClusterClient) ListKernels(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.ListKernelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKernels", varargs...)
	ret0, _ := ret[0].(*proto.ListKernelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKernels indicates an expected call of ListKernels.
func (mr *MockDistributedClusterClientMockRecorder) ListKernels(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKernels", reflect.TypeOf((*MockDistributedClusterClient)(nil).ListKernels), varargs...)
}

// MigrateKernelReplica mocks base method.
func (m *MockDistributedClusterClient) MigrateKernelReplica(ctx context.Context, in *proto.MigrationRequest, opts ...grpc.CallOption) (*proto.MigrateKernelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateKernelReplica", varargs...)
	ret0, _ := ret[0].(*proto.MigrateKernelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateKernelReplica indicates an expected call of MigrateKernelReplica.
func (mr *MockDistributedClusterClientMockRecorder) MigrateKernelReplica(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateKernelReplica", reflect.TypeOf((*MockDistributedClusterClient)(nil).MigrateKernelReplica), varargs...)
}

// ModifyClusterNodes mocks base method.
func (m *MockDistributedClusterClient) ModifyClusterNodes(ctx context.Context, in *proto.ModifyClusterNodesRequest, opts ...grpc.CallOption) (*proto.ModifyClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyClusterNodes", varargs...)
	ret0, _ := ret[0].(*proto.ModifyClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClusterNodes indicates an expected call of ModifyClusterNodes.
func (mr *MockDistributedClusterClientMockRecorder) ModifyClusterNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClusterNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).ModifyClusterNodes), varargs...)
}

// Ping mocks base method.
func (m *MockDistributedClusterClient) Ping(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockDistributedClusterClientMockRecorder) Ping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDistributedClusterClient)(nil).Ping), varargs...)
}

// PingKernel mocks base method.
func (m *MockDistributedClusterClient) PingKernel(ctx context.Context, in *proto.PingInstruction, opts ...grpc.CallOption) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingKernel", varargs...)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingKernel indicates an expected call of PingKernel.
func (mr *MockDistributedClusterClientMockRecorder) PingKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingKernel", reflect.TypeOf((*MockDistributedClusterClient)(nil).PingKernel), varargs...)
}

// QueryMessage mocks base method.
func (m *MockDistributedClusterClient) QueryMessage(ctx context.Context, in *proto.QueryMessageRequest, opts ...grpc.CallOption) (*proto.QueryMessageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryMessage", varargs...)
	ret0, _ := ret[0].(*proto.QueryMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMessage indicates an expected call of QueryMessage.
func (mr *MockDistributedClusterClientMockRecorder) QueryMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMessage", reflect.TypeOf((*MockDistributedClusterClient)(nil).QueryMessage), varargs...)
}

// RegisterDashboard mocks base method.
func (m *MockDistributedClusterClient) RegisterDashboard(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.DashboardRegistrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterDashboard", varargs...)
	ret0, _ := ret[0].(*proto.DashboardRegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDashboard indicates an expected call of RegisterDashboard.
func (mr *MockDistributedClusterClientMockRecorder) RegisterDashboard(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDashboard", reflect.TypeOf((*MockDistributedClusterClient)(nil).RegisterDashboard), varargs...)
}

// RemoveClusterNodes mocks base method.
func (m *MockDistributedClusterClient) RemoveClusterNodes(ctx context.Context, in *proto.RemoveClusterNodesRequest, opts ...grpc.CallOption) (*proto.RemoveClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveClusterNodes", varargs...)
	ret0, _ := ret[0].(*proto.RemoveClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveClusterNodes indicates an expected call of RemoveClusterNodes.
func (mr *MockDistributedClusterClientMockRecorder) RemoveClusterNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClusterNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).RemoveClusterNodes), varargs...)
}

// RemoveSpecificClusterNodes mocks base method.
func (m *MockDistributedClusterClient) RemoveSpecificClusterNodes(ctx context.Context, in *proto.RemoveSpecificClusterNodesRequest, opts ...grpc.CallOption) (*proto.RemoveSpecificClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSpecificClusterNodes", varargs...)
	ret0, _ := ret[0].(*proto.RemoveSpecificClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSpecificClusterNodes indicates an expected call of RemoveSpecificClusterNodes.
func (mr *MockDistributedClusterClientMockRecorder) RemoveSpecificClusterNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpecificClusterNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).RemoveSpecificClusterNodes), varargs...)
}

// SetNumClusterNodes mocks base method.
func (m *MockDistributedClusterClient) SetNumClusterNodes(ctx context.Context, in *proto.SetNumClusterNodesRequest, opts ...grpc.CallOption) (*proto.SetNumClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetNumClusterNodes", varargs...)
	ret0, _ := ret[0].(*proto.SetNumClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNumClusterNodes indicates an expected call of SetNumClusterNodes.
func (mr *MockDistributedClusterClientMockRecorder) SetNumClusterNodes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumClusterNodes", reflect.TypeOf((*MockDistributedClusterClient)(nil).SetNumClusterNodes), varargs...)
}

// SetTotalVirtualGPUs mocks base method.
func (m *MockDistributedClusterClient) SetTotalVirtualGPUs(ctx context.Context, in *proto.SetVirtualGPUsRequest, opts ...grpc.CallOption) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTotalVirtualGPUs", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTotalVirtualGPUs indicates an expected call of SetTotalVirtualGPUs.
func (mr *MockDistributedClusterClientMockRecorder) SetTotalVirtualGPUs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalVirtualGPUs", reflect.TypeOf((*MockDistributedClusterClient)(nil).SetTotalVirtualGPUs), varargs...)
}

// SpoofNotifications mocks base method.
func (m *MockDistributedClusterClient) SpoofNotifications(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpoofNotifications", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpoofNotifications indicates an expected call of SpoofNotifications.
func (mr *MockDistributedClusterClientMockRecorder) SpoofNotifications(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpoofNotifications", reflect.TypeOf((*MockDistributedClusterClient)(nil).SpoofNotifications), varargs...)
}

// MockDistributedClusterServer is a mock of DistributedClusterServer interface.
type MockDistributedClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedClusterServerMockRecorder
}

// MockDistributedClusterServerMockRecorder is the mock recorder for MockDistributedClusterServer.
type MockDistributedClusterServerMockRecorder struct {
	mock *MockDistributedClusterServer
}

// NewMockDistributedClusterServer creates a new mock instance.
func NewMockDistributedClusterServer(ctrl *gomock.Controller) *MockDistributedClusterServer {
	mock := &MockDistributedClusterServer{ctrl: ctrl}
	mock.recorder = &MockDistributedClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedClusterServer) EXPECT() *MockDistributedClusterServerMockRecorder {
	return m.recorder
}

// AddClusterNodes mocks base method.
func (m *MockDistributedClusterServer) AddClusterNodes(arg0 context.Context, arg1 *proto.AddClusterNodesRequest) (*proto.AddClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClusterNodes indicates an expected call of AddClusterNodes.
func (mr *MockDistributedClusterServerMockRecorder) AddClusterNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).AddClusterNodes), arg0, arg1)
}

// ClusterAge mocks base method.
func (m *MockDistributedClusterServer) ClusterAge(arg0 context.Context, arg1 *proto.Void) (*proto.ClusterAgeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAge", arg0, arg1)
	ret0, _ := ret[0].(*proto.ClusterAgeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterAge indicates an expected call of ClusterAge.
func (mr *MockDistributedClusterServerMockRecorder) ClusterAge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAge", reflect.TypeOf((*MockDistributedClusterServer)(nil).ClusterAge), arg0, arg1)
}

// FailNextExecution mocks base method.
func (m *MockDistributedClusterServer) FailNextExecution(arg0 context.Context, arg1 *proto.KernelId) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailNextExecution", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailNextExecution indicates an expected call of FailNextExecution.
func (mr *MockDistributedClusterServerMockRecorder) FailNextExecution(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailNextExecution", reflect.TypeOf((*MockDistributedClusterServer)(nil).FailNextExecution), arg0, arg1)
}

// ForceLocalDaemonToReconnect mocks base method.
func (m *MockDistributedClusterServer) ForceLocalDaemonToReconnect(arg0 context.Context, arg1 *proto.ForceLocalDaemonToReconnectRequest) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceLocalDaemonToReconnect", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForceLocalDaemonToReconnect indicates an expected call of ForceLocalDaemonToReconnect.
func (mr *MockDistributedClusterServerMockRecorder) ForceLocalDaemonToReconnect(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceLocalDaemonToReconnect", reflect.TypeOf((*MockDistributedClusterServer)(nil).ForceLocalDaemonToReconnect), arg0, arg1)
}

// GetClusterActualGpuInfo mocks base method.
func (m *MockDistributedClusterServer) GetClusterActualGpuInfo(arg0 context.Context, arg1 *proto.Void) (*proto.ClusterActualGpuInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterActualGpuInfo", arg0, arg1)
	ret0, _ := ret[0].(*proto.ClusterActualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterActualGpuInfo indicates an expected call of GetClusterActualGpuInfo.
func (mr *MockDistributedClusterServerMockRecorder) GetClusterActualGpuInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterActualGpuInfo", reflect.TypeOf((*MockDistributedClusterServer)(nil).GetClusterActualGpuInfo), arg0, arg1)
}

// GetClusterVirtualGpuInfo mocks base method.
func (m *MockDistributedClusterServer) GetClusterVirtualGpuInfo(arg0 context.Context, arg1 *proto.Void) (*proto.ClusterVirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterVirtualGpuInfo", arg0, arg1)
	ret0, _ := ret[0].(*proto.ClusterVirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterVirtualGpuInfo indicates an expected call of GetClusterVirtualGpuInfo.
func (mr *MockDistributedClusterServerMockRecorder) GetClusterVirtualGpuInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterVirtualGpuInfo", reflect.TypeOf((*MockDistributedClusterServer)(nil).GetClusterVirtualGpuInfo), arg0, arg1)
}

// GetDockerSwarmNodes mocks base method.
func (m *MockDistributedClusterServer) GetDockerSwarmNodes(arg0 context.Context, arg1 *proto.Void) (*proto.GetDockerSwarmNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerSwarmNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetDockerSwarmNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerSwarmNodes indicates an expected call of GetDockerSwarmNodes.
func (mr *MockDistributedClusterServerMockRecorder) GetDockerSwarmNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerSwarmNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).GetDockerSwarmNodes), arg0, arg1)
}

// GetLocalDaemonNodeIDs mocks base method.
func (m *MockDistributedClusterServer) GetLocalDaemonNodeIDs(arg0 context.Context, arg1 *proto.Void) (*proto.GetLocalDaemonNodeIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalDaemonNodeIDs", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetLocalDaemonNodeIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalDaemonNodeIDs indicates an expected call of GetLocalDaemonNodeIDs.
func (mr *MockDistributedClusterServerMockRecorder) GetLocalDaemonNodeIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDaemonNodeIDs", reflect.TypeOf((*MockDistributedClusterServer)(nil).GetLocalDaemonNodeIDs), arg0, arg1)
}

// GetNumNodes mocks base method.
func (m *MockDistributedClusterServer) GetNumNodes(arg0 context.Context, arg1 *proto.Void) (*proto.NumNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.NumNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumNodes indicates an expected call of GetNumNodes.
func (mr *MockDistributedClusterServerMockRecorder) GetNumNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).GetNumNodes), arg0, arg1)
}

// GetVirtualDockerNodes mocks base method.
func (m *MockDistributedClusterServer) GetVirtualDockerNodes(arg0 context.Context, arg1 *proto.Void) (*proto.GetVirtualDockerNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualDockerNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetVirtualDockerNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualDockerNodes indicates an expected call of GetVirtualDockerNodes.
func (mr *MockDistributedClusterServerMockRecorder) GetVirtualDockerNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualDockerNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).GetVirtualDockerNodes), arg0, arg1)
}

// InducePanic mocks base method.
func (m *MockDistributedClusterServer) InducePanic(arg0 context.Context, arg1 *proto.Void) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InducePanic", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InducePanic indicates an expected call of InducePanic.
func (mr *MockDistributedClusterServerMockRecorder) InducePanic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InducePanic", reflect.TypeOf((*MockDistributedClusterServer)(nil).InducePanic), arg0, arg1)
}

// ListKernels mocks base method.
func (m *MockDistributedClusterServer) ListKernels(arg0 context.Context, arg1 *proto.Void) (*proto.ListKernelsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKernels", arg0, arg1)
	ret0, _ := ret[0].(*proto.ListKernelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKernels indicates an expected call of ListKernels.
func (mr *MockDistributedClusterServerMockRecorder) ListKernels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKernels", reflect.TypeOf((*MockDistributedClusterServer)(nil).ListKernels), arg0, arg1)
}

// MigrateKernelReplica mocks base method.
func (m *MockDistributedClusterServer) MigrateKernelReplica(arg0 context.Context, arg1 *proto.MigrationRequest) (*proto.MigrateKernelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateKernelReplica", arg0, arg1)
	ret0, _ := ret[0].(*proto.MigrateKernelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateKernelReplica indicates an expected call of MigrateKernelReplica.
func (mr *MockDistributedClusterServerMockRecorder) MigrateKernelReplica(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateKernelReplica", reflect.TypeOf((*MockDistributedClusterServer)(nil).MigrateKernelReplica), arg0, arg1)
}

// ModifyClusterNodes mocks base method.
func (m *MockDistributedClusterServer) ModifyClusterNodes(arg0 context.Context, arg1 *proto.ModifyClusterNodesRequest) (*proto.ModifyClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyClusterNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.ModifyClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyClusterNodes indicates an expected call of ModifyClusterNodes.
func (mr *MockDistributedClusterServerMockRecorder) ModifyClusterNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyClusterNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).ModifyClusterNodes), arg0, arg1)
}

// Ping mocks base method.
func (m *MockDistributedClusterServer) Ping(arg0 context.Context, arg1 *proto.Void) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockDistributedClusterServerMockRecorder) Ping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDistributedClusterServer)(nil).Ping), arg0, arg1)
}

// PingKernel mocks base method.
func (m *MockDistributedClusterServer) PingKernel(arg0 context.Context, arg1 *proto.PingInstruction) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingKernel", arg0, arg1)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingKernel indicates an expected call of PingKernel.
func (mr *MockDistributedClusterServerMockRecorder) PingKernel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingKernel", reflect.TypeOf((*MockDistributedClusterServer)(nil).PingKernel), arg0, arg1)
}

// QueryMessage mocks base method.
func (m *MockDistributedClusterServer) QueryMessage(arg0 context.Context, arg1 *proto.QueryMessageRequest) (*proto.QueryMessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMessage", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMessage indicates an expected call of QueryMessage.
func (mr *MockDistributedClusterServerMockRecorder) QueryMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMessage", reflect.TypeOf((*MockDistributedClusterServer)(nil).QueryMessage), arg0, arg1)
}

// RegisterDashboard mocks base method.
func (m *MockDistributedClusterServer) RegisterDashboard(arg0 context.Context, arg1 *proto.Void) (*proto.DashboardRegistrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDashboard", arg0, arg1)
	ret0, _ := ret[0].(*proto.DashboardRegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDashboard indicates an expected call of RegisterDashboard.
func (mr *MockDistributedClusterServerMockRecorder) RegisterDashboard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDashboard", reflect.TypeOf((*MockDistributedClusterServer)(nil).RegisterDashboard), arg0, arg1)
}

// RemoveClusterNodes mocks base method.
func (m *MockDistributedClusterServer) RemoveClusterNodes(arg0 context.Context, arg1 *proto.RemoveClusterNodesRequest) (*proto.RemoveClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClusterNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.RemoveClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveClusterNodes indicates an expected call of RemoveClusterNodes.
func (mr *MockDistributedClusterServerMockRecorder) RemoveClusterNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClusterNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).RemoveClusterNodes), arg0, arg1)
}

// RemoveSpecificClusterNodes mocks base method.
func (m *MockDistributedClusterServer) RemoveSpecificClusterNodes(arg0 context.Context, arg1 *proto.RemoveSpecificClusterNodesRequest) (*proto.RemoveSpecificClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSpecificClusterNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.RemoveSpecificClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSpecificClusterNodes indicates an expected call of RemoveSpecificClusterNodes.
func (mr *MockDistributedClusterServerMockRecorder) RemoveSpecificClusterNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSpecificClusterNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).RemoveSpecificClusterNodes), arg0, arg1)
}

// SetNumClusterNodes mocks base method.
func (m *MockDistributedClusterServer) SetNumClusterNodes(arg0 context.Context, arg1 *proto.SetNumClusterNodesRequest) (*proto.SetNumClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNumClusterNodes", arg0, arg1)
	ret0, _ := ret[0].(*proto.SetNumClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNumClusterNodes indicates an expected call of SetNumClusterNodes.
func (mr *MockDistributedClusterServerMockRecorder) SetNumClusterNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumClusterNodes", reflect.TypeOf((*MockDistributedClusterServer)(nil).SetNumClusterNodes), arg0, arg1)
}

// SetTotalVirtualGPUs mocks base method.
func (m *MockDistributedClusterServer) SetTotalVirtualGPUs(arg0 context.Context, arg1 *proto.SetVirtualGPUsRequest) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTotalVirtualGPUs", arg0, arg1)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTotalVirtualGPUs indicates an expected call of SetTotalVirtualGPUs.
func (mr *MockDistributedClusterServerMockRecorder) SetTotalVirtualGPUs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalVirtualGPUs", reflect.TypeOf((*MockDistributedClusterServer)(nil).SetTotalVirtualGPUs), arg0, arg1)
}

// SpoofNotifications mocks base method.
func (m *MockDistributedClusterServer) SpoofNotifications(arg0 context.Context, arg1 *proto.Void) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpoofNotifications", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpoofNotifications indicates an expected call of SpoofNotifications.
func (mr *MockDistributedClusterServerMockRecorder) SpoofNotifications(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpoofNotifications", reflect.TypeOf((*MockDistributedClusterServer)(nil).SpoofNotifications), arg0, arg1)
}

// mustEmbedUnimplementedDistributedClusterServer mocks base method.
func (m *MockDistributedClusterServer) mustEmbedUnimplementedDistributedClusterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedClusterServer")
}

// mustEmbedUnimplementedDistributedClusterServer indicates an expected call of mustEmbedUnimplementedDistributedClusterServer.
func (mr *MockDistributedClusterServerMockRecorder) mustEmbedUnimplementedDistributedClusterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedClusterServer", reflect.TypeOf((*MockDistributedClusterServer)(nil).mustEmbedUnimplementedDistributedClusterServer))
}

// MockUnsafeDistributedClusterServer is a mock of UnsafeDistributedClusterServer interface.
type MockUnsafeDistributedClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDistributedClusterServerMockRecorder
}

// MockUnsafeDistributedClusterServerMockRecorder is the mock recorder for MockUnsafeDistributedClusterServer.
type MockUnsafeDistributedClusterServerMockRecorder struct {
	mock *MockUnsafeDistributedClusterServer
}

// NewMockUnsafeDistributedClusterServer creates a new mock instance.
func NewMockUnsafeDistributedClusterServer(ctrl *gomock.Controller) *MockUnsafeDistributedClusterServer {
	mock := &MockUnsafeDistributedClusterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDistributedClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDistributedClusterServer) EXPECT() *MockUnsafeDistributedClusterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDistributedClusterServer mocks base method.
func (m *MockUnsafeDistributedClusterServer) mustEmbedUnimplementedDistributedClusterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDistributedClusterServer")
}

// mustEmbedUnimplementedDistributedClusterServer indicates an expected call of mustEmbedUnimplementedDistributedClusterServer.
func (mr *MockUnsafeDistributedClusterServerMockRecorder) mustEmbedUnimplementedDistributedClusterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDistributedClusterServer", reflect.TypeOf((*MockUnsafeDistributedClusterServer)(nil).mustEmbedUnimplementedDistributedClusterServer))
}

// MockClusterDashboardClient is a mock of ClusterDashboardClient interface.
type MockClusterDashboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDashboardClientMockRecorder
}

// MockClusterDashboardClientMockRecorder is the mock recorder for MockClusterDashboardClient.
type MockClusterDashboardClientMockRecorder struct {
	mock *MockClusterDashboardClient
}

// NewMockClusterDashboardClient creates a new mock instance.
func NewMockClusterDashboardClient(ctrl *gomock.Controller) *MockClusterDashboardClient {
	mock := &MockClusterDashboardClient{ctrl: ctrl}
	mock.recorder = &MockClusterDashboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDashboardClient) EXPECT() *MockClusterDashboardClientMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockClusterDashboardClient) SendNotification(ctx context.Context, in *proto.Notification, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendNotification", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockClusterDashboardClientMockRecorder) SendNotification(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockClusterDashboardClient)(nil).SendNotification), varargs...)
}

// MockClusterDashboardServer is a mock of ClusterDashboardServer interface.
type MockClusterDashboardServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDashboardServerMockRecorder
}

// MockClusterDashboardServerMockRecorder is the mock recorder for MockClusterDashboardServer.
type MockClusterDashboardServerMockRecorder struct {
	mock *MockClusterDashboardServer
}

// NewMockClusterDashboardServer creates a new mock instance.
func NewMockClusterDashboardServer(ctrl *gomock.Controller) *MockClusterDashboardServer {
	mock := &MockClusterDashboardServer{ctrl: ctrl}
	mock.recorder = &MockClusterDashboardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDashboardServer) EXPECT() *MockClusterDashboardServerMockRecorder {
	return m.recorder
}

// SendNotification mocks base method.
func (m *MockClusterDashboardServer) SendNotification(arg0 context.Context, arg1 *proto.Notification) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockClusterDashboardServerMockRecorder) SendNotification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockClusterDashboardServer)(nil).SendNotification), arg0, arg1)
}

// mustEmbedUnimplementedClusterDashboardServer mocks base method.
func (m *MockClusterDashboardServer) mustEmbedUnimplementedClusterDashboardServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterDashboardServer")
}

// mustEmbedUnimplementedClusterDashboardServer indicates an expected call of mustEmbedUnimplementedClusterDashboardServer.
func (mr *MockClusterDashboardServerMockRecorder) mustEmbedUnimplementedClusterDashboardServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterDashboardServer", reflect.TypeOf((*MockClusterDashboardServer)(nil).mustEmbedUnimplementedClusterDashboardServer))
}

// MockUnsafeClusterDashboardServer is a mock of UnsafeClusterDashboardServer interface.
type MockUnsafeClusterDashboardServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeClusterDashboardServerMockRecorder
}

// MockUnsafeClusterDashboardServerMockRecorder is the mock recorder for MockUnsafeClusterDashboardServer.
type MockUnsafeClusterDashboardServerMockRecorder struct {
	mock *MockUnsafeClusterDashboardServer
}

// NewMockUnsafeClusterDashboardServer creates a new mock instance.
func NewMockUnsafeClusterDashboardServer(ctrl *gomock.Controller) *MockUnsafeClusterDashboardServer {
	mock := &MockUnsafeClusterDashboardServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeClusterDashboardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeClusterDashboardServer) EXPECT() *MockUnsafeClusterDashboardServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedClusterDashboardServer mocks base method.
func (m *MockUnsafeClusterDashboardServer) mustEmbedUnimplementedClusterDashboardServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClusterDashboardServer")
}

// mustEmbedUnimplementedClusterDashboardServer indicates an expected call of mustEmbedUnimplementedClusterDashboardServer.
func (mr *MockUnsafeClusterDashboardServerMockRecorder) mustEmbedUnimplementedClusterDashboardServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClusterDashboardServer", reflect.TypeOf((*MockUnsafeClusterDashboardServer)(nil).mustEmbedUnimplementedClusterDashboardServer))
}

// MockKernelErrorReporterClient is a mock of KernelErrorReporterClient interface.
type MockKernelErrorReporterClient struct {
	ctrl     *gomock.Controller
	recorder *MockKernelErrorReporterClientMockRecorder
}

// MockKernelErrorReporterClientMockRecorder is the mock recorder for MockKernelErrorReporterClient.
type MockKernelErrorReporterClientMockRecorder struct {
	mock *MockKernelErrorReporterClient
}

// NewMockKernelErrorReporterClient creates a new mock instance.
func NewMockKernelErrorReporterClient(ctrl *gomock.Controller) *MockKernelErrorReporterClient {
	mock := &MockKernelErrorReporterClient{ctrl: ctrl}
	mock.recorder = &MockKernelErrorReporterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelErrorReporterClient) EXPECT() *MockKernelErrorReporterClientMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockKernelErrorReporterClient) Notify(ctx context.Context, in *proto.KernelNotification, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Notify", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockKernelErrorReporterClientMockRecorder) Notify(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockKernelErrorReporterClient)(nil).Notify), varargs...)
}

// MockKernelErrorReporterServer is a mock of KernelErrorReporterServer interface.
type MockKernelErrorReporterServer struct {
	ctrl     *gomock.Controller
	recorder *MockKernelErrorReporterServerMockRecorder
}

// MockKernelErrorReporterServerMockRecorder is the mock recorder for MockKernelErrorReporterServer.
type MockKernelErrorReporterServerMockRecorder struct {
	mock *MockKernelErrorReporterServer
}

// NewMockKernelErrorReporterServer creates a new mock instance.
func NewMockKernelErrorReporterServer(ctrl *gomock.Controller) *MockKernelErrorReporterServer {
	mock := &MockKernelErrorReporterServer{ctrl: ctrl}
	mock.recorder = &MockKernelErrorReporterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelErrorReporterServer) EXPECT() *MockKernelErrorReporterServerMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockKernelErrorReporterServer) Notify(arg0 context.Context, arg1 *proto.KernelNotification) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockKernelErrorReporterServerMockRecorder) Notify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockKernelErrorReporterServer)(nil).Notify), arg0, arg1)
}

// mustEmbedUnimplementedKernelErrorReporterServer mocks base method.
func (m *MockKernelErrorReporterServer) mustEmbedUnimplementedKernelErrorReporterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKernelErrorReporterServer")
}

// mustEmbedUnimplementedKernelErrorReporterServer indicates an expected call of mustEmbedUnimplementedKernelErrorReporterServer.
func (mr *MockKernelErrorReporterServerMockRecorder) mustEmbedUnimplementedKernelErrorReporterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKernelErrorReporterServer", reflect.TypeOf((*MockKernelErrorReporterServer)(nil).mustEmbedUnimplementedKernelErrorReporterServer))
}

// MockUnsafeKernelErrorReporterServer is a mock of UnsafeKernelErrorReporterServer interface.
type MockUnsafeKernelErrorReporterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKernelErrorReporterServerMockRecorder
}

// MockUnsafeKernelErrorReporterServerMockRecorder is the mock recorder for MockUnsafeKernelErrorReporterServer.
type MockUnsafeKernelErrorReporterServerMockRecorder struct {
	mock *MockUnsafeKernelErrorReporterServer
}

// NewMockUnsafeKernelErrorReporterServer creates a new mock instance.
func NewMockUnsafeKernelErrorReporterServer(ctrl *gomock.Controller) *MockUnsafeKernelErrorReporterServer {
	mock := &MockUnsafeKernelErrorReporterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKernelErrorReporterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKernelErrorReporterServer) EXPECT() *MockUnsafeKernelErrorReporterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKernelErrorReporterServer mocks base method.
func (m *MockUnsafeKernelErrorReporterServer) mustEmbedUnimplementedKernelErrorReporterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKernelErrorReporterServer")
}

// mustEmbedUnimplementedKernelErrorReporterServer indicates an expected call of mustEmbedUnimplementedKernelErrorReporterServer.
func (mr *MockUnsafeKernelErrorReporterServerMockRecorder) mustEmbedUnimplementedKernelErrorReporterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKernelErrorReporterServer", reflect.TypeOf((*MockUnsafeKernelErrorReporterServer)(nil).mustEmbedUnimplementedKernelErrorReporterServer))
}

// MockLocalGatewayClient is a mock of LocalGatewayClient interface.
type MockLocalGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockLocalGatewayClientMockRecorder
}

// MockLocalGatewayClientMockRecorder is the mock recorder for MockLocalGatewayClient.
type MockLocalGatewayClientMockRecorder struct {
	mock *MockLocalGatewayClient
}

// NewMockLocalGatewayClient creates a new mock instance.
func NewMockLocalGatewayClient(ctrl *gomock.Controller) *MockLocalGatewayClient {
	mock := &MockLocalGatewayClient{ctrl: ctrl}
	mock.recorder = &MockLocalGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalGatewayClient) EXPECT() *MockLocalGatewayClientMockRecorder {
	return m.recorder
}

// AddReplica mocks base method.
func (m *MockLocalGatewayClient) AddReplica(ctx context.Context, in *proto.ReplicaInfoWithAddr, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddReplica", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockLocalGatewayClientMockRecorder) AddReplica(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockLocalGatewayClient)(nil).AddReplica), varargs...)
}

// GetActualGpuInfo mocks base method.
func (m *MockLocalGatewayClient) GetActualGpuInfo(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.GpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActualGpuInfo", varargs...)
	ret0, _ := ret[0].(*proto.GpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualGpuInfo indicates an expected call of GetActualGpuInfo.
func (mr *MockLocalGatewayClientMockRecorder) GetActualGpuInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualGpuInfo", reflect.TypeOf((*MockLocalGatewayClient)(nil).GetActualGpuInfo), varargs...)
}

// GetKernelStatus mocks base method.
func (m *MockLocalGatewayClient) GetKernelStatus(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.KernelStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKernelStatus", varargs...)
	ret0, _ := ret[0].(*proto.KernelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKernelStatus indicates an expected call of GetKernelStatus.
func (mr *MockLocalGatewayClientMockRecorder) GetKernelStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKernelStatus", reflect.TypeOf((*MockLocalGatewayClient)(nil).GetKernelStatus), varargs...)
}

// GetVirtualGpuAllocations mocks base method.
func (m *MockLocalGatewayClient) GetVirtualGpuAllocations(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.VirtualGpuAllocations, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualGpuAllocations", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuAllocations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGpuAllocations indicates an expected call of GetVirtualGpuAllocations.
func (mr *MockLocalGatewayClientMockRecorder) GetVirtualGpuAllocations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGpuAllocations", reflect.TypeOf((*MockLocalGatewayClient)(nil).GetVirtualGpuAllocations), varargs...)
}

// GetVirtualGpuInfo mocks base method.
func (m *MockLocalGatewayClient) GetVirtualGpuInfo(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualGpuInfo", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGpuInfo indicates an expected call of GetVirtualGpuInfo.
func (mr *MockLocalGatewayClientMockRecorder) GetVirtualGpuInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGpuInfo", reflect.TypeOf((*MockLocalGatewayClient)(nil).GetVirtualGpuInfo), varargs...)
}

// KillKernel mocks base method.
func (m *MockLocalGatewayClient) KillKernel(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KillKernel", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillKernel indicates an expected call of KillKernel.
func (mr *MockLocalGatewayClientMockRecorder) KillKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillKernel", reflect.TypeOf((*MockLocalGatewayClient)(nil).KillKernel), varargs...)
}

// PingKernel mocks base method.
func (m *MockLocalGatewayClient) PingKernel(ctx context.Context, in *proto.PingInstruction, opts ...grpc.CallOption) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingKernel", varargs...)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingKernel indicates an expected call of PingKernel.
func (mr *MockLocalGatewayClientMockRecorder) PingKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingKernel", reflect.TypeOf((*MockLocalGatewayClient)(nil).PingKernel), varargs...)
}

// PrepareToMigrate mocks base method.
func (m *MockLocalGatewayClient) PrepareToMigrate(ctx context.Context, in *proto.ReplicaInfo, opts ...grpc.CallOption) (*proto.PrepareToMigrateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareToMigrate", varargs...)
	ret0, _ := ret[0].(*proto.PrepareToMigrateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareToMigrate indicates an expected call of PrepareToMigrate.
func (mr *MockLocalGatewayClientMockRecorder) PrepareToMigrate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareToMigrate", reflect.TypeOf((*MockLocalGatewayClient)(nil).PrepareToMigrate), varargs...)
}

// ReconnectToGateway mocks base method.
func (m *MockLocalGatewayClient) ReconnectToGateway(ctx context.Context, in *proto.ReconnectToGatewayRequest, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReconnectToGateway", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectToGateway indicates an expected call of ReconnectToGateway.
func (mr *MockLocalGatewayClientMockRecorder) ReconnectToGateway(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectToGateway", reflect.TypeOf((*MockLocalGatewayClient)(nil).ReconnectToGateway), varargs...)
}

// ResourcesSnapshot mocks base method.
func (m *MockLocalGatewayClient) ResourcesSnapshot(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.NodeResourcesSnapshotWithContainers, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResourcesSnapshot", varargs...)
	ret0, _ := ret[0].(*proto.NodeResourcesSnapshotWithContainers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesSnapshot indicates an expected call of ResourcesSnapshot.
func (mr *MockLocalGatewayClientMockRecorder) ResourcesSnapshot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesSnapshot", reflect.TypeOf((*MockLocalGatewayClient)(nil).ResourcesSnapshot), varargs...)
}

// SetClose mocks base method.
func (m *MockLocalGatewayClient) SetClose(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetClose", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClose indicates an expected call of SetClose.
func (mr *MockLocalGatewayClientMockRecorder) SetClose(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClose", reflect.TypeOf((*MockLocalGatewayClient)(nil).SetClose), varargs...)
}

// SetID mocks base method.
func (m *MockLocalGatewayClient) SetID(ctx context.Context, in *proto.HostId, opts ...grpc.CallOption) (*proto.HostId, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetID", varargs...)
	ret0, _ := ret[0].(*proto.HostId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetID indicates an expected call of SetID.
func (mr *MockLocalGatewayClientMockRecorder) SetID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockLocalGatewayClient)(nil).SetID), varargs...)
}

// SetTotalVirtualGPUs mocks base method.
func (m *MockLocalGatewayClient) SetTotalVirtualGPUs(ctx context.Context, in *proto.SetVirtualGPUsRequest, opts ...grpc.CallOption) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTotalVirtualGPUs", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTotalVirtualGPUs indicates an expected call of SetTotalVirtualGPUs.
func (mr *MockLocalGatewayClientMockRecorder) SetTotalVirtualGPUs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalVirtualGPUs", reflect.TypeOf((*MockLocalGatewayClient)(nil).SetTotalVirtualGPUs), varargs...)
}

// StartKernel mocks base method.
func (m *MockLocalGatewayClient) StartKernel(ctx context.Context, in *proto.KernelSpec, opts ...grpc.CallOption) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartKernel", varargs...)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKernel indicates an expected call of StartKernel.
func (mr *MockLocalGatewayClientMockRecorder) StartKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKernel", reflect.TypeOf((*MockLocalGatewayClient)(nil).StartKernel), varargs...)
}

// StartKernelReplica mocks base method.
func (m *MockLocalGatewayClient) StartKernelReplica(ctx context.Context, in *proto.KernelReplicaSpec, opts ...grpc.CallOption) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartKernelReplica", varargs...)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKernelReplica indicates an expected call of StartKernelReplica.
func (mr *MockLocalGatewayClientMockRecorder) StartKernelReplica(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKernelReplica", reflect.TypeOf((*MockLocalGatewayClient)(nil).StartKernelReplica), varargs...)
}

// StopKernel mocks base method.
func (m *MockLocalGatewayClient) StopKernel(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopKernel", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKernel indicates an expected call of StopKernel.
func (mr *MockLocalGatewayClientMockRecorder) StopKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKernel", reflect.TypeOf((*MockLocalGatewayClient)(nil).StopKernel), varargs...)
}

// UpdateReplicaAddr mocks base method.
func (m *MockLocalGatewayClient) UpdateReplicaAddr(ctx context.Context, in *proto.ReplicaInfoWithAddr, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicaAddr", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicaAddr indicates an expected call of UpdateReplicaAddr.
func (mr *MockLocalGatewayClientMockRecorder) UpdateReplicaAddr(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicaAddr", reflect.TypeOf((*MockLocalGatewayClient)(nil).UpdateReplicaAddr), varargs...)
}

// WaitKernel mocks base method.
func (m *MockLocalGatewayClient) WaitKernel(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.KernelStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitKernel", varargs...)
	ret0, _ := ret[0].(*proto.KernelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitKernel indicates an expected call of WaitKernel.
func (mr *MockLocalGatewayClientMockRecorder) WaitKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitKernel", reflect.TypeOf((*MockLocalGatewayClient)(nil).WaitKernel), varargs...)
}

// YieldNextExecution mocks base method.
func (m *MockLocalGatewayClient) YieldNextExecution(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "YieldNextExecution", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// YieldNextExecution indicates an expected call of YieldNextExecution.
func (mr *MockLocalGatewayClientMockRecorder) YieldNextExecution(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecution", reflect.TypeOf((*MockLocalGatewayClient)(nil).YieldNextExecution), varargs...)
}

// MockLocalGatewayServer is a mock of LocalGatewayServer interface.
type MockLocalGatewayServer struct {
	ctrl     *gomock.Controller
	recorder *MockLocalGatewayServerMockRecorder
}

// MockLocalGatewayServerMockRecorder is the mock recorder for MockLocalGatewayServer.
type MockLocalGatewayServerMockRecorder struct {
	mock *MockLocalGatewayServer
}

// NewMockLocalGatewayServer creates a new mock instance.
func NewMockLocalGatewayServer(ctrl *gomock.Controller) *MockLocalGatewayServer {
	mock := &MockLocalGatewayServer{ctrl: ctrl}
	mock.recorder = &MockLocalGatewayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalGatewayServer) EXPECT() *MockLocalGatewayServerMockRecorder {
	return m.recorder
}

// AddReplica mocks base method.
func (m *MockLocalGatewayServer) AddReplica(arg0 context.Context, arg1 *proto.ReplicaInfoWithAddr) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockLocalGatewayServerMockRecorder) AddReplica(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockLocalGatewayServer)(nil).AddReplica), arg0, arg1)
}

// GetActualGpuInfo mocks base method.
func (m *MockLocalGatewayServer) GetActualGpuInfo(arg0 context.Context, arg1 *proto.Void) (*proto.GpuInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualGpuInfo", arg0, arg1)
	ret0, _ := ret[0].(*proto.GpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualGpuInfo indicates an expected call of GetActualGpuInfo.
func (mr *MockLocalGatewayServerMockRecorder) GetActualGpuInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualGpuInfo", reflect.TypeOf((*MockLocalGatewayServer)(nil).GetActualGpuInfo), arg0, arg1)
}

// GetKernelStatus mocks base method.
func (m *MockLocalGatewayServer) GetKernelStatus(arg0 context.Context, arg1 *proto.KernelId) (*proto.KernelStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKernelStatus", arg0, arg1)
	ret0, _ := ret[0].(*proto.KernelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKernelStatus indicates an expected call of GetKernelStatus.
func (mr *MockLocalGatewayServerMockRecorder) GetKernelStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKernelStatus", reflect.TypeOf((*MockLocalGatewayServer)(nil).GetKernelStatus), arg0, arg1)
}

// GetVirtualGpuAllocations mocks base method.
func (m *MockLocalGatewayServer) GetVirtualGpuAllocations(arg0 context.Context, arg1 *proto.Void) (*proto.VirtualGpuAllocations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualGpuAllocations", arg0, arg1)
	ret0, _ := ret[0].(*proto.VirtualGpuAllocations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGpuAllocations indicates an expected call of GetVirtualGpuAllocations.
func (mr *MockLocalGatewayServerMockRecorder) GetVirtualGpuAllocations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGpuAllocations", reflect.TypeOf((*MockLocalGatewayServer)(nil).GetVirtualGpuAllocations), arg0, arg1)
}

// GetVirtualGpuInfo mocks base method.
func (m *MockLocalGatewayServer) GetVirtualGpuInfo(arg0 context.Context, arg1 *proto.Void) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualGpuInfo", arg0, arg1)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGpuInfo indicates an expected call of GetVirtualGpuInfo.
func (mr *MockLocalGatewayServerMockRecorder) GetVirtualGpuInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGpuInfo", reflect.TypeOf((*MockLocalGatewayServer)(nil).GetVirtualGpuInfo), arg0, arg1)
}

// KillKernel mocks base method.
func (m *MockLocalGatewayServer) KillKernel(arg0 context.Context, arg1 *proto.KernelId) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillKernel", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillKernel indicates an expected call of KillKernel.
func (mr *MockLocalGatewayServerMockRecorder) KillKernel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillKernel", reflect.TypeOf((*MockLocalGatewayServer)(nil).KillKernel), arg0, arg1)
}

// PingKernel mocks base method.
func (m *MockLocalGatewayServer) PingKernel(arg0 context.Context, arg1 *proto.PingInstruction) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingKernel", arg0, arg1)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingKernel indicates an expected call of PingKernel.
func (mr *MockLocalGatewayServerMockRecorder) PingKernel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingKernel", reflect.TypeOf((*MockLocalGatewayServer)(nil).PingKernel), arg0, arg1)
}

// PrepareToMigrate mocks base method.
func (m *MockLocalGatewayServer) PrepareToMigrate(arg0 context.Context, arg1 *proto.ReplicaInfo) (*proto.PrepareToMigrateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareToMigrate", arg0, arg1)
	ret0, _ := ret[0].(*proto.PrepareToMigrateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareToMigrate indicates an expected call of PrepareToMigrate.
func (mr *MockLocalGatewayServerMockRecorder) PrepareToMigrate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareToMigrate", reflect.TypeOf((*MockLocalGatewayServer)(nil).PrepareToMigrate), arg0, arg1)
}

// ReconnectToGateway mocks base method.
func (m *MockLocalGatewayServer) ReconnectToGateway(arg0 context.Context, arg1 *proto.ReconnectToGatewayRequest) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconnectToGateway", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectToGateway indicates an expected call of ReconnectToGateway.
func (mr *MockLocalGatewayServerMockRecorder) ReconnectToGateway(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectToGateway", reflect.TypeOf((*MockLocalGatewayServer)(nil).ReconnectToGateway), arg0, arg1)
}

// ResourcesSnapshot mocks base method.
func (m *MockLocalGatewayServer) ResourcesSnapshot(arg0 context.Context, arg1 *proto.Void) (*proto.NodeResourcesSnapshotWithContainers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*proto.NodeResourcesSnapshotWithContainers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesSnapshot indicates an expected call of ResourcesSnapshot.
func (mr *MockLocalGatewayServerMockRecorder) ResourcesSnapshot(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesSnapshot", reflect.TypeOf((*MockLocalGatewayServer)(nil).ResourcesSnapshot), arg0, arg1)
}

// SetClose mocks base method.
func (m *MockLocalGatewayServer) SetClose(arg0 context.Context, arg1 *proto.Void) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClose", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClose indicates an expected call of SetClose.
func (mr *MockLocalGatewayServerMockRecorder) SetClose(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClose", reflect.TypeOf((*MockLocalGatewayServer)(nil).SetClose), arg0, arg1)
}

// SetID mocks base method.
func (m *MockLocalGatewayServer) SetID(arg0 context.Context, arg1 *proto.HostId) (*proto.HostId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetID", arg0, arg1)
	ret0, _ := ret[0].(*proto.HostId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetID indicates an expected call of SetID.
func (mr *MockLocalGatewayServerMockRecorder) SetID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockLocalGatewayServer)(nil).SetID), arg0, arg1)
}

// SetTotalVirtualGPUs mocks base method.
func (m *MockLocalGatewayServer) SetTotalVirtualGPUs(arg0 context.Context, arg1 *proto.SetVirtualGPUsRequest) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTotalVirtualGPUs", arg0, arg1)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTotalVirtualGPUs indicates an expected call of SetTotalVirtualGPUs.
func (mr *MockLocalGatewayServerMockRecorder) SetTotalVirtualGPUs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalVirtualGPUs", reflect.TypeOf((*MockLocalGatewayServer)(nil).SetTotalVirtualGPUs), arg0, arg1)
}

// StartKernel mocks base method.
func (m *MockLocalGatewayServer) StartKernel(arg0 context.Context, arg1 *proto.KernelSpec) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartKernel", arg0, arg1)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKernel indicates an expected call of StartKernel.
func (mr *MockLocalGatewayServerMockRecorder) StartKernel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKernel", reflect.TypeOf((*MockLocalGatewayServer)(nil).StartKernel), arg0, arg1)
}

// StartKernelReplica mocks base method.
func (m *MockLocalGatewayServer) StartKernelReplica(arg0 context.Context, arg1 *proto.KernelReplicaSpec) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartKernelReplica", arg0, arg1)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKernelReplica indicates an expected call of StartKernelReplica.
func (mr *MockLocalGatewayServerMockRecorder) StartKernelReplica(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKernelReplica", reflect.TypeOf((*MockLocalGatewayServer)(nil).StartKernelReplica), arg0, arg1)
}

// StopKernel mocks base method.
func (m *MockLocalGatewayServer) StopKernel(arg0 context.Context, arg1 *proto.KernelId) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKernel", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKernel indicates an expected call of StopKernel.
func (mr *MockLocalGatewayServerMockRecorder) StopKernel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKernel", reflect.TypeOf((*MockLocalGatewayServer)(nil).StopKernel), arg0, arg1)
}

// UpdateReplicaAddr mocks base method.
func (m *MockLocalGatewayServer) UpdateReplicaAddr(arg0 context.Context, arg1 *proto.ReplicaInfoWithAddr) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicaAddr", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicaAddr indicates an expected call of UpdateReplicaAddr.
func (mr *MockLocalGatewayServerMockRecorder) UpdateReplicaAddr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicaAddr", reflect.TypeOf((*MockLocalGatewayServer)(nil).UpdateReplicaAddr), arg0, arg1)
}

// WaitKernel mocks base method.
func (m *MockLocalGatewayServer) WaitKernel(arg0 context.Context, arg1 *proto.KernelId) (*proto.KernelStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitKernel", arg0, arg1)
	ret0, _ := ret[0].(*proto.KernelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitKernel indicates an expected call of WaitKernel.
func (mr *MockLocalGatewayServerMockRecorder) WaitKernel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitKernel", reflect.TypeOf((*MockLocalGatewayServer)(nil).WaitKernel), arg0, arg1)
}

// YieldNextExecution mocks base method.
func (m *MockLocalGatewayServer) YieldNextExecution(arg0 context.Context, arg1 *proto.KernelId) (*proto.Void, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YieldNextExecution", arg0, arg1)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// YieldNextExecution indicates an expected call of YieldNextExecution.
func (mr *MockLocalGatewayServerMockRecorder) YieldNextExecution(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecution", reflect.TypeOf((*MockLocalGatewayServer)(nil).YieldNextExecution), arg0, arg1)
}

// mustEmbedUnimplementedLocalGatewayServer mocks base method.
func (m *MockLocalGatewayServer) mustEmbedUnimplementedLocalGatewayServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLocalGatewayServer")
}

// mustEmbedUnimplementedLocalGatewayServer indicates an expected call of mustEmbedUnimplementedLocalGatewayServer.
func (mr *MockLocalGatewayServerMockRecorder) mustEmbedUnimplementedLocalGatewayServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLocalGatewayServer", reflect.TypeOf((*MockLocalGatewayServer)(nil).mustEmbedUnimplementedLocalGatewayServer))
}

// MockUnsafeLocalGatewayServer is a mock of UnsafeLocalGatewayServer interface.
type MockUnsafeLocalGatewayServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLocalGatewayServerMockRecorder
}

// MockUnsafeLocalGatewayServerMockRecorder is the mock recorder for MockUnsafeLocalGatewayServer.
type MockUnsafeLocalGatewayServerMockRecorder struct {
	mock *MockUnsafeLocalGatewayServer
}

// NewMockUnsafeLocalGatewayServer creates a new mock instance.
func NewMockUnsafeLocalGatewayServer(ctrl *gomock.Controller) *MockUnsafeLocalGatewayServer {
	mock := &MockUnsafeLocalGatewayServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLocalGatewayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLocalGatewayServer) EXPECT() *MockUnsafeLocalGatewayServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLocalGatewayServer mocks base method.
func (m *MockUnsafeLocalGatewayServer) mustEmbedUnimplementedLocalGatewayServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLocalGatewayServer")
}

// mustEmbedUnimplementedLocalGatewayServer indicates an expected call of mustEmbedUnimplementedLocalGatewayServer.
func (mr *MockUnsafeLocalGatewayServerMockRecorder) mustEmbedUnimplementedLocalGatewayServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLocalGatewayServer", reflect.TypeOf((*MockUnsafeLocalGatewayServer)(nil).mustEmbedUnimplementedLocalGatewayServer))
}
