// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/scheduling/cluster.go
//
// Generated by this command:
//
//	mockgen -source /home/scusemua/go/pkg/distributed-notebook/common/scheduling/cluster.go -package mock_scheduling -destination /home/scusemua/go/pkg/distributed-notebook/common/mock_scheduling/mock_cluster.go
//

// Package mock_scheduling is a generated GoMock package.
package mock_scheduling

import (
	context "context"
	reflect "reflect"

	promise "github.com/Scusemua/go-utils/promise"
	decimal "github.com/shopspring/decimal"
	metrics "github.com/zhangjyr/distributed-notebook/common/metrics"
	scheduling "github.com/zhangjyr/distributed-notebook/common/scheduling"
	hashmap "github.com/zhangjyr/distributed-notebook/common/utils/hashmap"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterIndexProvider is a mock of ClusterIndexProvider interface.
type MockClusterIndexProvider struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIndexProviderMockRecorder
}

// MockClusterIndexProviderMockRecorder is the mock recorder for MockClusterIndexProvider.
type MockClusterIndexProviderMockRecorder struct {
	mock *MockClusterIndexProvider
}

// NewMockClusterIndexProvider creates a new mock instance.
func NewMockClusterIndexProvider(ctrl *gomock.Controller) *MockClusterIndexProvider {
	mock := &MockClusterIndexProvider{ctrl: ctrl}
	mock.recorder = &MockClusterIndexProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIndexProvider) EXPECT() *MockClusterIndexProviderMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClusterIndexProvider) Add(arg0 *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockClusterIndexProviderMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClusterIndexProvider)(nil).Add), arg0)
}

// Category mocks base method.
func (m *MockClusterIndexProvider) Category() (string, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Category indicates an expected call of Category.
func (mr *MockClusterIndexProviderMockRecorder) Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockClusterIndexProvider)(nil).Category))
}

// GetMetrics mocks base method.
func (m *MockClusterIndexProvider) GetMetrics(arg0 *scheduling.Host) []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", arg0)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockClusterIndexProviderMockRecorder) GetMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockClusterIndexProvider)(nil).GetMetrics), arg0)
}

// IsQualified mocks base method.
func (m *MockClusterIndexProvider) IsQualified(arg0 *scheduling.Host) (any, scheduling.ClusterIndexQualification) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQualified", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(scheduling.ClusterIndexQualification)
	return ret0, ret1
}

// IsQualified indicates an expected call of IsQualified.
func (mr *MockClusterIndexProviderMockRecorder) IsQualified(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQualified", reflect.TypeOf((*MockClusterIndexProvider)(nil).IsQualified), arg0)
}

// Len mocks base method.
func (m *MockClusterIndexProvider) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockClusterIndexProviderMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockClusterIndexProvider)(nil).Len))
}

// Remove mocks base method.
func (m *MockClusterIndexProvider) Remove(arg0 *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockClusterIndexProviderMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockClusterIndexProvider)(nil).Remove), arg0)
}

// Update mocks base method.
func (m *MockClusterIndexProvider) Update(arg0 *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockClusterIndexProviderMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterIndexProvider)(nil).Update), arg0)
}

// MockClusterIndexQuerier is a mock of ClusterIndexQuerier interface.
type MockClusterIndexQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIndexQuerierMockRecorder
}

// MockClusterIndexQuerierMockRecorder is the mock recorder for MockClusterIndexQuerier.
type MockClusterIndexQuerierMockRecorder struct {
	mock *MockClusterIndexQuerier
}

// NewMockClusterIndexQuerier creates a new mock instance.
func NewMockClusterIndexQuerier(ctrl *gomock.Controller) *MockClusterIndexQuerier {
	mock := &MockClusterIndexQuerier{ctrl: ctrl}
	mock.recorder = &MockClusterIndexQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIndexQuerier) EXPECT() *MockClusterIndexQuerierMockRecorder {
	return m.recorder
}

// Seek mocks base method.
func (m *MockClusterIndexQuerier) Seek(blacklist []any, metrics ...[]float64) (*scheduling.Host, any) {
	m.ctrl.T.Helper()
	varargs := []any{blacklist}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Seek", varargs...)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockClusterIndexQuerierMockRecorder) Seek(blacklist any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{blacklist}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockClusterIndexQuerier)(nil).Seek), varargs...)
}

// SeekFrom mocks base method.
func (m *MockClusterIndexQuerier) SeekFrom(start any, metrics ...[]float64) (*scheduling.Host, any) {
	m.ctrl.T.Helper()
	varargs := []any{start}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeekFrom", varargs...)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// SeekFrom indicates an expected call of SeekFrom.
func (mr *MockClusterIndexQuerierMockRecorder) SeekFrom(start any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{start}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekFrom", reflect.TypeOf((*MockClusterIndexQuerier)(nil).SeekFrom), varargs...)
}

// SeekMultipleFrom mocks base method.
func (m *MockClusterIndexQuerier) SeekMultipleFrom(pos any, n int, criteriaFunc scheduling.HostCriteriaFunction, blacklist []any, metrics ...[]float64) ([]*scheduling.Host, any) {
	m.ctrl.T.Helper()
	varargs := []any{pos, n, criteriaFunc, blacklist}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeekMultipleFrom", varargs...)
	ret0, _ := ret[0].([]*scheduling.Host)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// SeekMultipleFrom indicates an expected call of SeekMultipleFrom.
func (mr *MockClusterIndexQuerierMockRecorder) SeekMultipleFrom(pos, n, criteriaFunc, blacklist any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pos, n, criteriaFunc, blacklist}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekMultipleFrom", reflect.TypeOf((*MockClusterIndexQuerier)(nil).SeekMultipleFrom), varargs...)
}

// MockClusterIndex is a mock of ClusterIndex interface.
type MockClusterIndex struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIndexMockRecorder
}

// MockClusterIndexMockRecorder is the mock recorder for MockClusterIndex.
type MockClusterIndexMockRecorder struct {
	mock *MockClusterIndex
}

// NewMockClusterIndex creates a new mock instance.
func NewMockClusterIndex(ctrl *gomock.Controller) *MockClusterIndex {
	mock := &MockClusterIndex{ctrl: ctrl}
	mock.recorder = &MockClusterIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIndex) EXPECT() *MockClusterIndexMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClusterIndex) Add(arg0 *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockClusterIndexMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClusterIndex)(nil).Add), arg0)
}

// Category mocks base method.
func (m *MockClusterIndex) Category() (string, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Category indicates an expected call of Category.
func (mr *MockClusterIndexMockRecorder) Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockClusterIndex)(nil).Category))
}

// GetMetrics mocks base method.
func (m *MockClusterIndex) GetMetrics(arg0 *scheduling.Host) []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", arg0)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockClusterIndexMockRecorder) GetMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockClusterIndex)(nil).GetMetrics), arg0)
}

// IsQualified mocks base method.
func (m *MockClusterIndex) IsQualified(arg0 *scheduling.Host) (any, scheduling.ClusterIndexQualification) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQualified", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(scheduling.ClusterIndexQualification)
	return ret0, ret1
}

// IsQualified indicates an expected call of IsQualified.
func (mr *MockClusterIndexMockRecorder) IsQualified(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQualified", reflect.TypeOf((*MockClusterIndex)(nil).IsQualified), arg0)
}

// Len mocks base method.
func (m *MockClusterIndex) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockClusterIndexMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockClusterIndex)(nil).Len))
}

// Remove mocks base method.
func (m *MockClusterIndex) Remove(arg0 *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockClusterIndexMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockClusterIndex)(nil).Remove), arg0)
}

// Seek mocks base method.
func (m *MockClusterIndex) Seek(blacklist []any, metrics ...[]float64) (*scheduling.Host, any) {
	m.ctrl.T.Helper()
	varargs := []any{blacklist}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Seek", varargs...)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockClusterIndexMockRecorder) Seek(blacklist any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{blacklist}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockClusterIndex)(nil).Seek), varargs...)
}

// SeekFrom mocks base method.
func (m *MockClusterIndex) SeekFrom(start any, metrics ...[]float64) (*scheduling.Host, any) {
	m.ctrl.T.Helper()
	varargs := []any{start}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeekFrom", varargs...)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// SeekFrom indicates an expected call of SeekFrom.
func (mr *MockClusterIndexMockRecorder) SeekFrom(start any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{start}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekFrom", reflect.TypeOf((*MockClusterIndex)(nil).SeekFrom), varargs...)
}

// SeekMultipleFrom mocks base method.
func (m *MockClusterIndex) SeekMultipleFrom(pos any, n int, criteriaFunc scheduling.HostCriteriaFunction, blacklist []any, metrics ...[]float64) ([]*scheduling.Host, any) {
	m.ctrl.T.Helper()
	varargs := []any{pos, n, criteriaFunc, blacklist}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeekMultipleFrom", varargs...)
	ret0, _ := ret[0].([]*scheduling.Host)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// SeekMultipleFrom indicates an expected call of SeekMultipleFrom.
func (mr *MockClusterIndexMockRecorder) SeekMultipleFrom(pos, n, criteriaFunc, blacklist any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pos, n, criteriaFunc, blacklist}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekMultipleFrom", reflect.TypeOf((*MockClusterIndex)(nil).SeekMultipleFrom), varargs...)
}

// Update mocks base method.
func (m *MockClusterIndex) Update(arg0 *scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockClusterIndexMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterIndex)(nil).Update), arg0)
}

// MockClusterInternal is a mock of ClusterInternal interface.
type MockClusterInternal struct {
	ctrl     *gomock.Controller
	recorder *MockClusterInternalMockRecorder
}

// MockClusterInternalMockRecorder is the mock recorder for MockClusterInternal.
type MockClusterInternalMockRecorder struct {
	mock *MockClusterInternal
}

// NewMockClusterInternal creates a new mock instance.
func NewMockClusterInternal(ctrl *gomock.Controller) *MockClusterInternal {
	mock := &MockClusterInternal{ctrl: ctrl}
	mock.recorder = &MockClusterInternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterInternal) EXPECT() *MockClusterInternalMockRecorder {
	return m.recorder
}

// ActiveScaleOperation mocks base method.
func (m *MockClusterInternal) ActiveScaleOperation() *scheduling.ScaleOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveScaleOperation")
	ret0, _ := ret[0].(*scheduling.ScaleOperation)
	return ret0
}

// ActiveScaleOperation indicates an expected call of ActiveScaleOperation.
func (mr *MockClusterInternalMockRecorder) ActiveScaleOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveScaleOperation", reflect.TypeOf((*MockClusterInternal)(nil).ActiveScaleOperation))
}

// AddIndex mocks base method.
func (m *MockClusterInternal) AddIndex(index scheduling.ClusterIndexProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndex", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndex indicates an expected call of AddIndex.
func (mr *MockClusterInternalMockRecorder) AddIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockClusterInternal)(nil).AddIndex), index)
}

// AddSession mocks base method.
func (m *MockClusterInternal) AddSession(sessionId string, session *scheduling.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSession", sessionId, session)
}

// AddSession indicates an expected call of AddSession.
func (mr *MockClusterInternalMockRecorder) AddSession(sessionId, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockClusterInternal)(nil).AddSession), sessionId, session)
}

// BusyGPUs mocks base method.
func (m *MockClusterInternal) BusyGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// BusyGPUs indicates an expected call of BusyGPUs.
func (mr *MockClusterInternalMockRecorder) BusyGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyGPUs", reflect.TypeOf((*MockClusterInternal)(nil).BusyGPUs))
}

// ClusterMetricsProvider mocks base method.
func (m *MockClusterInternal) ClusterMetricsProvider() metrics.ClusterMetricsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsProvider")
	ret0, _ := ret[0].(metrics.ClusterMetricsProvider)
	return ret0
}

// ClusterMetricsProvider indicates an expected call of ClusterMetricsProvider.
func (mr *MockClusterInternalMockRecorder) ClusterMetricsProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsProvider", reflect.TypeOf((*MockClusterInternal)(nil).ClusterMetricsProvider))
}

// ClusterScheduler mocks base method.
func (m *MockClusterInternal) ClusterScheduler() scheduling.ClusterScheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(scheduling.ClusterScheduler)
	return ret0
}

// ClusterScheduler indicates an expected call of ClusterScheduler.
func (mr *MockClusterInternalMockRecorder) ClusterScheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockClusterInternal)(nil).ClusterScheduler))
}

// DemandGPUs mocks base method.
func (m *MockClusterInternal) DemandGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemandGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DemandGPUs indicates an expected call of DemandGPUs.
func (mr *MockClusterInternalMockRecorder) DemandGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemandGPUs", reflect.TypeOf((*MockClusterInternal)(nil).DemandGPUs))
}

// GetHost mocks base method.
func (m *MockClusterInternal) GetHost(hostId string) (*scheduling.Host, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", hostId)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockClusterInternalMockRecorder) GetHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockClusterInternal)(nil).GetHost), hostId)
}

// GetIndex mocks base method.
func (m *MockClusterInternal) GetIndex(category string, expected any) (scheduling.ClusterIndexProvider, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", category, expected)
	ret0, _ := ret[0].(scheduling.ClusterIndexProvider)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockClusterInternalMockRecorder) GetIndex(category, expected any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockClusterInternal)(nil).GetIndex), category, expected)
}

// GetOversubscriptionFactor mocks base method.
func (m *MockClusterInternal) GetOversubscriptionFactor(ratio decimal.Decimal) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOversubscriptionFactor", ratio)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetOversubscriptionFactor indicates an expected call of GetOversubscriptionFactor.
func (mr *MockClusterInternalMockRecorder) GetOversubscriptionFactor(ratio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOversubscriptionFactor", reflect.TypeOf((*MockClusterInternal)(nil).GetOversubscriptionFactor), ratio)
}

// GetSession mocks base method.
func (m *MockClusterInternal) GetSession(sessionID string) (scheduling.AbstractSession, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(scheduling.AbstractSession)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockClusterInternalMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockClusterInternal)(nil).GetSession), sessionID)
}

// Len mocks base method.
func (m *MockClusterInternal) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockClusterInternalMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockClusterInternal)(nil).Len))
}

// NewHostAddedOrConnected mocks base method.
func (m *MockClusterInternal) NewHostAddedOrConnected(host *scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHostAddedOrConnected", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewHostAddedOrConnected indicates an expected call of NewHostAddedOrConnected.
func (mr *MockClusterInternalMockRecorder) NewHostAddedOrConnected(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHostAddedOrConnected", reflect.TypeOf((*MockClusterInternal)(nil).NewHostAddedOrConnected), host)
}

// NodeType mocks base method.
func (m *MockClusterInternal) NodeType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeType indicates an expected call of NodeType.
func (mr *MockClusterInternalMockRecorder) NodeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeType", reflect.TypeOf((*MockClusterInternal)(nil).NodeType))
}

// NumDisabledHosts mocks base method.
func (m *MockClusterInternal) NumDisabledHosts() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumDisabledHosts")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumDisabledHosts indicates an expected call of NumDisabledHosts.
func (mr *MockClusterInternalMockRecorder) NumDisabledHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDisabledHosts", reflect.TypeOf((*MockClusterInternal)(nil).NumDisabledHosts))
}

// NumReplicas mocks base method.
func (m *MockClusterInternal) NumReplicas() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReplicas indicates an expected call of NumReplicas.
func (mr *MockClusterInternalMockRecorder) NumReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicas", reflect.TypeOf((*MockClusterInternal)(nil).NumReplicas))
}

// NumReplicasAsDecimal mocks base method.
func (m *MockClusterInternal) NumReplicasAsDecimal() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicasAsDecimal")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// NumReplicasAsDecimal indicates an expected call of NumReplicasAsDecimal.
func (mr *MockClusterInternalMockRecorder) NumReplicasAsDecimal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicasAsDecimal", reflect.TypeOf((*MockClusterInternal)(nil).NumReplicasAsDecimal))
}

// NumScaleInOperationsAttempted mocks base method.
func (m *MockClusterInternal) NumScaleInOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsAttempted indicates an expected call of NumScaleInOperationsAttempted.
func (mr *MockClusterInternalMockRecorder) NumScaleInOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsAttempted", reflect.TypeOf((*MockClusterInternal)(nil).NumScaleInOperationsAttempted))
}

// NumScaleInOperationsFailed mocks base method.
func (m *MockClusterInternal) NumScaleInOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsFailed indicates an expected call of NumScaleInOperationsFailed.
func (mr *MockClusterInternalMockRecorder) NumScaleInOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsFailed", reflect.TypeOf((*MockClusterInternal)(nil).NumScaleInOperationsFailed))
}

// NumScaleInOperationsSucceeded mocks base method.
func (m *MockClusterInternal) NumScaleInOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsSucceeded indicates an expected call of NumScaleInOperationsSucceeded.
func (mr *MockClusterInternalMockRecorder) NumScaleInOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsSucceeded", reflect.TypeOf((*MockClusterInternal)(nil).NumScaleInOperationsSucceeded))
}

// NumScaleOutOperationsAttempted mocks base method.
func (m *MockClusterInternal) NumScaleOutOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsAttempted indicates an expected call of NumScaleOutOperationsAttempted.
func (mr *MockClusterInternalMockRecorder) NumScaleOutOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsAttempted", reflect.TypeOf((*MockClusterInternal)(nil).NumScaleOutOperationsAttempted))
}

// NumScaleOutOperationsFailed mocks base method.
func (m *MockClusterInternal) NumScaleOutOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsFailed indicates an expected call of NumScaleOutOperationsFailed.
func (mr *MockClusterInternalMockRecorder) NumScaleOutOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsFailed", reflect.TypeOf((*MockClusterInternal)(nil).NumScaleOutOperationsFailed))
}

// NumScaleOutOperationsSucceeded mocks base method.
func (m *MockClusterInternal) NumScaleOutOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsSucceeded indicates an expected call of NumScaleOutOperationsSucceeded.
func (mr *MockClusterInternalMockRecorder) NumScaleOutOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsSucceeded", reflect.TypeOf((*MockClusterInternal)(nil).NumScaleOutOperationsSucceeded))
}

// NumScalingOperationsAttempted mocks base method.
func (m *MockClusterInternal) NumScalingOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsAttempted indicates an expected call of NumScalingOperationsAttempted.
func (mr *MockClusterInternalMockRecorder) NumScalingOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsAttempted", reflect.TypeOf((*MockClusterInternal)(nil).NumScalingOperationsAttempted))
}

// NumScalingOperationsFailed mocks base method.
func (m *MockClusterInternal) NumScalingOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsFailed indicates an expected call of NumScalingOperationsFailed.
func (mr *MockClusterInternalMockRecorder) NumScalingOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsFailed", reflect.TypeOf((*MockClusterInternal)(nil).NumScalingOperationsFailed))
}

// NumScalingOperationsSucceeded mocks base method.
func (m *MockClusterInternal) NumScalingOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsSucceeded indicates an expected call of NumScalingOperationsSucceeded.
func (mr *MockClusterInternalMockRecorder) NumScalingOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsSucceeded", reflect.TypeOf((*MockClusterInternal)(nil).NumScalingOperationsSucceeded))
}

// Placer mocks base method.
func (m *MockClusterInternal) Placer() scheduling.Placer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placer")
	ret0, _ := ret[0].(scheduling.Placer)
	return ret0
}

// Placer indicates an expected call of Placer.
func (mr *MockClusterInternalMockRecorder) Placer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placer", reflect.TypeOf((*MockClusterInternal)(nil).Placer))
}

// RangeOverHosts mocks base method.
func (m *MockClusterInternal) RangeOverHosts(f func(string, *scheduling.Host) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RangeOverHosts", f)
}

// RangeOverHosts indicates an expected call of RangeOverHosts.
func (mr *MockClusterInternalMockRecorder) RangeOverHosts(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeOverHosts", reflect.TypeOf((*MockClusterInternal)(nil).RangeOverHosts), f)
}

// ReadLockHosts mocks base method.
func (m *MockClusterInternal) ReadLockHosts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadLockHosts")
}

// ReadLockHosts indicates an expected call of ReadLockHosts.
func (mr *MockClusterInternalMockRecorder) ReadLockHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockHosts", reflect.TypeOf((*MockClusterInternal)(nil).ReadLockHosts))
}

// ReadUnlockHosts mocks base method.
func (m *MockClusterInternal) ReadUnlockHosts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadUnlockHosts")
}

// ReadUnlockHosts indicates an expected call of ReadUnlockHosts.
func (mr *MockClusterInternalMockRecorder) ReadUnlockHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnlockHosts", reflect.TypeOf((*MockClusterInternal)(nil).ReadUnlockHosts))
}

// ReleaseHosts mocks base method.
func (m *MockClusterInternal) ReleaseHosts(ctx context.Context, n int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseHosts", ctx, n)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ReleaseHosts indicates an expected call of ReleaseHosts.
func (mr *MockClusterInternalMockRecorder) ReleaseHosts(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseHosts", reflect.TypeOf((*MockClusterInternal)(nil).ReleaseHosts), ctx, n)
}

// ReleaseSpecificHosts mocks base method.
func (m *MockClusterInternal) ReleaseSpecificHosts(ctx context.Context, ids []string) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSpecificHosts", ctx, ids)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ReleaseSpecificHosts indicates an expected call of ReleaseSpecificHosts.
func (mr *MockClusterInternalMockRecorder) ReleaseSpecificHosts(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSpecificHosts", reflect.TypeOf((*MockClusterInternal)(nil).ReleaseSpecificHosts), ctx, ids)
}

// RemoveHost mocks base method.
func (m *MockClusterInternal) RemoveHost(hostId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHost", hostId)
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterInternalMockRecorder) RemoveHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockClusterInternal)(nil).RemoveHost), hostId)
}

// RequestHosts mocks base method.
func (m *MockClusterInternal) RequestHosts(ctx context.Context, n int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHosts", ctx, n)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// RequestHosts indicates an expected call of RequestHosts.
func (mr *MockClusterInternalMockRecorder) RequestHosts(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHosts", reflect.TypeOf((*MockClusterInternal)(nil).RequestHosts), ctx, n)
}

// ScaleToSize mocks base method.
func (m *MockClusterInternal) ScaleToSize(ctx context.Context, targetNumNodes int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleToSize", ctx, targetNumNodes)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ScaleToSize indicates an expected call of ScaleToSize.
func (mr *MockClusterInternalMockRecorder) ScaleToSize(ctx, targetNumNodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleToSize", reflect.TypeOf((*MockClusterInternal)(nil).ScaleToSize), ctx, targetNumNodes)
}

// Sessions mocks base method.
func (m *MockClusterInternal) Sessions() hashmap.HashMap[string, *scheduling.Session] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].(hashmap.HashMap[string, *scheduling.Session])
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockClusterInternalMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockClusterInternal)(nil).Sessions))
}

// SubscriptionRatio mocks base method.
func (m *MockClusterInternal) SubscriptionRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SubscriptionRatio indicates an expected call of SubscriptionRatio.
func (mr *MockClusterInternalMockRecorder) SubscriptionRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionRatio", reflect.TypeOf((*MockClusterInternal)(nil).SubscriptionRatio))
}

// CanPossiblyScaleOut mocks base method.
func (m *MockClusterInternal) CanPossiblyScaleOut() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanPossiblyScaleOut")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanPossiblyScaleOut indicates an expected call of CanPossiblyScaleOut.
func (mr *MockClusterInternalMockRecorder) CanPossiblyScaleOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanPossiblyScaleOut", reflect.TypeOf((*MockClusterInternal)(nil).CanPossiblyScaleOut))
}

// getScaleInCommand mocks base method.
func (m *MockClusterInternal) getScaleInCommand(targetScale int32, targetHosts []string, coreLogicDoneChan chan any) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getScaleInCommand", targetScale, targetHosts, coreLogicDoneChan)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getScaleInCommand indicates an expected call of getScaleInCommand.
func (mr *MockClusterInternalMockRecorder) getScaleInCommand(targetScale, targetHosts, coreLogicDoneChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getScaleInCommand", reflect.TypeOf((*MockClusterInternal)(nil).getScaleInCommand), targetScale, targetHosts, coreLogicDoneChan)
}

// getScaleOutCommand mocks base method.
func (m *MockClusterInternal) getScaleOutCommand(targetScale int32, coreLogicDoneChan chan any) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getScaleOutCommand", targetScale, coreLogicDoneChan)
	ret0, _ := ret[0].(func())
	return ret0
}

// getScaleOutCommand indicates an expected call of getScaleOutCommand.
func (mr *MockClusterInternalMockRecorder) getScaleOutCommand(targetScale, coreLogicDoneChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getScaleOutCommand", reflect.TypeOf((*MockClusterInternal)(nil).getScaleOutCommand), targetScale, coreLogicDoneChan)
}

// registerScaleInOperation mocks base method.
func (m *MockClusterInternal) registerScaleInOperation(arg0 string, arg1 int32, arg2 []string) (*scheduling.ScaleOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "registerScaleInOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*scheduling.ScaleOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// registerScaleInOperation indicates an expected call of registerScaleInOperation.
func (mr *MockClusterInternalMockRecorder) registerScaleInOperation(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerScaleInOperation", reflect.TypeOf((*MockClusterInternal)(nil).registerScaleInOperation), arg0, arg1, arg2)
}

// registerScaleOperation mocks base method.
func (m *MockClusterInternal) registerScaleOperation(arg0 string, arg1 int32) (*scheduling.ScaleOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "registerScaleOperation", arg0, arg1)
	ret0, _ := ret[0].(*scheduling.ScaleOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// registerScaleOperation indicates an expected call of registerScaleOperation.
func (mr *MockClusterInternalMockRecorder) registerScaleOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerScaleOperation", reflect.TypeOf((*MockClusterInternal)(nil).registerScaleOperation), arg0, arg1)
}

// registerScaleOutOperation mocks base method.
func (m *MockClusterInternal) registerScaleOutOperation(arg0 string, arg1 int32) (*scheduling.ScaleOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "registerScaleOutOperation", arg0, arg1)
	ret0, _ := ret[0].(*scheduling.ScaleOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// registerScaleOutOperation indicates an expected call of registerScaleOutOperation.
func (mr *MockClusterInternalMockRecorder) registerScaleOutOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerScaleOutOperation", reflect.TypeOf((*MockClusterInternal)(nil).registerScaleOutOperation), arg0, arg1)
}

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// ActiveScaleOperation mocks base method.
func (m *MockCluster) ActiveScaleOperation() *scheduling.ScaleOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveScaleOperation")
	ret0, _ := ret[0].(*scheduling.ScaleOperation)
	return ret0
}

// ActiveScaleOperation indicates an expected call of ActiveScaleOperation.
func (mr *MockClusterMockRecorder) ActiveScaleOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveScaleOperation", reflect.TypeOf((*MockCluster)(nil).ActiveScaleOperation))
}

// AddIndex mocks base method.
func (m *MockCluster) AddIndex(index scheduling.ClusterIndexProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndex", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndex indicates an expected call of AddIndex.
func (mr *MockClusterMockRecorder) AddIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockCluster)(nil).AddIndex), index)
}

// AddSession mocks base method.
func (m *MockCluster) AddSession(sessionId string, session *scheduling.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSession", sessionId, session)
}

// AddSession indicates an expected call of AddSession.
func (mr *MockClusterMockRecorder) AddSession(sessionId, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockCluster)(nil).AddSession), sessionId, session)
}

// BusyGPUs mocks base method.
func (m *MockCluster) BusyGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// BusyGPUs indicates an expected call of BusyGPUs.
func (mr *MockClusterMockRecorder) BusyGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyGPUs", reflect.TypeOf((*MockCluster)(nil).BusyGPUs))
}

// ClusterScheduler mocks base method.
func (m *MockCluster) ClusterScheduler() scheduling.ClusterScheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(scheduling.ClusterScheduler)
	return ret0
}

// ClusterScheduler indicates an expected call of ClusterScheduler.
func (mr *MockClusterMockRecorder) ClusterScheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockCluster)(nil).ClusterScheduler))
}

// DemandGPUs mocks base method.
func (m *MockCluster) DemandGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemandGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DemandGPUs indicates an expected call of DemandGPUs.
func (mr *MockClusterMockRecorder) DemandGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemandGPUs", reflect.TypeOf((*MockCluster)(nil).DemandGPUs))
}

// GetHost mocks base method.
func (m *MockCluster) GetHost(hostId string) (*scheduling.Host, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", hostId)
	ret0, _ := ret[0].(*scheduling.Host)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockClusterMockRecorder) GetHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockCluster)(nil).GetHost), hostId)
}

// GetIndex mocks base method.
func (m *MockCluster) GetIndex(category string, expected any) (scheduling.ClusterIndexProvider, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", category, expected)
	ret0, _ := ret[0].(scheduling.ClusterIndexProvider)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockClusterMockRecorder) GetIndex(category, expected any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockCluster)(nil).GetIndex), category, expected)
}

// GetOversubscriptionFactor mocks base method.
func (m *MockCluster) GetOversubscriptionFactor(ratio decimal.Decimal) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOversubscriptionFactor", ratio)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetOversubscriptionFactor indicates an expected call of GetOversubscriptionFactor.
func (mr *MockClusterMockRecorder) GetOversubscriptionFactor(ratio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOversubscriptionFactor", reflect.TypeOf((*MockCluster)(nil).GetOversubscriptionFactor), ratio)
}

// GetSession mocks base method.
func (m *MockCluster) GetSession(sessionID string) (scheduling.AbstractSession, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(scheduling.AbstractSession)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockClusterMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockCluster)(nil).GetSession), sessionID)
}

// Len mocks base method.
func (m *MockCluster) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockClusterMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCluster)(nil).Len))
}

// NewHostAddedOrConnected mocks base method.
func (m *MockCluster) NewHostAddedOrConnected(host *scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHostAddedOrConnected", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewHostAddedOrConnected indicates an expected call of NewHostAddedOrConnected.
func (mr *MockClusterMockRecorder) NewHostAddedOrConnected(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHostAddedOrConnected", reflect.TypeOf((*MockCluster)(nil).NewHostAddedOrConnected), host)
}

// NodeType mocks base method.
func (m *MockCluster) NodeType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeType indicates an expected call of NodeType.
func (mr *MockClusterMockRecorder) NodeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeType", reflect.TypeOf((*MockCluster)(nil).NodeType))
}

// NumDisabledHosts mocks base method.
func (m *MockCluster) NumDisabledHosts() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumDisabledHosts")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumDisabledHosts indicates an expected call of NumDisabledHosts.
func (mr *MockClusterMockRecorder) NumDisabledHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDisabledHosts", reflect.TypeOf((*MockCluster)(nil).NumDisabledHosts))
}

// NumReplicas mocks base method.
func (m *MockCluster) NumReplicas() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReplicas indicates an expected call of NumReplicas.
func (mr *MockClusterMockRecorder) NumReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicas", reflect.TypeOf((*MockCluster)(nil).NumReplicas))
}

// NumReplicasAsDecimal mocks base method.
func (m *MockCluster) NumReplicasAsDecimal() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicasAsDecimal")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// NumReplicasAsDecimal indicates an expected call of NumReplicasAsDecimal.
func (mr *MockClusterMockRecorder) NumReplicasAsDecimal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicasAsDecimal", reflect.TypeOf((*MockCluster)(nil).NumReplicasAsDecimal))
}

// NumScaleInOperationsAttempted mocks base method.
func (m *MockCluster) NumScaleInOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsAttempted indicates an expected call of NumScaleInOperationsAttempted.
func (mr *MockClusterMockRecorder) NumScaleInOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsAttempted", reflect.TypeOf((*MockCluster)(nil).NumScaleInOperationsAttempted))
}

// NumScaleInOperationsFailed mocks base method.
func (m *MockCluster) NumScaleInOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsFailed indicates an expected call of NumScaleInOperationsFailed.
func (mr *MockClusterMockRecorder) NumScaleInOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsFailed", reflect.TypeOf((*MockCluster)(nil).NumScaleInOperationsFailed))
}

// NumScaleInOperationsSucceeded mocks base method.
func (m *MockCluster) NumScaleInOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsSucceeded indicates an expected call of NumScaleInOperationsSucceeded.
func (mr *MockClusterMockRecorder) NumScaleInOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsSucceeded", reflect.TypeOf((*MockCluster)(nil).NumScaleInOperationsSucceeded))
}

// NumScaleOutOperationsAttempted mocks base method.
func (m *MockCluster) NumScaleOutOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsAttempted indicates an expected call of NumScaleOutOperationsAttempted.
func (mr *MockClusterMockRecorder) NumScaleOutOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsAttempted", reflect.TypeOf((*MockCluster)(nil).NumScaleOutOperationsAttempted))
}

// NumScaleOutOperationsFailed mocks base method.
func (m *MockCluster) NumScaleOutOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsFailed indicates an expected call of NumScaleOutOperationsFailed.
func (mr *MockClusterMockRecorder) NumScaleOutOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsFailed", reflect.TypeOf((*MockCluster)(nil).NumScaleOutOperationsFailed))
}

// NumScaleOutOperationsSucceeded mocks base method.
func (m *MockCluster) NumScaleOutOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsSucceeded indicates an expected call of NumScaleOutOperationsSucceeded.
func (mr *MockClusterMockRecorder) NumScaleOutOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsSucceeded", reflect.TypeOf((*MockCluster)(nil).NumScaleOutOperationsSucceeded))
}

// NumScalingOperationsAttempted mocks base method.
func (m *MockCluster) NumScalingOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsAttempted indicates an expected call of NumScalingOperationsAttempted.
func (mr *MockClusterMockRecorder) NumScalingOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsAttempted", reflect.TypeOf((*MockCluster)(nil).NumScalingOperationsAttempted))
}

// NumScalingOperationsFailed mocks base method.
func (m *MockCluster) NumScalingOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsFailed indicates an expected call of NumScalingOperationsFailed.
func (mr *MockClusterMockRecorder) NumScalingOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsFailed", reflect.TypeOf((*MockCluster)(nil).NumScalingOperationsFailed))
}

// NumScalingOperationsSucceeded mocks base method.
func (m *MockCluster) NumScalingOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsSucceeded indicates an expected call of NumScalingOperationsSucceeded.
func (mr *MockClusterMockRecorder) NumScalingOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsSucceeded", reflect.TypeOf((*MockCluster)(nil).NumScalingOperationsSucceeded))
}

// Placer mocks base method.
func (m *MockCluster) Placer() scheduling.Placer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placer")
	ret0, _ := ret[0].(scheduling.Placer)
	return ret0
}

// Placer indicates an expected call of Placer.
func (mr *MockClusterMockRecorder) Placer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placer", reflect.TypeOf((*MockCluster)(nil).Placer))
}

// RangeOverHosts mocks base method.
func (m *MockCluster) RangeOverHosts(f func(string, *scheduling.Host) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RangeOverHosts", f)
}

// RangeOverHosts indicates an expected call of RangeOverHosts.
func (mr *MockClusterMockRecorder) RangeOverHosts(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeOverHosts", reflect.TypeOf((*MockCluster)(nil).RangeOverHosts), f)
}

// ReadLockHosts mocks base method.
func (m *MockCluster) ReadLockHosts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadLockHosts")
}

// ReadLockHosts indicates an expected call of ReadLockHosts.
func (mr *MockClusterMockRecorder) ReadLockHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockHosts", reflect.TypeOf((*MockCluster)(nil).ReadLockHosts))
}

// ReadUnlockHosts mocks base method.
func (m *MockCluster) ReadUnlockHosts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadUnlockHosts")
}

// ReadUnlockHosts indicates an expected call of ReadUnlockHosts.
func (mr *MockClusterMockRecorder) ReadUnlockHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnlockHosts", reflect.TypeOf((*MockCluster)(nil).ReadUnlockHosts))
}

// ReleaseHosts mocks base method.
func (m *MockCluster) ReleaseHosts(ctx context.Context, n int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseHosts", ctx, n)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ReleaseHosts indicates an expected call of ReleaseHosts.
func (mr *MockClusterMockRecorder) ReleaseHosts(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseHosts", reflect.TypeOf((*MockCluster)(nil).ReleaseHosts), ctx, n)
}

// ReleaseSpecificHosts mocks base method.
func (m *MockCluster) ReleaseSpecificHosts(ctx context.Context, ids []string) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSpecificHosts", ctx, ids)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ReleaseSpecificHosts indicates an expected call of ReleaseSpecificHosts.
func (mr *MockClusterMockRecorder) ReleaseSpecificHosts(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSpecificHosts", reflect.TypeOf((*MockCluster)(nil).ReleaseSpecificHosts), ctx, ids)
}

// RemoveHost mocks base method.
func (m *MockCluster) RemoveHost(hostId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHost", hostId)
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterMockRecorder) RemoveHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockCluster)(nil).RemoveHost), hostId)
}

// RequestHosts mocks base method.
func (m *MockCluster) RequestHosts(ctx context.Context, n int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHosts", ctx, n)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// RequestHosts indicates an expected call of RequestHosts.
func (mr *MockClusterMockRecorder) RequestHosts(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHosts", reflect.TypeOf((*MockCluster)(nil).RequestHosts), ctx, n)
}

// ScaleToSize mocks base method.
func (m *MockCluster) ScaleToSize(ctx context.Context, targetNumNodes int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleToSize", ctx, targetNumNodes)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ScaleToSize indicates an expected call of ScaleToSize.
func (mr *MockClusterMockRecorder) ScaleToSize(ctx, targetNumNodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleToSize", reflect.TypeOf((*MockCluster)(nil).ScaleToSize), ctx, targetNumNodes)
}

// Sessions mocks base method.
func (m *MockCluster) Sessions() hashmap.HashMap[string, *scheduling.Session] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].(hashmap.HashMap[string, *scheduling.Session])
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockClusterMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockCluster)(nil).Sessions))
}

// SubscriptionRatio mocks base method.
func (m *MockCluster) SubscriptionRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SubscriptionRatio indicates an expected call of SubscriptionRatio.
func (mr *MockClusterMockRecorder) SubscriptionRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionRatio", reflect.TypeOf((*MockCluster)(nil).SubscriptionRatio))
}
