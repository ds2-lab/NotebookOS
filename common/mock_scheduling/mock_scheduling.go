// Code generated by MockGen. DO NOT EDIT.
// Source: /home/scusemua/go/pkg/distributed-notebook/common/scheduling (interfaces: Cluster,Scheduler,Server,Utilization,MetricsProvider,Placer,Host,ClusterIndex,KubeClient,UserSession,Kernel,KernelReplica,KernelContainer,Policy,StatisticsProvider,PrometheusMetricsProvider,ExecutionManager,Execution)
//
// Generated by this command:
//
//	mockgen -destination /home/scusemua/go/pkg/distributed-notebook/common/mock_scheduling/mock_scheduling.go /home/scusemua/go/pkg/distributed-notebook/common/scheduling Cluster,Scheduler,Server,Utilization,MetricsProvider,Placer,Host,ClusterIndex,KubeClient,UserSession,Kernel,KernelReplica,KernelContainer,Policy,StatisticsProvider,PrometheusMetricsProvider,ExecutionManager,Execution
//

// Package mock_scheduling is a generated GoMock package.
package mock_scheduling

import (
	context "context"
	reflect "reflect"
	time "time"

	promise "github.com/Scusemua/go-utils/promise"
	orderedmap "github.com/elliotchance/orderedmap/v2"
	prometheus "github.com/prometheus/client_golang/prometheus"
	jupyter "github.com/scusemua/distributed-notebook/common/jupyter"
	messaging "github.com/scusemua/distributed-notebook/common/jupyter/messaging"
	server "github.com/scusemua/distributed-notebook/common/jupyter/server"
	metrics "github.com/scusemua/distributed-notebook/common/metrics"
	proto "github.com/scusemua/distributed-notebook/common/proto"
	scheduling "github.com/scusemua/distributed-notebook/common/scheduling"
	transaction "github.com/scusemua/distributed-notebook/common/scheduling/transaction"
	types "github.com/scusemua/distributed-notebook/common/types"
	hashmap "github.com/scusemua/distributed-notebook/common/utils/hashmap"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	connectivity "google.golang.org/grpc/connectivity"
	v1 "k8s.io/api/core/v1"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
	isgomock struct{}
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// AddIndex mocks base method.
func (m *MockCluster) AddIndex(index scheduling.IndexProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndex", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndex indicates an expected call of AddIndex.
func (mr *MockClusterMockRecorder) AddIndex(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockCluster)(nil).AddIndex), index)
}

// AddSession mocks base method.
func (m *MockCluster) AddSession(sessionId string, session scheduling.UserSession) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSession", sessionId, session)
}

// AddSession indicates an expected call of AddSession.
func (mr *MockClusterMockRecorder) AddSession(sessionId, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockCluster)(nil).AddSession), sessionId, session)
}

// BusyGPUs mocks base method.
func (m *MockCluster) BusyGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// BusyGPUs indicates an expected call of BusyGPUs.
func (mr *MockClusterMockRecorder) BusyGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyGPUs", reflect.TypeOf((*MockCluster)(nil).BusyGPUs))
}

// CanPossiblyScaleOut mocks base method.
func (m *MockCluster) CanPossiblyScaleOut() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanPossiblyScaleOut")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanPossiblyScaleOut indicates an expected call of CanPossiblyScaleOut.
func (mr *MockClusterMockRecorder) CanPossiblyScaleOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanPossiblyScaleOut", reflect.TypeOf((*MockCluster)(nil).CanPossiblyScaleOut))
}

// Close mocks base method.
func (m *MockCluster) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClusterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCluster)(nil).Close))
}

// DemandAndBusyGPUs mocks base method.
func (m *MockCluster) DemandAndBusyGPUs() (float64, float64, int, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemandAndBusyGPUs")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(int)
	return ret0, ret1, ret2, ret3, ret4
}

// DemandAndBusyGPUs indicates an expected call of DemandAndBusyGPUs.
func (mr *MockClusterMockRecorder) DemandAndBusyGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemandAndBusyGPUs", reflect.TypeOf((*MockCluster)(nil).DemandAndBusyGPUs))
}

// DemandGPUs mocks base method.
func (m *MockCluster) DemandGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemandGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DemandGPUs indicates an expected call of DemandGPUs.
func (mr *MockClusterMockRecorder) DemandGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemandGPUs", reflect.TypeOf((*MockCluster)(nil).DemandGPUs))
}

// DisableScalingOut mocks base method.
func (m *MockCluster) DisableScalingOut() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableScalingOut")
}

// DisableScalingOut indicates an expected call of DisableScalingOut.
func (mr *MockClusterMockRecorder) DisableScalingOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableScalingOut", reflect.TypeOf((*MockCluster)(nil).DisableScalingOut))
}

// EnableScalingOut mocks base method.
func (m *MockCluster) EnableScalingOut() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableScalingOut")
}

// EnableScalingOut indicates an expected call of EnableScalingOut.
func (mr *MockClusterMockRecorder) EnableScalingOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableScalingOut", reflect.TypeOf((*MockCluster)(nil).EnableScalingOut))
}

// GetHost mocks base method.
func (m *MockCluster) GetHost(hostId string) (scheduling.Host, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", hostId)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockClusterMockRecorder) GetHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockCluster)(nil).GetHost), hostId)
}

// GetIndex mocks base method.
func (m *MockCluster) GetIndex(category string, expected any) (scheduling.IndexProvider, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", category, expected)
	ret0, _ := ret[0].(scheduling.IndexProvider)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockClusterMockRecorder) GetIndex(category, expected any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockCluster)(nil).GetIndex), category, expected)
}

// GetOversubscriptionFactor mocks base method.
func (m *MockCluster) GetOversubscriptionFactor(ratio decimal.Decimal) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOversubscriptionFactor", ratio)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetOversubscriptionFactor indicates an expected call of GetOversubscriptionFactor.
func (mr *MockClusterMockRecorder) GetOversubscriptionFactor(ratio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOversubscriptionFactor", reflect.TypeOf((*MockCluster)(nil).GetOversubscriptionFactor), ratio)
}

// GetScaleInCommand mocks base method.
func (m *MockCluster) GetScaleInCommand(targetNumNodes int32, targetHosts []string, coreLogicDoneChan chan any) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleInCommand", targetNumNodes, targetHosts, coreLogicDoneChan)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScaleInCommand indicates an expected call of GetScaleInCommand.
func (mr *MockClusterMockRecorder) GetScaleInCommand(targetNumNodes, targetHosts, coreLogicDoneChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleInCommand", reflect.TypeOf((*MockCluster)(nil).GetScaleInCommand), targetNumNodes, targetHosts, coreLogicDoneChan)
}

// GetScaleOutCommand mocks base method.
func (m *MockCluster) GetScaleOutCommand(targetScale int32, coreLogicDoneChan chan any, scaleOpId string) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleOutCommand", targetScale, coreLogicDoneChan, scaleOpId)
	ret0, _ := ret[0].(func())
	return ret0
}

// GetScaleOutCommand indicates an expected call of GetScaleOutCommand.
func (mr *MockClusterMockRecorder) GetScaleOutCommand(targetScale, coreLogicDoneChan, scaleOpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleOutCommand", reflect.TypeOf((*MockCluster)(nil).GetScaleOutCommand), targetScale, coreLogicDoneChan, scaleOpId)
}

// GetSession mocks base method.
func (m *MockCluster) GetSession(sessionID string) (scheduling.UserSession, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(scheduling.UserSession)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockClusterMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockCluster)(nil).GetSession), sessionID)
}

// HasActiveScalingOperation mocks base method.
func (m *MockCluster) HasActiveScalingOperation() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveScalingOperation")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasActiveScalingOperation indicates an expected call of HasActiveScalingOperation.
func (mr *MockClusterMockRecorder) HasActiveScalingOperation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveScalingOperation", reflect.TypeOf((*MockCluster)(nil).HasActiveScalingOperation))
}

// Len mocks base method.
func (m *MockCluster) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockClusterMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCluster)(nil).Len))
}

// MeanScaleInTime mocks base method.
func (m *MockCluster) MeanScaleInTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeanScaleInTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// MeanScaleInTime indicates an expected call of MeanScaleInTime.
func (mr *MockClusterMockRecorder) MeanScaleInTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeanScaleInTime", reflect.TypeOf((*MockCluster)(nil).MeanScaleInTime))
}

// MeanScaleOutTime mocks base method.
func (m *MockCluster) MeanScaleOutTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MeanScaleOutTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// MeanScaleOutTime indicates an expected call of MeanScaleOutTime.
func (mr *MockClusterMockRecorder) MeanScaleOutTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeanScaleOutTime", reflect.TypeOf((*MockCluster)(nil).MeanScaleOutTime))
}

// MetricsProvider mocks base method.
func (m *MockCluster) MetricsProvider() scheduling.MetricsProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsProvider")
	ret0, _ := ret[0].(scheduling.MetricsProvider)
	return ret0
}

// MetricsProvider indicates an expected call of MetricsProvider.
func (mr *MockClusterMockRecorder) MetricsProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsProvider", reflect.TypeOf((*MockCluster)(nil).MetricsProvider))
}

// NewHostAddedOrConnected mocks base method.
func (m *MockCluster) NewHostAddedOrConnected(host scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHostAddedOrConnected", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewHostAddedOrConnected indicates an expected call of NewHostAddedOrConnected.
func (mr *MockClusterMockRecorder) NewHostAddedOrConnected(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHostAddedOrConnected", reflect.TypeOf((*MockCluster)(nil).NewHostAddedOrConnected), host)
}

// NodeType mocks base method.
func (m *MockCluster) NodeType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeType indicates an expected call of NodeType.
func (mr *MockClusterMockRecorder) NodeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeType", reflect.TypeOf((*MockCluster)(nil).NodeType))
}

// NumDisabledHosts mocks base method.
func (m *MockCluster) NumDisabledHosts() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumDisabledHosts")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumDisabledHosts indicates an expected call of NumDisabledHosts.
func (mr *MockClusterMockRecorder) NumDisabledHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumDisabledHosts", reflect.TypeOf((*MockCluster)(nil).NumDisabledHosts))
}

// NumReplicas mocks base method.
func (m *MockCluster) NumReplicas() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReplicas indicates an expected call of NumReplicas.
func (mr *MockClusterMockRecorder) NumReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicas", reflect.TypeOf((*MockCluster)(nil).NumReplicas))
}

// NumScaleInOperationsAttempted mocks base method.
func (m *MockCluster) NumScaleInOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsAttempted indicates an expected call of NumScaleInOperationsAttempted.
func (mr *MockClusterMockRecorder) NumScaleInOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsAttempted", reflect.TypeOf((*MockCluster)(nil).NumScaleInOperationsAttempted))
}

// NumScaleInOperationsFailed mocks base method.
func (m *MockCluster) NumScaleInOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsFailed indicates an expected call of NumScaleInOperationsFailed.
func (mr *MockClusterMockRecorder) NumScaleInOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsFailed", reflect.TypeOf((*MockCluster)(nil).NumScaleInOperationsFailed))
}

// NumScaleInOperationsSucceeded mocks base method.
func (m *MockCluster) NumScaleInOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleInOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleInOperationsSucceeded indicates an expected call of NumScaleInOperationsSucceeded.
func (mr *MockClusterMockRecorder) NumScaleInOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleInOperationsSucceeded", reflect.TypeOf((*MockCluster)(nil).NumScaleInOperationsSucceeded))
}

// NumScaleOutOperationsAttempted mocks base method.
func (m *MockCluster) NumScaleOutOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsAttempted indicates an expected call of NumScaleOutOperationsAttempted.
func (mr *MockClusterMockRecorder) NumScaleOutOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsAttempted", reflect.TypeOf((*MockCluster)(nil).NumScaleOutOperationsAttempted))
}

// NumScaleOutOperationsFailed mocks base method.
func (m *MockCluster) NumScaleOutOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsFailed indicates an expected call of NumScaleOutOperationsFailed.
func (mr *MockClusterMockRecorder) NumScaleOutOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsFailed", reflect.TypeOf((*MockCluster)(nil).NumScaleOutOperationsFailed))
}

// NumScaleOutOperationsSucceeded mocks base method.
func (m *MockCluster) NumScaleOutOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScaleOutOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScaleOutOperationsSucceeded indicates an expected call of NumScaleOutOperationsSucceeded.
func (mr *MockClusterMockRecorder) NumScaleOutOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScaleOutOperationsSucceeded", reflect.TypeOf((*MockCluster)(nil).NumScaleOutOperationsSucceeded))
}

// NumScalingOperationsAttempted mocks base method.
func (m *MockCluster) NumScalingOperationsAttempted() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsAttempted")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsAttempted indicates an expected call of NumScalingOperationsAttempted.
func (mr *MockClusterMockRecorder) NumScalingOperationsAttempted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsAttempted", reflect.TypeOf((*MockCluster)(nil).NumScalingOperationsAttempted))
}

// NumScalingOperationsFailed mocks base method.
func (m *MockCluster) NumScalingOperationsFailed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsFailed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsFailed indicates an expected call of NumScalingOperationsFailed.
func (mr *MockClusterMockRecorder) NumScalingOperationsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsFailed", reflect.TypeOf((*MockCluster)(nil).NumScalingOperationsFailed))
}

// NumScalingOperationsSucceeded mocks base method.
func (m *MockCluster) NumScalingOperationsSucceeded() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumScalingOperationsSucceeded")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumScalingOperationsSucceeded indicates an expected call of NumScalingOperationsSucceeded.
func (mr *MockClusterMockRecorder) NumScalingOperationsSucceeded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumScalingOperationsSucceeded", reflect.TypeOf((*MockCluster)(nil).NumScalingOperationsSucceeded))
}

// Placer mocks base method.
func (m *MockCluster) Placer() scheduling.Placer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placer")
	ret0, _ := ret[0].(scheduling.Placer)
	return ret0
}

// Placer indicates an expected call of Placer.
func (mr *MockClusterMockRecorder) Placer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placer", reflect.TypeOf((*MockCluster)(nil).Placer))
}

// RangeOverDisabledHosts mocks base method.
func (m *MockCluster) RangeOverDisabledHosts(f func(string, scheduling.Host) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RangeOverDisabledHosts", f)
}

// RangeOverDisabledHosts indicates an expected call of RangeOverDisabledHosts.
func (mr *MockClusterMockRecorder) RangeOverDisabledHosts(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeOverDisabledHosts", reflect.TypeOf((*MockCluster)(nil).RangeOverDisabledHosts), f)
}

// RangeOverHosts mocks base method.
func (m *MockCluster) RangeOverHosts(f func(string, scheduling.Host) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RangeOverHosts", f)
}

// RangeOverHosts indicates an expected call of RangeOverHosts.
func (mr *MockClusterMockRecorder) RangeOverHosts(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeOverHosts", reflect.TypeOf((*MockCluster)(nil).RangeOverHosts), f)
}

// RangeOverSessions mocks base method.
func (m *MockCluster) RangeOverSessions(f func(string, scheduling.UserSession) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RangeOverSessions", f)
}

// RangeOverSessions indicates an expected call of RangeOverSessions.
func (mr *MockClusterMockRecorder) RangeOverSessions(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeOverSessions", reflect.TypeOf((*MockCluster)(nil).RangeOverSessions), f)
}

// ReadLockHosts mocks base method.
func (m *MockCluster) ReadLockHosts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadLockHosts")
}

// ReadLockHosts indicates an expected call of ReadLockHosts.
func (mr *MockClusterMockRecorder) ReadLockHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLockHosts", reflect.TypeOf((*MockCluster)(nil).ReadLockHosts))
}

// ReadUnlockHosts mocks base method.
func (m *MockCluster) ReadUnlockHosts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadUnlockHosts")
}

// ReadUnlockHosts indicates an expected call of ReadUnlockHosts.
func (mr *MockClusterMockRecorder) ReadUnlockHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUnlockHosts", reflect.TypeOf((*MockCluster)(nil).ReadUnlockHosts))
}

// ReleaseHosts mocks base method.
func (m *MockCluster) ReleaseHosts(ctx context.Context, n int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseHosts", ctx, n)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ReleaseHosts indicates an expected call of ReleaseHosts.
func (mr *MockClusterMockRecorder) ReleaseHosts(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseHosts", reflect.TypeOf((*MockCluster)(nil).ReleaseHosts), ctx, n)
}

// ReleaseSpecificHosts mocks base method.
func (m *MockCluster) ReleaseSpecificHosts(ctx context.Context, ids []string) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSpecificHosts", ctx, ids)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ReleaseSpecificHosts indicates an expected call of ReleaseSpecificHosts.
func (mr *MockClusterMockRecorder) ReleaseSpecificHosts(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSpecificHosts", reflect.TypeOf((*MockCluster)(nil).ReleaseSpecificHosts), ctx, ids)
}

// RemoveHost mocks base method.
func (m *MockCluster) RemoveHost(hostId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHost", hostId)
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockClusterMockRecorder) RemoveHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockCluster)(nil).RemoveHost), hostId)
}

// RemoveSession mocks base method.
func (m *MockCluster) RemoveSession(sessionId string) scheduling.UserSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", sessionId)
	ret0, _ := ret[0].(scheduling.UserSession)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockClusterMockRecorder) RemoveSession(sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockCluster)(nil).RemoveSession), sessionId)
}

// RequestHosts mocks base method.
func (m *MockCluster) RequestHosts(ctx context.Context, n int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHosts", ctx, n)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// RequestHosts indicates an expected call of RequestHosts.
func (mr *MockClusterMockRecorder) RequestHosts(ctx, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHosts", reflect.TypeOf((*MockCluster)(nil).RequestHosts), ctx, n)
}

// ScaleToSize mocks base method.
func (m *MockCluster) ScaleToSize(ctx context.Context, targetNumNodes int32) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleToSize", ctx, targetNumNodes)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// ScaleToSize indicates an expected call of ScaleToSize.
func (mr *MockClusterMockRecorder) ScaleToSize(ctx, targetNumNodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleToSize", reflect.TypeOf((*MockCluster)(nil).ScaleToSize), ctx, targetNumNodes)
}

// Scheduler mocks base method.
func (m *MockCluster) Scheduler() scheduling.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(scheduling.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockClusterMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockCluster)(nil).Scheduler))
}

// Sessions mocks base method.
func (m *MockCluster) Sessions() hashmap.HashMap[string, scheduling.UserSession] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].(hashmap.HashMap[string, scheduling.UserSession])
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockClusterMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockCluster)(nil).Sessions))
}

// StdDevScaleInTime mocks base method.
func (m *MockCluster) StdDevScaleInTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdDevScaleInTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// StdDevScaleInTime indicates an expected call of StdDevScaleInTime.
func (mr *MockClusterMockRecorder) StdDevScaleInTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdDevScaleInTime", reflect.TypeOf((*MockCluster)(nil).StdDevScaleInTime))
}

// StdDevScaleOutTime mocks base method.
func (m *MockCluster) StdDevScaleOutTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdDevScaleOutTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// StdDevScaleOutTime indicates an expected call of StdDevScaleOutTime.
func (mr *MockClusterMockRecorder) StdDevScaleOutTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdDevScaleOutTime", reflect.TypeOf((*MockCluster)(nil).StdDevScaleOutTime))
}

// SubscriptionRatio mocks base method.
func (m *MockCluster) SubscriptionRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SubscriptionRatio indicates an expected call of SubscriptionRatio.
func (mr *MockClusterMockRecorder) SubscriptionRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionRatio", reflect.TypeOf((*MockCluster)(nil).SubscriptionRatio))
}

// UpdateIndex mocks base method.
func (m *MockCluster) UpdateIndex(host scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndex", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIndex indicates an expected call of UpdateIndex.
func (mr *MockClusterMockRecorder) UpdateIndex(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndex", reflect.TypeOf((*MockCluster)(nil).UpdateIndex), host)
}

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
	isgomock struct{}
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// CanScaleIn mocks base method.
func (m *MockScheduler) CanScaleIn() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanScaleIn")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanScaleIn indicates an expected call of CanScaleIn.
func (mr *MockSchedulerMockRecorder) CanScaleIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanScaleIn", reflect.TypeOf((*MockScheduler)(nil).CanScaleIn))
}

// DeployKernelReplicas mocks base method.
func (m *MockScheduler) DeployKernelReplicas(ctx context.Context, kernelSpec *proto.KernelSpec, blacklistedHosts []scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployKernelReplicas", ctx, kernelSpec, blacklistedHosts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployKernelReplicas indicates an expected call of DeployKernelReplicas.
func (mr *MockSchedulerMockRecorder) DeployKernelReplicas(ctx, kernelSpec, blacklistedHosts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployKernelReplicas", reflect.TypeOf((*MockScheduler)(nil).DeployKernelReplicas), ctx, kernelSpec, blacklistedHosts)
}

// FindReadyReplica mocks base method.
func (m *MockScheduler) FindReadyReplica(kernel scheduling.Kernel, executionId string) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReadyReplica", kernel, executionId)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReadyReplica indicates an expected call of FindReadyReplica.
func (mr *MockSchedulerMockRecorder) FindReadyReplica(kernel, executionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReadyReplica", reflect.TypeOf((*MockScheduler)(nil).FindReadyReplica), kernel, executionId)
}

// GetActiveAddReplicaOperationsForKernel mocks base method.
func (m *MockScheduler) GetActiveAddReplicaOperationsForKernel(kernelId string) (*orderedmap.OrderedMap[string, *scheduling.AddReplicaOperation], bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAddReplicaOperationsForKernel", kernelId)
	ret0, _ := ret[0].(*orderedmap.OrderedMap[string, *scheduling.AddReplicaOperation])
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetActiveAddReplicaOperationsForKernel indicates an expected call of GetActiveAddReplicaOperationsForKernel.
func (mr *MockSchedulerMockRecorder) GetActiveAddReplicaOperationsForKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAddReplicaOperationsForKernel", reflect.TypeOf((*MockScheduler)(nil).GetActiveAddReplicaOperationsForKernel), kernelId)
}

// GetAddReplicaOperationManager mocks base method.
func (m *MockScheduler) GetAddReplicaOperationManager() hashmap.HashMap[string, *scheduling.AddReplicaOperation] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddReplicaOperationManager")
	ret0, _ := ret[0].(hashmap.HashMap[string, *scheduling.AddReplicaOperation])
	return ret0
}

// GetAddReplicaOperationManager indicates an expected call of GetAddReplicaOperationManager.
func (mr *MockSchedulerMockRecorder) GetAddReplicaOperationManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddReplicaOperationManager", reflect.TypeOf((*MockScheduler)(nil).GetAddReplicaOperationManager))
}

// GetCandidateHost mocks base method.
func (m *MockScheduler) GetCandidateHost(replica scheduling.KernelReplica, blacklistedHosts []scheduling.Host, forTraining bool) (scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateHost", replica, blacklistedHosts, forTraining)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateHost indicates an expected call of GetCandidateHost.
func (mr *MockSchedulerMockRecorder) GetCandidateHost(replica, blacklistedHosts, forTraining any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateHost", reflect.TypeOf((*MockScheduler)(nil).GetCandidateHost), replica, blacklistedHosts, forTraining)
}

// GetCandidateHosts mocks base method.
func (m *MockScheduler) GetCandidateHosts(ctx context.Context, kernelSpec *proto.KernelSpec) ([]scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandidateHosts", ctx, kernelSpec)
	ret0, _ := ret[0].([]scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandidateHosts indicates an expected call of GetCandidateHosts.
func (mr *MockSchedulerMockRecorder) GetCandidateHosts(ctx, kernelSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandidateHosts", reflect.TypeOf((*MockScheduler)(nil).GetCandidateHosts), ctx, kernelSpec)
}

// GetOversubscriptionFactor mocks base method.
func (m *MockScheduler) GetOversubscriptionFactor(ratio decimal.Decimal) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOversubscriptionFactor", ratio)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetOversubscriptionFactor indicates an expected call of GetOversubscriptionFactor.
func (mr *MockSchedulerMockRecorder) GetOversubscriptionFactor(ratio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOversubscriptionFactor", reflect.TypeOf((*MockScheduler)(nil).GetOversubscriptionFactor), ratio)
}

// HostAdded mocks base method.
func (m *MockScheduler) HostAdded(host scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HostAdded", host)
}

// HostAdded indicates an expected call of HostAdded.
func (mr *MockSchedulerMockRecorder) HostAdded(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostAdded", reflect.TypeOf((*MockScheduler)(nil).HostAdded), host)
}

// HostRemoved mocks base method.
func (m *MockScheduler) HostRemoved(host scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HostRemoved", host)
}

// HostRemoved indicates an expected call of HostRemoved.
func (mr *MockSchedulerMockRecorder) HostRemoved(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRemoved", reflect.TypeOf((*MockScheduler)(nil).HostRemoved), host)
}

// MigrateKernelReplica mocks base method.
func (m *MockScheduler) MigrateKernelReplica(kernelReplica scheduling.KernelReplica, targetHostId string, forTraining bool) (*proto.MigrateKernelResponse, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateKernelReplica", kernelReplica, targetHostId, forTraining)
	ret0, _ := ret[0].(*proto.MigrateKernelResponse)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MigrateKernelReplica indicates an expected call of MigrateKernelReplica.
func (mr *MockSchedulerMockRecorder) MigrateKernelReplica(kernelReplica, targetHostId, forTraining any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateKernelReplica", reflect.TypeOf((*MockScheduler)(nil).MigrateKernelReplica), kernelReplica, targetHostId, forTraining)
}

// MinimumCapacity mocks base method.
func (m *MockScheduler) MinimumCapacity() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinimumCapacity")
	ret0, _ := ret[0].(int32)
	return ret0
}

// MinimumCapacity indicates an expected call of MinimumCapacity.
func (mr *MockSchedulerMockRecorder) MinimumCapacity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinimumCapacity", reflect.TypeOf((*MockScheduler)(nil).MinimumCapacity))
}

// Placer mocks base method.
func (m *MockScheduler) Placer() scheduling.Placer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placer")
	ret0, _ := ret[0].(scheduling.Placer)
	return ret0
}

// Placer indicates an expected call of Placer.
func (mr *MockSchedulerMockRecorder) Placer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placer", reflect.TypeOf((*MockScheduler)(nil).Placer))
}

// Policy mocks base method.
func (m *MockScheduler) Policy() scheduling.Policy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policy")
	ret0, _ := ret[0].(scheduling.Policy)
	return ret0
}

// Policy indicates an expected call of Policy.
func (mr *MockSchedulerMockRecorder) Policy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policy", reflect.TypeOf((*MockScheduler)(nil).Policy))
}

// PolicyKey mocks base method.
func (m *MockScheduler) PolicyKey() scheduling.PolicyKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyKey")
	ret0, _ := ret[0].(scheduling.PolicyKey)
	return ret0
}

// PolicyKey indicates an expected call of PolicyKey.
func (mr *MockSchedulerMockRecorder) PolicyKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyKey", reflect.TypeOf((*MockScheduler)(nil).PolicyKey))
}

// ReleaseIdleHosts mocks base method.
func (m *MockScheduler) ReleaseIdleHosts(n int32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIdleHosts", n)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseIdleHosts indicates an expected call of ReleaseIdleHosts.
func (mr *MockSchedulerMockRecorder) ReleaseIdleHosts(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIdleHosts", reflect.TypeOf((*MockScheduler)(nil).ReleaseIdleHosts), n)
}

// RemoteSynchronizationInterval mocks base method.
func (m *MockScheduler) RemoteSynchronizationInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteSynchronizationInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RemoteSynchronizationInterval indicates an expected call of RemoteSynchronizationInterval.
func (mr *MockSchedulerMockRecorder) RemoteSynchronizationInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteSynchronizationInterval", reflect.TypeOf((*MockScheduler)(nil).RemoteSynchronizationInterval))
}

// RemoveHost mocks base method.
func (m *MockScheduler) RemoveHost(hostId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHost", hostId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHost indicates an expected call of RemoveHost.
func (mr *MockSchedulerMockRecorder) RemoveHost(hostId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockScheduler)(nil).RemoveHost), hostId)
}

// RemoveReplicaFromHost mocks base method.
func (m *MockScheduler) RemoveReplicaFromHost(kernelReplica scheduling.KernelReplica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaFromHost", kernelReplica)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplicaFromHost indicates an expected call of RemoveReplicaFromHost.
func (mr *MockSchedulerMockRecorder) RemoveReplicaFromHost(kernelReplica any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaFromHost", reflect.TypeOf((*MockScheduler)(nil).RemoveReplicaFromHost), kernelReplica)
}

// RequestNewHost mocks base method.
func (m *MockScheduler) RequestNewHost() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestNewHost")
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestNewHost indicates an expected call of RequestNewHost.
func (mr *MockSchedulerMockRecorder) RequestNewHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestNewHost", reflect.TypeOf((*MockScheduler)(nil).RequestNewHost))
}

// ReserveResourcesForReplica mocks base method.
func (m *MockScheduler) ReserveResourcesForReplica(kernel scheduling.Kernel, replica scheduling.KernelReplica, commitResources bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveResourcesForReplica", kernel, replica, commitResources)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveResourcesForReplica indicates an expected call of ReserveResourcesForReplica.
func (mr *MockSchedulerMockRecorder) ReserveResourcesForReplica(kernel, replica, commitResources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveResourcesForReplica", reflect.TypeOf((*MockScheduler)(nil).ReserveResourcesForReplica), kernel, replica, commitResources)
}

// ScheduleKernelReplica mocks base method.
func (m *MockScheduler) ScheduleKernelReplica(replicaSpec *proto.KernelReplicaSpec, targetHost scheduling.Host, blacklistedHosts []scheduling.Host, forTraining bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleKernelReplica", replicaSpec, targetHost, blacklistedHosts, forTraining)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleKernelReplica indicates an expected call of ScheduleKernelReplica.
func (mr *MockSchedulerMockRecorder) ScheduleKernelReplica(replicaSpec, targetHost, blacklistedHosts, forTraining any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleKernelReplica", reflect.TypeOf((*MockScheduler)(nil).ScheduleKernelReplica), replicaSpec, targetHost, blacklistedHosts, forTraining)
}

// SelectReplicaForMigration mocks base method.
func (m *MockScheduler) SelectReplicaForMigration(kernel scheduling.Kernel) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectReplicaForMigration", kernel)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectReplicaForMigration indicates an expected call of SelectReplicaForMigration.
func (mr *MockSchedulerMockRecorder) SelectReplicaForMigration(kernel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectReplicaForMigration", reflect.TypeOf((*MockScheduler)(nil).SelectReplicaForMigration), kernel)
}

// SetLastCapacityValidation mocks base method.
func (m *MockScheduler) SetLastCapacityValidation(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastCapacityValidation", arg0)
}

// SetLastCapacityValidation indicates an expected call of SetLastCapacityValidation.
func (mr *MockSchedulerMockRecorder) SetLastCapacityValidation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastCapacityValidation", reflect.TypeOf((*MockScheduler)(nil).SetLastCapacityValidation), arg0)
}

// SubscriptionRatio mocks base method.
func (m *MockScheduler) SubscriptionRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SubscriptionRatio indicates an expected call of SubscriptionRatio.
func (mr *MockSchedulerMockRecorder) SubscriptionRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionRatio", reflect.TypeOf((*MockScheduler)(nil).SubscriptionRatio))
}

// UpdateRatio mocks base method.
func (m *MockScheduler) UpdateRatio(skipValidateCapacity bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRatio", skipValidateCapacity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateRatio indicates an expected call of UpdateRatio.
func (mr *MockSchedulerMockRecorder) UpdateRatio(skipValidateCapacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRatio", reflect.TypeOf((*MockScheduler)(nil).UpdateRatio), skipValidateCapacity)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
	isgomock struct{}
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// AssignMessagingMetricsProvider mocks base method.
func (m *MockServer) AssignMessagingMetricsProvider(messagingMetricsProvider server.MessagingMetricsProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignMessagingMetricsProvider", messagingMetricsProvider)
}

// AssignMessagingMetricsProvider indicates an expected call of AssignMessagingMetricsProvider.
func (mr *MockServerMockRecorder) AssignMessagingMetricsProvider(messagingMetricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignMessagingMetricsProvider", reflect.TypeOf((*MockServer)(nil).AssignMessagingMetricsProvider), messagingMetricsProvider)
}

// Close mocks base method.
func (m *MockServer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServer)(nil).Close))
}

// Context mocks base method.
func (m *MockServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockServer)(nil).Context))
}

// GetSocketPort mocks base method.
func (m *MockServer) GetSocketPort(typ messaging.MessageType) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocketPort", typ)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSocketPort indicates an expected call of GetSocketPort.
func (mr *MockServerMockRecorder) GetSocketPort(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketPort", reflect.TypeOf((*MockServer)(nil).GetSocketPort), typ)
}

// MessageAcknowledgementsEnabled mocks base method.
func (m *MockServer) MessageAcknowledgementsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAcknowledgementsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MessageAcknowledgementsEnabled indicates an expected call of MessageAcknowledgementsEnabled.
func (mr *MockServerMockRecorder) MessageAcknowledgementsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAcknowledgementsEnabled", reflect.TypeOf((*MockServer)(nil).MessageAcknowledgementsEnabled))
}

// RegisterAck mocks base method.
func (m *MockServer) RegisterAck(msg *messaging.JupyterMessage) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAck", msg)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAck indicates an expected call of RegisterAck.
func (mr *MockServerMockRecorder) RegisterAck(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAck", reflect.TypeOf((*MockServer)(nil).RegisterAck), msg)
}

// RegisterAckForRequest mocks base method.
func (m *MockServer) RegisterAckForRequest(req messaging.Request) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAckForRequest", req)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAckForRequest indicates an expected call of RegisterAckForRequest.
func (mr *MockServerMockRecorder) RegisterAckForRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAckForRequest", reflect.TypeOf((*MockServer)(nil).RegisterAckForRequest), req)
}

// SendRequest mocks base method.
func (m *MockServer) SendRequest(request messaging.Request, socket *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", request, socket)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockServerMockRecorder) SendRequest(request, socket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockServer)(nil).SendRequest), request, socket)
}

// SetComponentId mocks base method.
func (m *MockServer) SetComponentId(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentId", id)
}

// SetComponentId indicates an expected call of SetComponentId.
func (mr *MockServerMockRecorder) SetComponentId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentId", reflect.TypeOf((*MockServer)(nil).SetComponentId), id)
}

// SetContext mocks base method.
func (m *MockServer) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockServerMockRecorder) SetContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockServer)(nil).SetContext), ctx)
}

// SetIOPubSocket mocks base method.
func (m *MockServer) SetIOPubSocket(iopub *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIOPubSocket", iopub)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIOPubSocket indicates an expected call of SetIOPubSocket.
func (mr *MockServerMockRecorder) SetIOPubSocket(iopub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOPubSocket", reflect.TypeOf((*MockServer)(nil).SetIOPubSocket), iopub)
}

// Socket mocks base method.
func (m *MockServer) Socket(typ messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockServerMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockServer)(nil).Socket), typ)
}

// MockUtilization is a mock of Utilization interface.
type MockUtilization struct {
	ctrl     *gomock.Controller
	recorder *MockUtilizationMockRecorder
	isgomock struct{}
}

// MockUtilizationMockRecorder is the mock recorder for MockUtilization.
type MockUtilizationMockRecorder struct {
	mock *MockUtilization
}

// NewMockUtilization creates a new mock instance.
func NewMockUtilization(ctrl *gomock.Controller) *MockUtilization {
	mock := &MockUtilization{ctrl: ctrl}
	mock.recorder = &MockUtilizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilization) EXPECT() *MockUtilizationMockRecorder {
	return m.recorder
}

// GetAggregateGpuUtilization mocks base method.
func (m *MockUtilization) GetAggregateGpuUtilization() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregateGpuUtilization")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetAggregateGpuUtilization indicates an expected call of GetAggregateGpuUtilization.
func (mr *MockUtilizationMockRecorder) GetAggregateGpuUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregateGpuUtilization", reflect.TypeOf((*MockUtilization)(nil).GetAggregateGpuUtilization))
}

// GetCpuUtilization mocks base method.
func (m *MockUtilization) GetCpuUtilization() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuUtilization")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCpuUtilization indicates an expected call of GetCpuUtilization.
func (mr *MockUtilizationMockRecorder) GetCpuUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuUtilization", reflect.TypeOf((*MockUtilization)(nil).GetCpuUtilization))
}

// GetIndividualGpuUtilizationValues mocks base method.
func (m *MockUtilization) GetIndividualGpuUtilizationValues() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualGpuUtilizationValues")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// GetIndividualGpuUtilizationValues indicates an expected call of GetIndividualGpuUtilizationValues.
func (mr *MockUtilizationMockRecorder) GetIndividualGpuUtilizationValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualGpuUtilizationValues", reflect.TypeOf((*MockUtilization)(nil).GetIndividualGpuUtilizationValues))
}

// GetMemoryUsageMb mocks base method.
func (m *MockUtilization) GetMemoryUsageMb() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoryUsageMb")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetMemoryUsageMb indicates an expected call of GetMemoryUsageMb.
func (mr *MockUtilizationMockRecorder) GetMemoryUsageMb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoryUsageMb", reflect.TypeOf((*MockUtilization)(nil).GetMemoryUsageMb))
}

// GetNumGpus mocks base method.
func (m *MockUtilization) GetNumGpus() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumGpus")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNumGpus indicates an expected call of GetNumGpus.
func (mr *MockUtilizationMockRecorder) GetNumGpus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumGpus", reflect.TypeOf((*MockUtilization)(nil).GetNumGpus))
}

// GetVramUsageGb mocks base method.
func (m *MockUtilization) GetVramUsageGb() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVramUsageGb")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetVramUsageGb indicates an expected call of GetVramUsageGb.
func (mr *MockUtilizationMockRecorder) GetVramUsageGb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVramUsageGb", reflect.TypeOf((*MockUtilization)(nil).GetVramUsageGb))
}

// String mocks base method.
func (m *MockUtilization) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockUtilizationMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockUtilization)(nil).String))
}

// StringFormatted mocks base method.
func (m *MockUtilization) StringFormatted() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringFormatted")
	ret0, _ := ret[0].(string)
	return ret0
}

// StringFormatted indicates an expected call of StringFormatted.
func (mr *MockUtilizationMockRecorder) StringFormatted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringFormatted", reflect.TypeOf((*MockUtilization)(nil).StringFormatted))
}

// MockMetricsProvider is a mock of MetricsProvider interface.
type MockMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsProviderMockRecorder
	isgomock struct{}
}

// MockMetricsProviderMockRecorder is the mock recorder for MockMetricsProvider.
type MockMetricsProviderMockRecorder struct {
	mock *MockMetricsProvider
}

// NewMockMetricsProvider creates a new mock instance.
func NewMockMetricsProvider(ctrl *gomock.Controller) *MockMetricsProvider {
	mock := &MockMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsProvider) EXPECT() *MockMetricsProviderMockRecorder {
	return m.recorder
}

// AddAckReceivedLatency mocks base method.
func (m *MockMetricsProvider) AddAckReceivedLatency(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAckReceivedLatency", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAckReceivedLatency indicates an expected call of AddAckReceivedLatency.
func (mr *MockMetricsProviderMockRecorder) AddAckReceivedLatency(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAckReceivedLatency", reflect.TypeOf((*MockMetricsProvider)(nil).AddAckReceivedLatency), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddFailedSendAttempt mocks base method.
func (m *MockMetricsProvider) AddFailedSendAttempt(nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailedSendAttempt", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailedSendAttempt indicates an expected call of AddFailedSendAttempt.
func (mr *MockMetricsProviderMockRecorder) AddFailedSendAttempt(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailedSendAttempt", reflect.TypeOf((*MockMetricsProvider)(nil).AddFailedSendAttempt), nodeId, nodeType, socketType, jupyterMessageType)
}

// AddMessageE2ELatencyObservation mocks base method.
func (m *MockMetricsProvider) AddMessageE2ELatencyObservation(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageE2ELatencyObservation", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageE2ELatencyObservation indicates an expected call of AddMessageE2ELatencyObservation.
func (mr *MockMetricsProviderMockRecorder) AddMessageE2ELatencyObservation(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageE2ELatencyObservation", reflect.TypeOf((*MockMetricsProvider)(nil).AddMessageE2ELatencyObservation), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddNumSendAttemptsRequiredObservation mocks base method.
func (m *MockMetricsProvider) AddNumSendAttemptsRequiredObservation(acksRequired float64, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNumSendAttemptsRequiredObservation", acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNumSendAttemptsRequiredObservation indicates an expected call of AddNumSendAttemptsRequiredObservation.
func (mr *MockMetricsProviderMockRecorder) AddNumSendAttemptsRequiredObservation(acksRequired, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNumSendAttemptsRequiredObservation", reflect.TypeOf((*MockMetricsProvider)(nil).AddNumSendAttemptsRequiredObservation), acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
}

// DecrementResourceCountsForRemovedHost mocks base method.
func (m *MockMetricsProvider) DecrementResourceCountsForRemovedHost(host metrics.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecrementResourceCountsForRemovedHost", host)
}

// DecrementResourceCountsForRemovedHost indicates an expected call of DecrementResourceCountsForRemovedHost.
func (mr *MockMetricsProviderMockRecorder) DecrementResourceCountsForRemovedHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementResourceCountsForRemovedHost", reflect.TypeOf((*MockMetricsProvider)(nil).DecrementResourceCountsForRemovedHost), host)
}

// GetHostRemoteSyncLatencyMicrosecondsHistogram mocks base method.
func (m *MockMetricsProvider) GetHostRemoteSyncLatencyMicrosecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRemoteSyncLatencyMicrosecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetHostRemoteSyncLatencyMicrosecondsHistogram indicates an expected call of GetHostRemoteSyncLatencyMicrosecondsHistogram.
func (mr *MockMetricsProviderMockRecorder) GetHostRemoteSyncLatencyMicrosecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRemoteSyncLatencyMicrosecondsHistogram", reflect.TypeOf((*MockMetricsProvider)(nil).GetHostRemoteSyncLatencyMicrosecondsHistogram))
}

// GetNumDisabledHostsGauge mocks base method.
func (m *MockMetricsProvider) GetNumDisabledHostsGauge() prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumDisabledHostsGauge")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// GetNumDisabledHostsGauge indicates an expected call of GetNumDisabledHostsGauge.
func (mr *MockMetricsProviderMockRecorder) GetNumDisabledHostsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumDisabledHostsGauge", reflect.TypeOf((*MockMetricsProvider)(nil).GetNumDisabledHostsGauge))
}

// GetNumHostsGauge mocks base method.
func (m *MockMetricsProvider) GetNumHostsGauge() prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumHostsGauge")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// GetNumHostsGauge indicates an expected call of GetNumHostsGauge.
func (mr *MockMetricsProviderMockRecorder) GetNumHostsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumHostsGauge", reflect.TypeOf((*MockMetricsProvider)(nil).GetNumHostsGauge))
}

// GetPlacerFindHostLatencyMicrosecondsHistogram mocks base method.
func (m *MockMetricsProvider) GetPlacerFindHostLatencyMicrosecondsHistogram() *prometheus.HistogramVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacerFindHostLatencyMicrosecondsHistogram")
	ret0, _ := ret[0].(*prometheus.HistogramVec)
	return ret0
}

// GetPlacerFindHostLatencyMicrosecondsHistogram indicates an expected call of GetPlacerFindHostLatencyMicrosecondsHistogram.
func (mr *MockMetricsProviderMockRecorder) GetPlacerFindHostLatencyMicrosecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacerFindHostLatencyMicrosecondsHistogram", reflect.TypeOf((*MockMetricsProvider)(nil).GetPlacerFindHostLatencyMicrosecondsHistogram))
}

// GetScaleInLatencyMillisecondsHistogram mocks base method.
func (m *MockMetricsProvider) GetScaleInLatencyMillisecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleInLatencyMillisecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetScaleInLatencyMillisecondsHistogram indicates an expected call of GetScaleInLatencyMillisecondsHistogram.
func (mr *MockMetricsProviderMockRecorder) GetScaleInLatencyMillisecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleInLatencyMillisecondsHistogram", reflect.TypeOf((*MockMetricsProvider)(nil).GetScaleInLatencyMillisecondsHistogram))
}

// GetScaleOutLatencyMillisecondsHistogram mocks base method.
func (m *MockMetricsProvider) GetScaleOutLatencyMillisecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleOutLatencyMillisecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetScaleOutLatencyMillisecondsHistogram indicates an expected call of GetScaleOutLatencyMillisecondsHistogram.
func (mr *MockMetricsProviderMockRecorder) GetScaleOutLatencyMillisecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleOutLatencyMillisecondsHistogram", reflect.TypeOf((*MockMetricsProvider)(nil).GetScaleOutLatencyMillisecondsHistogram))
}

// IncrementNumTrainingEventsCompletedCounterVec mocks base method.
func (m *MockMetricsProvider) IncrementNumTrainingEventsCompletedCounterVec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementNumTrainingEventsCompletedCounterVec")
}

// IncrementNumTrainingEventsCompletedCounterVec indicates an expected call of IncrementNumTrainingEventsCompletedCounterVec.
func (mr *MockMetricsProviderMockRecorder) IncrementNumTrainingEventsCompletedCounterVec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNumTrainingEventsCompletedCounterVec", reflect.TypeOf((*MockMetricsProvider)(nil).IncrementNumTrainingEventsCompletedCounterVec))
}

// IncrementResourceCountsForNewHost mocks base method.
func (m *MockMetricsProvider) IncrementResourceCountsForNewHost(host metrics.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementResourceCountsForNewHost", host)
}

// IncrementResourceCountsForNewHost indicates an expected call of IncrementResourceCountsForNewHost.
func (mr *MockMetricsProviderMockRecorder) IncrementResourceCountsForNewHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementResourceCountsForNewHost", reflect.TypeOf((*MockMetricsProvider)(nil).IncrementResourceCountsForNewHost), host)
}

// PrometheusMetricsEnabled mocks base method.
func (m *MockMetricsProvider) PrometheusMetricsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusMetricsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrometheusMetricsEnabled indicates an expected call of PrometheusMetricsEnabled.
func (mr *MockMetricsProviderMockRecorder) PrometheusMetricsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusMetricsEnabled", reflect.TypeOf((*MockMetricsProvider)(nil).PrometheusMetricsEnabled))
}

// SentMessage mocks base method.
func (m *MockMetricsProvider) SentMessage(nodeId string, sendLatency time.Duration, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessage", nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessage indicates an expected call of SentMessage.
func (mr *MockMetricsProviderMockRecorder) SentMessage(nodeId, sendLatency, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessage", reflect.TypeOf((*MockMetricsProvider)(nil).SentMessage), nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
}

// SentMessageUnique mocks base method.
func (m *MockMetricsProvider) SentMessageUnique(nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessageUnique", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessageUnique indicates an expected call of SentMessageUnique.
func (mr *MockMetricsProviderMockRecorder) SentMessageUnique(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessageUnique", reflect.TypeOf((*MockMetricsProvider)(nil).SentMessageUnique), nodeId, nodeType, socketType, jupyterMessageType)
}

// UpdateClusterStatistics mocks base method.
func (m *MockMetricsProvider) UpdateClusterStatistics(arg0 func(*metrics.ClusterStatistics)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateClusterStatistics", arg0)
}

// UpdateClusterStatistics indicates an expected call of UpdateClusterStatistics.
func (mr *MockMetricsProviderMockRecorder) UpdateClusterStatistics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatistics", reflect.TypeOf((*MockMetricsProvider)(nil).UpdateClusterStatistics), arg0)
}

// MockPlacer is a mock of Placer interface.
type MockPlacer struct {
	ctrl     *gomock.Controller
	recorder *MockPlacerMockRecorder
	isgomock struct{}
}

// MockPlacerMockRecorder is the mock recorder for MockPlacer.
type MockPlacerMockRecorder struct {
	mock *MockPlacer
}

// NewMockPlacer creates a new mock instance.
func NewMockPlacer(ctrl *gomock.Controller) *MockPlacer {
	mock := &MockPlacer{ctrl: ctrl}
	mock.recorder = &MockPlacerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlacer) EXPECT() *MockPlacerMockRecorder {
	return m.recorder
}

// FindHost mocks base method.
func (m *MockPlacer) FindHost(blacklist []any, replicaSpec *proto.KernelReplicaSpec, forTraining bool) (scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHost", blacklist, replicaSpec, forTraining)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHost indicates an expected call of FindHost.
func (mr *MockPlacerMockRecorder) FindHost(blacklist, replicaSpec, forTraining any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHost", reflect.TypeOf((*MockPlacer)(nil).FindHost), blacklist, replicaSpec, forTraining)
}

// FindHosts mocks base method.
func (m *MockPlacer) FindHosts(blacklist []any, kernelSpec *proto.KernelSpec, numHosts int, forTraining bool) ([]scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHosts", blacklist, kernelSpec, numHosts, forTraining)
	ret0, _ := ret[0].([]scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHosts indicates an expected call of FindHosts.
func (mr *MockPlacerMockRecorder) FindHosts(blacklist, kernelSpec, numHosts, forTraining any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHosts", reflect.TypeOf((*MockPlacer)(nil).FindHosts), blacklist, kernelSpec, numHosts, forTraining)
}

// GetIndex mocks base method.
func (m *MockPlacer) GetIndex() scheduling.ClusterIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex")
	ret0, _ := ret[0].(scheduling.ClusterIndex)
	return ret0
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockPlacerMockRecorder) GetIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockPlacer)(nil).GetIndex))
}

// NumHostsInIndex mocks base method.
func (m *MockPlacer) NumHostsInIndex() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumHostsInIndex")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumHostsInIndex indicates an expected call of NumHostsInIndex.
func (mr *MockPlacerMockRecorder) NumHostsInIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumHostsInIndex", reflect.TypeOf((*MockPlacer)(nil).NumHostsInIndex))
}

// Place mocks base method.
func (m *MockPlacer) Place(host scheduling.Host, in *proto.KernelReplicaSpec) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Place", host, in)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Place indicates an expected call of Place.
func (mr *MockPlacerMockRecorder) Place(host, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Place", reflect.TypeOf((*MockPlacer)(nil).Place), host, in)
}

// Reclaim mocks base method.
func (m *MockPlacer) Reclaim(host scheduling.Host, sess scheduling.UserSession, noop bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reclaim", host, sess, noop)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reclaim indicates an expected call of Reclaim.
func (mr *MockPlacerMockRecorder) Reclaim(host, sess, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reclaim", reflect.TypeOf((*MockPlacer)(nil).Reclaim), host, sess, noop)
}

// ReserveResourcesForReplica mocks base method.
func (m *MockPlacer) ReserveResourcesForReplica(kernel scheduling.Kernel, replica scheduling.KernelReplica, commitResources bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveResourcesForReplica", kernel, replica, commitResources)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveResourcesForReplica indicates an expected call of ReserveResourcesForReplica.
func (mr *MockPlacerMockRecorder) ReserveResourcesForReplica(kernel, replica, commitResources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveResourcesForReplica", reflect.TypeOf((*MockPlacer)(nil).ReserveResourcesForReplica), kernel, replica, commitResources)
}

// UpdateIndex mocks base method.
func (m *MockPlacer) UpdateIndex(host scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateIndex", host)
}

// UpdateIndex indicates an expected call of UpdateIndex.
func (mr *MockPlacerMockRecorder) UpdateIndex(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndex", reflect.TypeOf((*MockPlacer)(nil).UpdateIndex), host)
}

// UpdateIndexMultiple mocks base method.
func (m *MockPlacer) UpdateIndexMultiple(hosts []scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateIndexMultiple", hosts)
}

// UpdateIndexMultiple indicates an expected call of UpdateIndexMultiple.
func (mr *MockPlacerMockRecorder) UpdateIndexMultiple(hosts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexMultiple", reflect.TypeOf((*MockPlacer)(nil).UpdateIndexMultiple), hosts)
}

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
	isgomock struct{}
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// AddReplica mocks base method.
func (m *MockHost) AddReplica(ctx context.Context, in *proto.ReplicaInfoWithAddr, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddReplica", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockHostMockRecorder) AddReplica(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockHost)(nil).AddReplica), varargs...)
}

// AddToCommittedResources mocks base method.
func (m *MockHost) AddToCommittedResources(spec *types.DecimalSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCommittedResources", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCommittedResources indicates an expected call of AddToCommittedResources.
func (mr *MockHostMockRecorder) AddToCommittedResources(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCommittedResources", reflect.TypeOf((*MockHost)(nil).AddToCommittedResources), spec)
}

// AddToIdleResources mocks base method.
func (m *MockHost) AddToIdleResources(spec *types.DecimalSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToIdleResources", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToIdleResources indicates an expected call of AddToIdleResources.
func (mr *MockHostMockRecorder) AddToIdleResources(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToIdleResources", reflect.TypeOf((*MockHost)(nil).AddToIdleResources), spec)
}

// AddToPendingResources mocks base method.
func (m *MockHost) AddToPendingResources(spec *types.DecimalSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPendingResources", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToPendingResources indicates an expected call of AddToPendingResources.
func (mr *MockHostMockRecorder) AddToPendingResources(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPendingResources", reflect.TypeOf((*MockHost)(nil).AddToPendingResources), spec)
}

// CanCommitResources mocks base method.
func (m *MockHost) CanCommitResources(resourceRequest types.Spec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanCommitResources", resourceRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanCommitResources indicates an expected call of CanCommitResources.
func (mr *MockHostMockRecorder) CanCommitResources(resourceRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanCommitResources", reflect.TypeOf((*MockHost)(nil).CanCommitResources), resourceRequest)
}

// CanServeContainer mocks base method.
func (m *MockHost) CanServeContainer(resourceRequest types.Spec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanServeContainer", resourceRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanServeContainer indicates an expected call of CanServeContainer.
func (mr *MockHostMockRecorder) CanServeContainer(resourceRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanServeContainer", reflect.TypeOf((*MockHost)(nil).CanServeContainer), resourceRequest)
}

// CanServeContainerWithError mocks base method.
func (m *MockHost) CanServeContainerWithError(resourceRequest types.Spec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanServeContainerWithError", resourceRequest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanServeContainerWithError indicates an expected call of CanServeContainerWithError.
func (mr *MockHostMockRecorder) CanServeContainerWithError(resourceRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanServeContainerWithError", reflect.TypeOf((*MockHost)(nil).CanServeContainerWithError), resourceRequest)
}

// CommittedCPUs mocks base method.
func (m *MockHost) CommittedCPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedCPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CommittedCPUs indicates an expected call of CommittedCPUs.
func (mr *MockHostMockRecorder) CommittedCPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedCPUs", reflect.TypeOf((*MockHost)(nil).CommittedCPUs))
}

// CommittedGPUs mocks base method.
func (m *MockHost) CommittedGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CommittedGPUs indicates an expected call of CommittedGPUs.
func (mr *MockHostMockRecorder) CommittedGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedGPUs", reflect.TypeOf((*MockHost)(nil).CommittedGPUs))
}

// CommittedMemoryMb mocks base method.
func (m *MockHost) CommittedMemoryMb() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedMemoryMb")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CommittedMemoryMb indicates an expected call of CommittedMemoryMb.
func (mr *MockHostMockRecorder) CommittedMemoryMb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedMemoryMb", reflect.TypeOf((*MockHost)(nil).CommittedMemoryMb))
}

// CommittedResources mocks base method.
func (m *MockHost) CommittedResources() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedResources")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// CommittedResources indicates an expected call of CommittedResources.
func (mr *MockHostMockRecorder) CommittedResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedResources", reflect.TypeOf((*MockHost)(nil).CommittedResources))
}

// CommittedVRAM mocks base method.
func (m *MockHost) CommittedVRAM() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommittedVRAM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CommittedVRAM indicates an expected call of CommittedVRAM.
func (mr *MockHostMockRecorder) CommittedVRAM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommittedVRAM", reflect.TypeOf((*MockHost)(nil).CommittedVRAM))
}

// Compare mocks base method.
func (m *MockHost) Compare(h2 any) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", h2)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockHostMockRecorder) Compare(h2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockHost)(nil).Compare), h2)
}

// ConsiderForScheduling mocks base method.
func (m *MockHost) ConsiderForScheduling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsiderForScheduling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConsiderForScheduling indicates an expected call of ConsiderForScheduling.
func (mr *MockHostMockRecorder) ConsiderForScheduling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsiderForScheduling", reflect.TypeOf((*MockHost)(nil).ConsiderForScheduling))
}

// ContainerRemoved mocks base method.
func (m *MockHost) ContainerRemoved(container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRemoved", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemoved indicates an expected call of ContainerRemoved.
func (mr *MockHostMockRecorder) ContainerRemoved(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemoved", reflect.TypeOf((*MockHost)(nil).ContainerRemoved), container)
}

// ContainerScheduled mocks base method.
func (m *MockHost) ContainerScheduled(container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerScheduled", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerScheduled indicates an expected call of ContainerScheduled.
func (mr *MockHostMockRecorder) ContainerScheduled(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerScheduled", reflect.TypeOf((*MockHost)(nil).ContainerScheduled), container)
}

// ContainerStartedTraining mocks base method.
func (m *MockHost) ContainerStartedTraining(container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStartedTraining", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStartedTraining indicates an expected call of ContainerStartedTraining.
func (mr *MockHostMockRecorder) ContainerStartedTraining(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStartedTraining", reflect.TypeOf((*MockHost)(nil).ContainerStartedTraining), container)
}

// ContainerStoppedTraining mocks base method.
func (m *MockHost) ContainerStoppedTraining(container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStoppedTraining", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStoppedTraining indicates an expected call of ContainerStoppedTraining.
func (mr *MockHostMockRecorder) ContainerStoppedTraining(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStoppedTraining", reflect.TypeOf((*MockHost)(nil).ContainerStoppedTraining), container)
}

// Containers mocks base method.
func (m *MockHost) Containers() hashmap.HashMap[string, scheduling.KernelContainer] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].(hashmap.HashMap[string, scheduling.KernelContainer])
	return ret0
}

// Containers indicates an expected call of Containers.
func (mr *MockHostMockRecorder) Containers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockHost)(nil).Containers))
}

// CurrentResourcesToString mocks base method.
func (m *MockHost) CurrentResourcesToString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentResourcesToString")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentResourcesToString indicates an expected call of CurrentResourcesToString.
func (mr *MockHostMockRecorder) CurrentResourcesToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentResourcesToString", reflect.TypeOf((*MockHost)(nil).CurrentResourcesToString))
}

// Disable mocks base method.
func (m *MockHost) Disable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockHostMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockHost)(nil).Disable))
}

// Enable mocks base method.
func (m *MockHost) Enable(includeInScheduling bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", includeInScheduling)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockHostMockRecorder) Enable(includeInScheduling any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockHost)(nil).Enable), includeInScheduling)
}

// Enabled mocks base method.
func (m *MockHost) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockHostMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockHost)(nil).Enabled))
}

// ErrorCallback mocks base method.
func (m *MockHost) ErrorCallback() scheduling.ErrorCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrorCallback")
	ret0, _ := ret[0].(scheduling.ErrorCallback)
	return ret0
}

// ErrorCallback indicates an expected call of ErrorCallback.
func (mr *MockHostMockRecorder) ErrorCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorCallback", reflect.TypeOf((*MockHost)(nil).ErrorCallback))
}

// ExcludeFromScheduling mocks base method.
func (m *MockHost) ExcludeFromScheduling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExcludeFromScheduling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExcludeFromScheduling indicates an expected call of ExcludeFromScheduling.
func (mr *MockHostMockRecorder) ExcludeFromScheduling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeFromScheduling", reflect.TypeOf((*MockHost)(nil).ExcludeFromScheduling))
}

// GetActualGpuInfo mocks base method.
func (m *MockHost) GetActualGpuInfo(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.GpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActualGpuInfo", varargs...)
	ret0, _ := ret[0].(*proto.GpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualGpuInfo indicates an expected call of GetActualGpuInfo.
func (mr *MockHostMockRecorder) GetActualGpuInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualGpuInfo", reflect.TypeOf((*MockHost)(nil).GetActualGpuInfo), varargs...)
}

// GetAddress mocks base method.
func (m *MockHost) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockHostMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockHost)(nil).GetAddress))
}

// GetAnyReplicaOfKernel mocks base method.
func (m *MockHost) GetAnyReplicaOfKernel(kernelId string) scheduling.KernelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnyReplicaOfKernel", kernelId)
	ret0, _ := ret[0].(scheduling.KernelContainer)
	return ret0
}

// GetAnyReplicaOfKernel indicates an expected call of GetAnyReplicaOfKernel.
func (mr *MockHostMockRecorder) GetAnyReplicaOfKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnyReplicaOfKernel", reflect.TypeOf((*MockHost)(nil).GetAnyReplicaOfKernel), kernelId)
}

// GetConnectionState mocks base method.
func (m *MockHost) GetConnectionState() connectivity.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionState")
	ret0, _ := ret[0].(connectivity.State)
	return ret0
}

// GetConnectionState indicates an expected call of GetConnectionState.
func (mr *MockHostMockRecorder) GetConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionState", reflect.TypeOf((*MockHost)(nil).GetConnectionState))
}

// GetCreatedAt mocks base method.
func (m *MockHost) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockHostMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockHost)(nil).GetCreatedAt))
}

// GetGrpcConnection mocks base method.
func (m *MockHost) GetGrpcConnection() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrpcConnection")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// GetGrpcConnection indicates an expected call of GetGrpcConnection.
func (mr *MockHostMockRecorder) GetGrpcConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrpcConnection", reflect.TypeOf((*MockHost)(nil).GetGrpcConnection))
}

// GetID mocks base method.
func (m *MockHost) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockHostMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockHost)(nil).GetID))
}

// GetIdx mocks base method.
func (m *MockHost) GetIdx(arg0 types.HeapElementMetadataKey) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdx", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetIdx indicates an expected call of GetIdx.
func (mr *MockHostMockRecorder) GetIdx(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdx", reflect.TypeOf((*MockHost)(nil).GetIdx), arg0)
}

// GetKernelStatus mocks base method.
func (m *MockHost) GetKernelStatus(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.KernelStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKernelStatus", varargs...)
	ret0, _ := ret[0].(*proto.KernelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKernelStatus indicates an expected call of GetKernelStatus.
func (mr *MockHostMockRecorder) GetKernelStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKernelStatus", reflect.TypeOf((*MockHost)(nil).GetKernelStatus), varargs...)
}

// GetLastRemoteSync mocks base method.
func (m *MockHost) GetLastRemoteSync() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastRemoteSync")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastRemoteSync indicates an expected call of GetLastRemoteSync.
func (mr *MockHostMockRecorder) GetLastRemoteSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRemoteSync", reflect.TypeOf((*MockHost)(nil).GetLastRemoteSync))
}

// GetLatestGpuInfo mocks base method.
func (m *MockHost) GetLatestGpuInfo() *proto.GpuInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestGpuInfo")
	ret0, _ := ret[0].(*proto.GpuInfo)
	return ret0
}

// GetLatestGpuInfo indicates an expected call of GetLatestGpuInfo.
func (mr *MockHostMockRecorder) GetLatestGpuInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestGpuInfo", reflect.TypeOf((*MockHost)(nil).GetLatestGpuInfo))
}

// GetLocalGatewayClient mocks base method.
func (m *MockHost) GetLocalGatewayClient() proto.LocalGatewayClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalGatewayClient")
	ret0, _ := ret[0].(proto.LocalGatewayClient)
	return ret0
}

// GetLocalGatewayClient indicates an expected call of GetLocalGatewayClient.
func (mr *MockHostMockRecorder) GetLocalGatewayClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalGatewayClient", reflect.TypeOf((*MockHost)(nil).GetLocalGatewayClient))
}

// GetMeta mocks base method.
func (m *MockHost) GetMeta(key types.HeapElementMetadataKey) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockHostMockRecorder) GetMeta(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockHost)(nil).GetMeta), key)
}

// GetNodeName mocks base method.
func (m *MockHost) GetNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeName indicates an expected call of GetNodeName.
func (mr *MockHostMockRecorder) GetNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeName", reflect.TypeOf((*MockHost)(nil).GetNodeName))
}

// GetReservation mocks base method.
func (m *MockHost) GetReservation(kernelId string) (scheduling.ResourceReservation, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", kernelId)
	ret0, _ := ret[0].(scheduling.ResourceReservation)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockHostMockRecorder) GetReservation(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*MockHost)(nil).GetReservation), kernelId)
}

// GetResourceCountsAsString mocks base method.
func (m *MockHost) GetResourceCountsAsString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceCountsAsString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceCountsAsString indicates an expected call of GetResourceCountsAsString.
func (mr *MockHostMockRecorder) GetResourceCountsAsString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceCountsAsString", reflect.TypeOf((*MockHost)(nil).GetResourceCountsAsString))
}

// GetResourceSpec mocks base method.
func (m *MockHost) GetResourceSpec() types.Spec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSpec")
	ret0, _ := ret[0].(types.Spec)
	return ret0
}

// GetResourceSpec indicates an expected call of GetResourceSpec.
func (mr *MockHostMockRecorder) GetResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSpec", reflect.TypeOf((*MockHost)(nil).GetResourceSpec))
}

// GetSpecificReplicaOfKernel mocks base method.
func (m *MockHost) GetSpecificReplicaOfKernel(kernelId string, replicaId int32) scheduling.KernelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificReplicaOfKernel", kernelId, replicaId)
	ret0, _ := ret[0].(scheduling.KernelContainer)
	return ret0
}

// GetSpecificReplicaOfKernel indicates an expected call of GetSpecificReplicaOfKernel.
func (mr *MockHostMockRecorder) GetSpecificReplicaOfKernel(kernelId, replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificReplicaOfKernel", reflect.TypeOf((*MockHost)(nil).GetSpecificReplicaOfKernel), kernelId, replicaId)
}

// GetVirtualGpuAllocations mocks base method.
func (m *MockHost) GetVirtualGpuAllocations(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.VirtualGpuAllocations, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualGpuAllocations", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuAllocations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGpuAllocations indicates an expected call of GetVirtualGpuAllocations.
func (mr *MockHostMockRecorder) GetVirtualGpuAllocations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGpuAllocations", reflect.TypeOf((*MockHost)(nil).GetVirtualGpuAllocations), varargs...)
}

// GetVirtualGpuInfo mocks base method.
func (m *MockHost) GetVirtualGpuInfo(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVirtualGpuInfo", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualGpuInfo indicates an expected call of GetVirtualGpuInfo.
func (mr *MockHostMockRecorder) GetVirtualGpuInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualGpuInfo", reflect.TypeOf((*MockHost)(nil).GetVirtualGpuInfo), varargs...)
}

// HasAnyReplicaOfKernel mocks base method.
func (m *MockHost) HasAnyReplicaOfKernel(kernelId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAnyReplicaOfKernel", kernelId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAnyReplicaOfKernel indicates an expected call of HasAnyReplicaOfKernel.
func (mr *MockHostMockRecorder) HasAnyReplicaOfKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnyReplicaOfKernel", reflect.TypeOf((*MockHost)(nil).HasAnyReplicaOfKernel), kernelId)
}

// HasReservationForKernel mocks base method.
func (m *MockHost) HasReservationForKernel(kernelId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReservationForKernel", kernelId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasReservationForKernel indicates an expected call of HasReservationForKernel.
func (mr *MockHostMockRecorder) HasReservationForKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReservationForKernel", reflect.TypeOf((*MockHost)(nil).HasReservationForKernel), kernelId)
}

// HasResourcesCommittedToKernel mocks base method.
func (m *MockHost) HasResourcesCommittedToKernel(kernelId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasResourcesCommittedToKernel", kernelId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasResourcesCommittedToKernel indicates an expected call of HasResourcesCommittedToKernel.
func (mr *MockHostMockRecorder) HasResourcesCommittedToKernel(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasResourcesCommittedToKernel", reflect.TypeOf((*MockHost)(nil).HasResourcesCommittedToKernel), kernelId)
}

// HasSpecificReplicaOfKernel mocks base method.
func (m *MockHost) HasSpecificReplicaOfKernel(kernelId string, replicaId int32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSpecificReplicaOfKernel", kernelId, replicaId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSpecificReplicaOfKernel indicates an expected call of HasSpecificReplicaOfKernel.
func (mr *MockHostMockRecorder) HasSpecificReplicaOfKernel(kernelId, replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSpecificReplicaOfKernel", reflect.TypeOf((*MockHost)(nil).HasSpecificReplicaOfKernel), kernelId, replicaId)
}

// IdleCPUs mocks base method.
func (m *MockHost) IdleCPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleCPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// IdleCPUs indicates an expected call of IdleCPUs.
func (mr *MockHostMockRecorder) IdleCPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleCPUs", reflect.TypeOf((*MockHost)(nil).IdleCPUs))
}

// IdleGPUs mocks base method.
func (m *MockHost) IdleGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// IdleGPUs indicates an expected call of IdleGPUs.
func (mr *MockHostMockRecorder) IdleGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleGPUs", reflect.TypeOf((*MockHost)(nil).IdleGPUs))
}

// IdleMemoryMb mocks base method.
func (m *MockHost) IdleMemoryMb() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleMemoryMb")
	ret0, _ := ret[0].(float64)
	return ret0
}

// IdleMemoryMb indicates an expected call of IdleMemoryMb.
func (mr *MockHostMockRecorder) IdleMemoryMb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleMemoryMb", reflect.TypeOf((*MockHost)(nil).IdleMemoryMb))
}

// IdleResources mocks base method.
func (m *MockHost) IdleResources() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleResources")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// IdleResources indicates an expected call of IdleResources.
func (mr *MockHostMockRecorder) IdleResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleResources", reflect.TypeOf((*MockHost)(nil).IdleResources))
}

// IdleVRAM mocks base method.
func (m *MockHost) IdleVRAM() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleVRAM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// IdleVRAM indicates an expected call of IdleVRAM.
func (mr *MockHostMockRecorder) IdleVRAM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleVRAM", reflect.TypeOf((*MockHost)(nil).IdleVRAM))
}

// IncludeForScheduling mocks base method.
func (m *MockHost) IncludeForScheduling() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncludeForScheduling")
	ret0, _ := ret[0].(error)
	return ret0
}

// IncludeForScheduling indicates an expected call of IncludeForScheduling.
func (mr *MockHostMockRecorder) IncludeForScheduling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncludeForScheduling", reflect.TypeOf((*MockHost)(nil).IncludeForScheduling))
}

// IsBeingConsideredForScheduling mocks base method.
func (m *MockHost) IsBeingConsideredForScheduling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBeingConsideredForScheduling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBeingConsideredForScheduling indicates an expected call of IsBeingConsideredForScheduling.
func (mr *MockHostMockRecorder) IsBeingConsideredForScheduling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBeingConsideredForScheduling", reflect.TypeOf((*MockHost)(nil).IsBeingConsideredForScheduling))
}

// IsContainedWithinIndex mocks base method.
func (m *MockHost) IsContainedWithinIndex() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContainedWithinIndex")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContainedWithinIndex indicates an expected call of IsContainedWithinIndex.
func (mr *MockHostMockRecorder) IsContainedWithinIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContainedWithinIndex", reflect.TypeOf((*MockHost)(nil).IsContainedWithinIndex))
}

// IsExcludedFromScheduling mocks base method.
func (m *MockHost) IsExcludedFromScheduling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExcludedFromScheduling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExcludedFromScheduling indicates an expected call of IsExcludedFromScheduling.
func (mr *MockHostMockRecorder) IsExcludedFromScheduling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExcludedFromScheduling", reflect.TypeOf((*MockHost)(nil).IsExcludedFromScheduling))
}

// IsProperlyInitialized mocks base method.
func (m *MockHost) IsProperlyInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProperlyInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProperlyInitialized indicates an expected call of IsProperlyInitialized.
func (mr *MockHostMockRecorder) IsProperlyInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProperlyInitialized", reflect.TypeOf((*MockHost)(nil).IsProperlyInitialized))
}

// KernelAdjustedItsResourceRequest mocks base method.
func (m *MockHost) KernelAdjustedItsResourceRequest(updatedSpec, oldSpec types.Spec, container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelAdjustedItsResourceRequest", updatedSpec, oldSpec, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelAdjustedItsResourceRequest indicates an expected call of KernelAdjustedItsResourceRequest.
func (mr *MockHostMockRecorder) KernelAdjustedItsResourceRequest(updatedSpec, oldSpec, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelAdjustedItsResourceRequest", reflect.TypeOf((*MockHost)(nil).KernelAdjustedItsResourceRequest), updatedSpec, oldSpec, container)
}

// KernelAdjustedItsResourceRequestCoordinated mocks base method.
func (m *MockHost) KernelAdjustedItsResourceRequestCoordinated(updatedSpec, oldSpec types.Spec, container scheduling.KernelContainer, coordinatedTransaction *transaction.CoordinatedTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelAdjustedItsResourceRequestCoordinated", updatedSpec, oldSpec, container, coordinatedTransaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelAdjustedItsResourceRequestCoordinated indicates an expected call of KernelAdjustedItsResourceRequestCoordinated.
func (mr *MockHostMockRecorder) KernelAdjustedItsResourceRequestCoordinated(updatedSpec, oldSpec, container, coordinatedTransaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelAdjustedItsResourceRequestCoordinated", reflect.TypeOf((*MockHost)(nil).KernelAdjustedItsResourceRequestCoordinated), updatedSpec, oldSpec, container, coordinatedTransaction)
}

// KillKernel mocks base method.
func (m *MockHost) KillKernel(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KillKernel", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillKernel indicates an expected call of KillKernel.
func (mr *MockHostMockRecorder) KillKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillKernel", reflect.TypeOf((*MockHost)(nil).KillKernel), varargs...)
}

// LastReschedule mocks base method.
func (m *MockHost) LastReschedule() types.StatFloat64Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastReschedule")
	ret0, _ := ret[0].(types.StatFloat64Field)
	return ret0
}

// LastReschedule indicates an expected call of LastReschedule.
func (mr *MockHostMockRecorder) LastReschedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastReschedule", reflect.TypeOf((*MockHost)(nil).LastReschedule))
}

// LastResourcesSnapshot mocks base method.
func (m *MockHost) LastResourcesSnapshot() types.HostResourceSnapshot[types.ArbitraryResourceSnapshot] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastResourcesSnapshot")
	ret0, _ := ret[0].(types.HostResourceSnapshot[types.ArbitraryResourceSnapshot])
	return ret0
}

// LastResourcesSnapshot indicates an expected call of LastResourcesSnapshot.
func (mr *MockHostMockRecorder) LastResourcesSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastResourcesSnapshot", reflect.TypeOf((*MockHost)(nil).LastResourcesSnapshot))
}

// NumContainers mocks base method.
func (m *MockHost) NumContainers() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumContainers")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumContainers indicates an expected call of NumContainers.
func (mr *MockHostMockRecorder) NumContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumContainers", reflect.TypeOf((*MockHost)(nil).NumContainers))
}

// NumReservations mocks base method.
func (m *MockHost) NumReservations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReservations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReservations indicates an expected call of NumReservations.
func (mr *MockHostMockRecorder) NumReservations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReservations", reflect.TypeOf((*MockHost)(nil).NumReservations))
}

// OversubscriptionFactor mocks base method.
func (m *MockHost) OversubscriptionFactor() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OversubscriptionFactor")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// OversubscriptionFactor indicates an expected call of OversubscriptionFactor.
func (mr *MockHostMockRecorder) OversubscriptionFactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OversubscriptionFactor", reflect.TypeOf((*MockHost)(nil).OversubscriptionFactor))
}

// Penalty mocks base method.
func (m *MockHost) Penalty(gpus float64) (float64, scheduling.PreemptionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Penalty", gpus)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(scheduling.PreemptionInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Penalty indicates an expected call of Penalty.
func (mr *MockHostMockRecorder) Penalty(gpus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Penalty", reflect.TypeOf((*MockHost)(nil).Penalty), gpus)
}

// PendingCPUs mocks base method.
func (m *MockHost) PendingCPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PendingCPUs indicates an expected call of PendingCPUs.
func (mr *MockHostMockRecorder) PendingCPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCPUs", reflect.TypeOf((*MockHost)(nil).PendingCPUs))
}

// PendingGPUs mocks base method.
func (m *MockHost) PendingGPUs() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingGPUs")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PendingGPUs indicates an expected call of PendingGPUs.
func (mr *MockHostMockRecorder) PendingGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingGPUs", reflect.TypeOf((*MockHost)(nil).PendingGPUs))
}

// PendingMemoryMb mocks base method.
func (m *MockHost) PendingMemoryMb() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingMemoryMb")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PendingMemoryMb indicates an expected call of PendingMemoryMb.
func (mr *MockHostMockRecorder) PendingMemoryMb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingMemoryMb", reflect.TypeOf((*MockHost)(nil).PendingMemoryMb))
}

// PendingResources mocks base method.
func (m *MockHost) PendingResources() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingResources")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// PendingResources indicates an expected call of PendingResources.
func (mr *MockHostMockRecorder) PendingResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingResources", reflect.TypeOf((*MockHost)(nil).PendingResources))
}

// PendingVRAM mocks base method.
func (m *MockHost) PendingVRAM() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingVRAM")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PendingVRAM indicates an expected call of PendingVRAM.
func (mr *MockHostMockRecorder) PendingVRAM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingVRAM", reflect.TypeOf((*MockHost)(nil).PendingVRAM))
}

// PingKernel mocks base method.
func (m *MockHost) PingKernel(ctx context.Context, in *proto.PingInstruction, opts ...grpc.CallOption) (*proto.Pong, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingKernel", varargs...)
	ret0, _ := ret[0].(*proto.Pong)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingKernel indicates an expected call of PingKernel.
func (mr *MockHostMockRecorder) PingKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingKernel", reflect.TypeOf((*MockHost)(nil).PingKernel), varargs...)
}

// PlacedCPUs mocks base method.
func (m *MockHost) PlacedCPUs() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacedCPUs")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// PlacedCPUs indicates an expected call of PlacedCPUs.
func (mr *MockHostMockRecorder) PlacedCPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacedCPUs", reflect.TypeOf((*MockHost)(nil).PlacedCPUs))
}

// PlacedGPUs mocks base method.
func (m *MockHost) PlacedGPUs() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacedGPUs")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// PlacedGPUs indicates an expected call of PlacedGPUs.
func (mr *MockHostMockRecorder) PlacedGPUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacedGPUs", reflect.TypeOf((*MockHost)(nil).PlacedGPUs))
}

// PlacedMemoryMB mocks base method.
func (m *MockHost) PlacedMemoryMB() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacedMemoryMB")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// PlacedMemoryMB indicates an expected call of PlacedMemoryMB.
func (mr *MockHostMockRecorder) PlacedMemoryMB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacedMemoryMB", reflect.TypeOf((*MockHost)(nil).PlacedMemoryMB))
}

// PlacedVRAM mocks base method.
func (m *MockHost) PlacedVRAM() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacedVRAM")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// PlacedVRAM indicates an expected call of PlacedVRAM.
func (mr *MockHostMockRecorder) PlacedVRAM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacedVRAM", reflect.TypeOf((*MockHost)(nil).PlacedVRAM))
}

// PreCommitResources mocks base method.
func (m *MockHost) PreCommitResources(container scheduling.KernelContainer, executionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCommitResources", container, executionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreCommitResources indicates an expected call of PreCommitResources.
func (mr *MockHostMockRecorder) PreCommitResources(container, executionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCommitResources", reflect.TypeOf((*MockHost)(nil).PreCommitResources), container, executionId)
}

// PrepareToMigrate mocks base method.
func (m *MockHost) PrepareToMigrate(ctx context.Context, in *proto.ReplicaInfo, opts ...grpc.CallOption) (*proto.PrepareToMigrateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareToMigrate", varargs...)
	ret0, _ := ret[0].(*proto.PrepareToMigrateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareToMigrate indicates an expected call of PrepareToMigrate.
func (mr *MockHostMockRecorder) PrepareToMigrate(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareToMigrate", reflect.TypeOf((*MockHost)(nil).PrepareToMigrate), varargs...)
}

// Priority mocks base method.
func (m *MockHost) Priority(session scheduling.UserSession) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority", session)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockHostMockRecorder) Priority(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockHost)(nil).Priority), session)
}

// RecomputeSubscribedRatio mocks base method.
func (m *MockHost) RecomputeSubscribedRatio() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecomputeSubscribedRatio")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// RecomputeSubscribedRatio indicates an expected call of RecomputeSubscribedRatio.
func (mr *MockHostMockRecorder) RecomputeSubscribedRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecomputeSubscribedRatio", reflect.TypeOf((*MockHost)(nil).RecomputeSubscribedRatio))
}

// ReconnectToGateway mocks base method.
func (m *MockHost) ReconnectToGateway(ctx context.Context, in *proto.ReconnectToGatewayRequest, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReconnectToGateway", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectToGateway indicates an expected call of ReconnectToGateway.
func (mr *MockHostMockRecorder) ReconnectToGateway(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectToGateway", reflect.TypeOf((*MockHost)(nil).ReconnectToGateway), varargs...)
}

// ReleasePreCommitedResources mocks base method.
func (m *MockHost) ReleasePreCommitedResources(container scheduling.KernelContainer, executionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePreCommitedResources", container, executionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePreCommitedResources indicates an expected call of ReleasePreCommitedResources.
func (mr *MockHostMockRecorder) ReleasePreCommitedResources(container, executionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePreCommitedResources", reflect.TypeOf((*MockHost)(nil).ReleasePreCommitedResources), container, executionId)
}

// ReleaseReservation mocks base method.
func (m *MockHost) ReleaseReservation(spec *proto.KernelSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseReservation", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseReservation indicates an expected call of ReleaseReservation.
func (mr *MockHostMockRecorder) ReleaseReservation(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseReservation", reflect.TypeOf((*MockHost)(nil).ReleaseReservation), spec)
}

// ReserveResources mocks base method.
func (m *MockHost) ReserveResources(spec *proto.KernelSpec, usePendingResources bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveResources", spec, usePendingResources)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveResources indicates an expected call of ReserveResources.
func (mr *MockHostMockRecorder) ReserveResources(spec, usePendingResources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveResources", reflect.TypeOf((*MockHost)(nil).ReserveResources), spec, usePendingResources)
}

// ReserveResourcesForSpecificReplica mocks base method.
func (m *MockHost) ReserveResourcesForSpecificReplica(replicaSpec *proto.KernelReplicaSpec, usePendingResources bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveResourcesForSpecificReplica", replicaSpec, usePendingResources)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveResourcesForSpecificReplica indicates an expected call of ReserveResourcesForSpecificReplica.
func (mr *MockHostMockRecorder) ReserveResourcesForSpecificReplica(replicaSpec, usePendingResources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveResourcesForSpecificReplica", reflect.TypeOf((*MockHost)(nil).ReserveResourcesForSpecificReplica), replicaSpec, usePendingResources)
}

// ResourceSpec mocks base method.
func (m *MockHost) ResourceSpec() types.ValidatableResourceSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(types.ValidatableResourceSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockHostMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockHost)(nil).ResourceSpec))
}

// ResourcesSnapshot mocks base method.
func (m *MockHost) ResourcesSnapshot(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.NodeResourcesSnapshotWithContainers, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResourcesSnapshot", varargs...)
	ret0, _ := ret[0].(*proto.NodeResourcesSnapshotWithContainers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesSnapshot indicates an expected call of ResourcesSnapshot.
func (mr *MockHostMockRecorder) ResourcesSnapshot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesSnapshot", reflect.TypeOf((*MockHost)(nil).ResourcesSnapshot), varargs...)
}

// Restore mocks base method.
func (m *MockHost) Restore(restoreFrom scheduling.Host, callback scheduling.ErrorCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", restoreFrom, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockHostMockRecorder) Restore(restoreFrom, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockHost)(nil).Restore), restoreFrom, callback)
}

// ScaleInPriority mocks base method.
func (m *MockHost) ScaleInPriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleInPriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// ScaleInPriority indicates an expected call of ScaleInPriority.
func (mr *MockHostMockRecorder) ScaleInPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleInPriority", reflect.TypeOf((*MockHost)(nil).ScaleInPriority))
}

// SchedulerPoolType mocks base method.
func (m *MockHost) SchedulerPoolType() scheduling.SchedulerPoolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulerPoolType")
	ret0, _ := ret[0].(scheduling.SchedulerPoolType)
	return ret0
}

// SchedulerPoolType indicates an expected call of SchedulerPoolType.
func (mr *MockHostMockRecorder) SchedulerPoolType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerPoolType", reflect.TypeOf((*MockHost)(nil).SchedulerPoolType))
}

// SetClose mocks base method.
func (m *MockHost) SetClose(ctx context.Context, in *proto.Void, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetClose", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClose indicates an expected call of SetClose.
func (mr *MockHostMockRecorder) SetClose(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClose", reflect.TypeOf((*MockHost)(nil).SetClose), varargs...)
}

// SetContainedWithinIndex mocks base method.
func (m *MockHost) SetContainedWithinIndex(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContainedWithinIndex", arg0)
}

// SetContainedWithinIndex indicates an expected call of SetContainedWithinIndex.
func (mr *MockHostMockRecorder) SetContainedWithinIndex(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainedWithinIndex", reflect.TypeOf((*MockHost)(nil).SetContainedWithinIndex), arg0)
}

// SetErrorCallback mocks base method.
func (m *MockHost) SetErrorCallback(callback scheduling.ErrorCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErrorCallback", callback)
}

// SetErrorCallback indicates an expected call of SetErrorCallback.
func (mr *MockHostMockRecorder) SetErrorCallback(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrorCallback", reflect.TypeOf((*MockHost)(nil).SetErrorCallback), callback)
}

// SetID mocks base method.
func (m *MockHost) SetID(ctx context.Context, in *proto.HostId, opts ...grpc.CallOption) (*proto.HostId, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetID", varargs...)
	ret0, _ := ret[0].(*proto.HostId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetID indicates an expected call of SetID.
func (mr *MockHostMockRecorder) SetID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockHost)(nil).SetID), varargs...)
}

// SetIdx mocks base method.
func (m *MockHost) SetIdx(arg0 types.HeapElementMetadataKey, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIdx", arg0, arg1)
}

// SetIdx indicates an expected call of SetIdx.
func (mr *MockHostMockRecorder) SetIdx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdx", reflect.TypeOf((*MockHost)(nil).SetIdx), arg0, arg1)
}

// SetMeta mocks base method.
func (m *MockHost) SetMeta(arg0 types.HeapElementMetadataKey, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMeta", arg0, arg1)
}

// SetMeta indicates an expected call of SetMeta.
func (mr *MockHostMockRecorder) SetMeta(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMeta", reflect.TypeOf((*MockHost)(nil).SetMeta), arg0, arg1)
}

// SetSchedulerPoolType mocks base method.
func (m *MockHost) SetSchedulerPoolType(schedulerPoolType scheduling.SchedulerPoolType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSchedulerPoolType", schedulerPoolType)
}

// SetSchedulerPoolType indicates an expected call of SetSchedulerPoolType.
func (mr *MockHostMockRecorder) SetSchedulerPoolType(schedulerPoolType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchedulerPoolType", reflect.TypeOf((*MockHost)(nil).SetSchedulerPoolType), schedulerPoolType)
}

// SetTotalVirtualGPUs mocks base method.
func (m *MockHost) SetTotalVirtualGPUs(ctx context.Context, in *proto.SetVirtualGPUsRequest, opts ...grpc.CallOption) (*proto.VirtualGpuInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTotalVirtualGPUs", varargs...)
	ret0, _ := ret[0].(*proto.VirtualGpuInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTotalVirtualGPUs indicates an expected call of SetTotalVirtualGPUs.
func (mr *MockHostMockRecorder) SetTotalVirtualGPUs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotalVirtualGPUs", reflect.TypeOf((*MockHost)(nil).SetTotalVirtualGPUs), varargs...)
}

// StartKernel mocks base method.
func (m *MockHost) StartKernel(ctx context.Context, in *proto.KernelSpec, opts ...grpc.CallOption) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartKernel", varargs...)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKernel indicates an expected call of StartKernel.
func (mr *MockHostMockRecorder) StartKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKernel", reflect.TypeOf((*MockHost)(nil).StartKernel), varargs...)
}

// StartKernelReplica mocks base method.
func (m *MockHost) StartKernelReplica(ctx context.Context, in *proto.KernelReplicaSpec, opts ...grpc.CallOption) (*proto.KernelConnectionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartKernelReplica", varargs...)
	ret0, _ := ret[0].(*proto.KernelConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartKernelReplica indicates an expected call of StartKernelReplica.
func (mr *MockHostMockRecorder) StartKernelReplica(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartKernelReplica", reflect.TypeOf((*MockHost)(nil).StartKernelReplica), varargs...)
}

// Stats mocks base method.
func (m *MockHost) Stats() scheduling.HostStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(scheduling.HostStatistics)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockHostMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockHost)(nil).Stats))
}

// StopKernel mocks base method.
func (m *MockHost) StopKernel(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopKernel", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopKernel indicates an expected call of StopKernel.
func (mr *MockHostMockRecorder) StopKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKernel", reflect.TypeOf((*MockHost)(nil).StopKernel), varargs...)
}

// String mocks base method.
func (m *MockHost) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockHostMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockHost)(nil).String))
}

// SubscribedRatio mocks base method.
func (m *MockHost) SubscribedRatio() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribedRatio")
	ret0, _ := ret[0].(float64)
	return ret0
}

// SubscribedRatio indicates an expected call of SubscribedRatio.
func (mr *MockHostMockRecorder) SubscribedRatio() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribedRatio", reflect.TypeOf((*MockHost)(nil).SubscribedRatio))
}

// SubscribedRatioAsDecimal mocks base method.
func (m *MockHost) SubscribedRatioAsDecimal() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribedRatioAsDecimal")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// SubscribedRatioAsDecimal indicates an expected call of SubscribedRatioAsDecimal.
func (mr *MockHostMockRecorder) SubscribedRatioAsDecimal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribedRatioAsDecimal", reflect.TypeOf((*MockHost)(nil).SubscribedRatioAsDecimal))
}

// SubtractFromCommittedResources mocks base method.
func (m *MockHost) SubtractFromCommittedResources(spec *types.DecimalSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractFromCommittedResources", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractFromCommittedResources indicates an expected call of SubtractFromCommittedResources.
func (mr *MockHostMockRecorder) SubtractFromCommittedResources(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractFromCommittedResources", reflect.TypeOf((*MockHost)(nil).SubtractFromCommittedResources), spec)
}

// SubtractFromIdleResources mocks base method.
func (m *MockHost) SubtractFromIdleResources(spec *types.DecimalSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubtractFromIdleResources", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubtractFromIdleResources indicates an expected call of SubtractFromIdleResources.
func (mr *MockHostMockRecorder) SubtractFromIdleResources(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubtractFromIdleResources", reflect.TypeOf((*MockHost)(nil).SubtractFromIdleResources), spec)
}

// SynchronizeResourceInformation mocks base method.
func (m *MockHost) SynchronizeResourceInformation() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynchronizeResourceInformation")
	ret0, _ := ret[0].(error)
	return ret0
}

// SynchronizeResourceInformation indicates an expected call of SynchronizeResourceInformation.
func (mr *MockHostMockRecorder) SynchronizeResourceInformation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynchronizeResourceInformation", reflect.TypeOf((*MockHost)(nil).SynchronizeResourceInformation))
}

// TimeSinceLastSynchronizationWithRemote mocks base method.
func (m *MockHost) TimeSinceLastSynchronizationWithRemote() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeSinceLastSynchronizationWithRemote")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeSinceLastSynchronizationWithRemote indicates an expected call of TimeSinceLastSynchronizationWithRemote.
func (mr *MockHostMockRecorder) TimeSinceLastSynchronizationWithRemote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeSinceLastSynchronizationWithRemote", reflect.TypeOf((*MockHost)(nil).TimeSinceLastSynchronizationWithRemote))
}

// ToVirtualDockerNode mocks base method.
func (m *MockHost) ToVirtualDockerNode() *proto.VirtualDockerNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToVirtualDockerNode")
	ret0, _ := ret[0].(*proto.VirtualDockerNode)
	return ret0
}

// ToVirtualDockerNode indicates an expected call of ToVirtualDockerNode.
func (mr *MockHostMockRecorder) ToVirtualDockerNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToVirtualDockerNode", reflect.TypeOf((*MockHost)(nil).ToVirtualDockerNode))
}

// UpdateReplicaAddr mocks base method.
func (m *MockHost) UpdateReplicaAddr(ctx context.Context, in *proto.ReplicaInfoWithAddr, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReplicaAddr", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReplicaAddr indicates an expected call of UpdateReplicaAddr.
func (mr *MockHostMockRecorder) UpdateReplicaAddr(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicaAddr", reflect.TypeOf((*MockHost)(nil).UpdateReplicaAddr), varargs...)
}

// WaitKernel mocks base method.
func (m *MockHost) WaitKernel(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.KernelStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitKernel", varargs...)
	ret0, _ := ret[0].(*proto.KernelStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitKernel indicates an expected call of WaitKernel.
func (mr *MockHostMockRecorder) WaitKernel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitKernel", reflect.TypeOf((*MockHost)(nil).WaitKernel), varargs...)
}

// WillBecomeTooOversubscribed mocks base method.
func (m *MockHost) WillBecomeTooOversubscribed(resourceRequest types.Spec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WillBecomeTooOversubscribed", resourceRequest)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WillBecomeTooOversubscribed indicates an expected call of WillBecomeTooOversubscribed.
func (mr *MockHostMockRecorder) WillBecomeTooOversubscribed(resourceRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WillBecomeTooOversubscribed", reflect.TypeOf((*MockHost)(nil).WillBecomeTooOversubscribed), resourceRequest)
}

// YieldNextExecution mocks base method.
func (m *MockHost) YieldNextExecution(ctx context.Context, in *proto.KernelId, opts ...grpc.CallOption) (*proto.Void, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "YieldNextExecution", varargs...)
	ret0, _ := ret[0].(*proto.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// YieldNextExecution indicates an expected call of YieldNextExecution.
func (mr *MockHostMockRecorder) YieldNextExecution(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecution", reflect.TypeOf((*MockHost)(nil).YieldNextExecution), varargs...)
}

// MockClusterIndex is a mock of ClusterIndex interface.
type MockClusterIndex struct {
	ctrl     *gomock.Controller
	recorder *MockClusterIndexMockRecorder
	isgomock struct{}
}

// MockClusterIndexMockRecorder is the mock recorder for MockClusterIndex.
type MockClusterIndexMockRecorder struct {
	mock *MockClusterIndex
}

// NewMockClusterIndex creates a new mock instance.
func NewMockClusterIndex(ctrl *gomock.Controller) *MockClusterIndex {
	mock := &MockClusterIndex{ctrl: ctrl}
	mock.recorder = &MockClusterIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterIndex) EXPECT() *MockClusterIndexMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClusterIndex) Add(arg0 scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockClusterIndexMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClusterIndex)(nil).Add), arg0)
}

// Category mocks base method.
func (m *MockClusterIndex) Category() (string, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Category")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Category indicates an expected call of Category.
func (mr *MockClusterIndexMockRecorder) Category() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Category", reflect.TypeOf((*MockClusterIndex)(nil).Category))
}

// GetMetrics mocks base method.
func (m *MockClusterIndex) GetMetrics(arg0 scheduling.Host) []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", arg0)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockClusterIndexMockRecorder) GetMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockClusterIndex)(nil).GetMetrics), arg0)
}

// Identifier mocks base method.
func (m *MockClusterIndex) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockClusterIndexMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockClusterIndex)(nil).Identifier))
}

// IsQualified mocks base method.
func (m *MockClusterIndex) IsQualified(arg0 scheduling.Host) (any, scheduling.IndexQualification) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQualified", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(scheduling.IndexQualification)
	return ret0, ret1
}

// IsQualified indicates an expected call of IsQualified.
func (mr *MockClusterIndexMockRecorder) IsQualified(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQualified", reflect.TypeOf((*MockClusterIndex)(nil).IsQualified), arg0)
}

// Len mocks base method.
func (m *MockClusterIndex) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockClusterIndexMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockClusterIndex)(nil).Len))
}

// Remove mocks base method.
func (m *MockClusterIndex) Remove(arg0 scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockClusterIndexMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockClusterIndex)(nil).Remove), arg0)
}

// Seek mocks base method.
func (m *MockClusterIndex) Seek(blacklist []any, metrics ...[]float64) (scheduling.Host, any, error) {
	m.ctrl.T.Helper()
	varargs := []any{blacklist}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Seek", varargs...)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Seek indicates an expected call of Seek.
func (mr *MockClusterIndexMockRecorder) Seek(blacklist any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{blacklist}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockClusterIndex)(nil).Seek), varargs...)
}

// SeekMultipleFrom mocks base method.
func (m *MockClusterIndex) SeekMultipleFrom(pos any, n int, criteriaFunc scheduling.HostCriteriaFunction, blacklist []any, metrics ...[]float64) ([]scheduling.Host, any, error) {
	m.ctrl.T.Helper()
	varargs := []any{pos, n, criteriaFunc, blacklist}
	for _, a := range metrics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeekMultipleFrom", varargs...)
	ret0, _ := ret[0].([]scheduling.Host)
	ret1, _ := ret[1].(any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SeekMultipleFrom indicates an expected call of SeekMultipleFrom.
func (mr *MockClusterIndexMockRecorder) SeekMultipleFrom(pos, n, criteriaFunc, blacklist any, metrics ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pos, n, criteriaFunc, blacklist}, metrics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeekMultipleFrom", reflect.TypeOf((*MockClusterIndex)(nil).SeekMultipleFrom), varargs...)
}

// Update mocks base method.
func (m *MockClusterIndex) Update(arg0 scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockClusterIndexMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterIndex)(nil).Update), arg0)
}

// UpdateMultiple mocks base method.
func (m *MockClusterIndex) UpdateMultiple(arg0 []scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMultiple", arg0)
}

// UpdateMultiple indicates an expected call of UpdateMultiple.
func (mr *MockClusterIndexMockRecorder) UpdateMultiple(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultiple", reflect.TypeOf((*MockClusterIndex)(nil).UpdateMultiple), arg0)
}

// MockKubeClient is a mock of KubeClient interface.
type MockKubeClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubeClientMockRecorder
	isgomock struct{}
}

// MockKubeClientMockRecorder is the mock recorder for MockKubeClient.
type MockKubeClientMockRecorder struct {
	mock *MockKubeClient
}

// NewMockKubeClient creates a new mock instance.
func NewMockKubeClient(ctrl *gomock.Controller) *MockKubeClient {
	mock := &MockKubeClient{ctrl: ctrl}
	mock.recorder = &MockKubeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeClient) EXPECT() *MockKubeClientMockRecorder {
	return m.recorder
}

// Clientset mocks base method.
func (m *MockKubeClient) Clientset() *kubernetes.Clientset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clientset")
	ret0, _ := ret[0].(*kubernetes.Clientset)
	return ret0
}

// Clientset indicates an expected call of Clientset.
func (mr *MockKubeClientMockRecorder) Clientset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clientset", reflect.TypeOf((*MockKubeClient)(nil).Clientset))
}

// DeleteCloneset mocks base method.
func (m *MockKubeClient) DeleteCloneset(kernelId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCloneset", kernelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCloneset indicates an expected call of DeleteCloneset.
func (mr *MockKubeClientMockRecorder) DeleteCloneset(kernelId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCloneset", reflect.TypeOf((*MockKubeClient)(nil).DeleteCloneset), kernelId)
}

// DeployDistributedKernels mocks base method.
func (m *MockKubeClient) DeployDistributedKernels(arg0 context.Context, arg1 *proto.KernelSpec) (*jupyter.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployDistributedKernels", arg0, arg1)
	ret0, _ := ret[0].(*jupyter.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployDistributedKernels indicates an expected call of DeployDistributedKernels.
func (mr *MockKubeClientMockRecorder) DeployDistributedKernels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployDistributedKernels", reflect.TypeOf((*MockKubeClient)(nil).DeployDistributedKernels), arg0, arg1)
}

// GetKubernetesNode mocks base method.
func (m *MockKubeClient) GetKubernetesNode(arg0 string) (*v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesNode indicates an expected call of GetKubernetesNode.
func (mr *MockKubeClientMockRecorder) GetKubernetesNode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesNode", reflect.TypeOf((*MockKubeClient)(nil).GetKubernetesNode), arg0)
}

// GetKubernetesNodes mocks base method.
func (m *MockKubeClient) GetKubernetesNodes() ([]v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesNodes")
	ret0, _ := ret[0].([]v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesNodes indicates an expected call of GetKubernetesNodes.
func (mr *MockKubeClientMockRecorder) GetKubernetesNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesNodes", reflect.TypeOf((*MockKubeClient)(nil).GetKubernetesNodes))
}

// RegisterChannel mocks base method.
func (m *MockKubeClient) RegisterChannel(kernelId string, startedChan chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterChannel", kernelId, startedChan)
}

// RegisterChannel indicates an expected call of RegisterChannel.
func (mr *MockKubeClientMockRecorder) RegisterChannel(kernelId, startedChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChannel", reflect.TypeOf((*MockKubeClient)(nil).RegisterChannel), kernelId, startedChan)
}

// ScaleInCloneSet mocks base method.
func (m *MockKubeClient) ScaleInCloneSet(arg0, arg1 string, arg2 chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleInCloneSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScaleInCloneSet indicates an expected call of ScaleInCloneSet.
func (mr *MockKubeClientMockRecorder) ScaleInCloneSet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleInCloneSet", reflect.TypeOf((*MockKubeClient)(nil).ScaleInCloneSet), arg0, arg1, arg2)
}

// ScaleOutCloneSet mocks base method.
func (m *MockKubeClient) ScaleOutCloneSet(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleOutCloneSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScaleOutCloneSet indicates an expected call of ScaleOutCloneSet.
func (mr *MockKubeClientMockRecorder) ScaleOutCloneSet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleOutCloneSet", reflect.TypeOf((*MockKubeClient)(nil).ScaleOutCloneSet), arg0)
}

// MockUserSession is a mock of UserSession interface.
type MockUserSession struct {
	ctrl     *gomock.Controller
	recorder *MockUserSessionMockRecorder
	isgomock struct{}
}

// MockUserSessionMockRecorder is the mock recorder for MockUserSession.
type MockUserSessionMockRecorder struct {
	mock *MockUserSession
}

// NewMockUserSession creates a new mock instance.
func NewMockUserSession(ctrl *gomock.Controller) *MockUserSession {
	mock := &MockUserSession{ctrl: ctrl}
	mock.recorder = &MockUserSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSession) EXPECT() *MockUserSessionMockRecorder {
	return m.recorder
}

// AddReplica mocks base method.
func (m *MockUserSession) AddReplica(container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockUserSessionMockRecorder) AddReplica(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockUserSession)(nil).AddReplica), container)
}

// Context mocks base method.
func (m *MockUserSession) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUserSessionMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUserSession)(nil).Context))
}

// CumulativeTrainingTime mocks base method.
func (m *MockUserSession) CumulativeTrainingTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulativeTrainingTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// CumulativeTrainingTime indicates an expected call of CumulativeTrainingTime.
func (mr *MockUserSessionMockRecorder) CumulativeTrainingTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulativeTrainingTime", reflect.TypeOf((*MockUserSession)(nil).CumulativeTrainingTime))
}

// Duration mocks base method.
func (m *MockUserSession) Duration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockUserSessionMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockUserSession)(nil).Duration))
}

// Explain mocks base method.
func (m *MockUserSession) Explain(key scheduling.ExplainerEntry) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explain", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Explain indicates an expected call of Explain.
func (mr *MockUserSessionMockRecorder) Explain(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockUserSession)(nil).Explain), key)
}

// GetReplicaContainer mocks base method.
func (m *MockUserSession) GetReplicaContainer(replicaId int32) (scheduling.KernelContainer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaContainer", replicaId)
	ret0, _ := ret[0].(scheduling.KernelContainer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetReplicaContainer indicates an expected call of GetReplicaContainer.
func (mr *MockUserSessionMockRecorder) GetReplicaContainer(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaContainer", reflect.TypeOf((*MockUserSession)(nil).GetReplicaContainer), replicaId)
}

// GetState mocks base method.
func (m *MockUserSession) GetState() scheduling.SessionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(scheduling.SessionState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockUserSessionMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockUserSession)(nil).GetState))
}

// ID mocks base method.
func (m *MockUserSession) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockUserSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockUserSession)(nil).ID))
}

// IdleTime mocks base method.
func (m *MockUserSession) IdleTime() (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleTime")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IdleTime indicates an expected call of IdleTime.
func (mr *MockUserSessionMockRecorder) IdleTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleTime", reflect.TypeOf((*MockUserSession)(nil).IdleTime))
}

// InteractivePriority mocks base method.
func (m *MockUserSession) InteractivePriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractivePriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// InteractivePriority indicates an expected call of InteractivePriority.
func (mr *MockUserSessionMockRecorder) InteractivePriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractivePriority", reflect.TypeOf((*MockUserSession)(nil).InteractivePriority))
}

// IsIdle mocks base method.
func (m *MockUserSession) IsIdle() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdle")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIdle indicates an expected call of IsIdle.
func (mr *MockUserSessionMockRecorder) IsIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdle", reflect.TypeOf((*MockUserSession)(nil).IsIdle))
}

// IsMigrating mocks base method.
func (m *MockUserSession) IsMigrating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMigrating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMigrating indicates an expected call of IsMigrating.
func (mr *MockUserSessionMockRecorder) IsMigrating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMigrating", reflect.TypeOf((*MockUserSession)(nil).IsMigrating))
}

// IsStopped mocks base method.
func (m *MockUserSession) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockUserSessionMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockUserSession)(nil).IsStopped))
}

// IsTraining mocks base method.
func (m *MockUserSession) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockUserSessionMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockUserSession)(nil).IsTraining))
}

// KernelSpec mocks base method.
func (m *MockUserSession) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockUserSessionMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockUserSession)(nil).KernelSpec))
}

// Lock mocks base method.
func (m *MockUserSession) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockUserSessionMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockUserSession)(nil).Lock))
}

// MigrationComplete mocks base method.
func (m *MockUserSession) MigrationComplete() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationComplete")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// MigrationComplete indicates an expected call of MigrationComplete.
func (mr *MockUserSessionMockRecorder) MigrationComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationComplete", reflect.TypeOf((*MockUserSession)(nil).MigrationComplete))
}

// MigrationStarted mocks base method.
func (m *MockUserSession) MigrationStarted() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationStarted")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// MigrationStarted indicates an expected call of MigrationStarted.
func (mr *MockUserSessionMockRecorder) MigrationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationStarted", reflect.TypeOf((*MockUserSession)(nil).MigrationStarted))
}

// MigrationTime mocks base method.
func (m *MockUserSession) MigrationTime() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationTime")
	ret0, _ := ret[0].(float64)
	return ret0
}

// MigrationTime indicates an expected call of MigrationTime.
func (mr *MockUserSessionMockRecorder) MigrationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationTime", reflect.TypeOf((*MockUserSession)(nil).MigrationTime))
}

// NumTrainingEventsProcessed mocks base method.
func (m *MockUserSession) NumTrainingEventsProcessed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumTrainingEventsProcessed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumTrainingEventsProcessed indicates an expected call of NumTrainingEventsProcessed.
func (mr *MockUserSessionMockRecorder) NumTrainingEventsProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumTrainingEventsProcessed", reflect.TypeOf((*MockUserSession)(nil).NumTrainingEventsProcessed))
}

// PreemptionPriority mocks base method.
func (m *MockUserSession) PreemptionPriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreemptionPriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PreemptionPriority indicates an expected call of PreemptionPriority.
func (mr *MockUserSessionMockRecorder) PreemptionPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptionPriority", reflect.TypeOf((*MockUserSession)(nil).PreemptionPriority))
}

// RemoveReplica mocks base method.
func (m *MockUserSession) RemoveReplica(container scheduling.KernelContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplica", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplica indicates an expected call of RemoveReplica.
func (mr *MockUserSessionMockRecorder) RemoveReplica(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockUserSession)(nil).RemoveReplica), container)
}

// RemoveReplicaById mocks base method.
func (m *MockUserSession) RemoveReplicaById(replicaId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaById", replicaId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplicaById indicates an expected call of RemoveReplicaById.
func (mr *MockUserSessionMockRecorder) RemoveReplicaById(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaById", reflect.TypeOf((*MockUserSession)(nil).RemoveReplicaById), replicaId)
}

// ResourceSpec mocks base method.
func (m *MockUserSession) ResourceSpec() types.CloneableSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(types.CloneableSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockUserSessionMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockUserSession)(nil).ResourceSpec))
}

// SessionStarted mocks base method.
func (m *MockUserSession) SessionStarted() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStarted")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SessionStarted indicates an expected call of SessionStarted.
func (mr *MockUserSessionMockRecorder) SessionStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStarted", reflect.TypeOf((*MockUserSession)(nil).SessionStarted))
}

// SessionStartedTraining mocks base method.
func (m *MockUserSession) SessionStartedTraining(container scheduling.KernelContainer) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStartedTraining", container)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SessionStartedTraining indicates an expected call of SessionStartedTraining.
func (mr *MockUserSessionMockRecorder) SessionStartedTraining(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStartedTraining", reflect.TypeOf((*MockUserSession)(nil).SessionStartedTraining), container)
}

// SessionStatistics mocks base method.
func (m *MockUserSession) SessionStatistics() scheduling.SessionStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStatistics")
	ret0, _ := ret[0].(scheduling.SessionStatistics)
	return ret0
}

// SessionStatistics indicates an expected call of SessionStatistics.
func (mr *MockUserSessionMockRecorder) SessionStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStatistics", reflect.TypeOf((*MockUserSession)(nil).SessionStatistics))
}

// SessionStopped mocks base method.
func (m *MockUserSession) SessionStopped() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStopped")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SessionStopped indicates an expected call of SessionStopped.
func (mr *MockUserSessionMockRecorder) SessionStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStopped", reflect.TypeOf((*MockUserSession)(nil).SessionStopped))
}

// SessionStoppedTraining mocks base method.
func (m *MockUserSession) SessionStoppedTraining(reason string) promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStoppedTraining", reason)
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SessionStoppedTraining indicates an expected call of SessionStoppedTraining.
func (mr *MockUserSessionMockRecorder) SessionStoppedTraining(reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStoppedTraining", reflect.TypeOf((*MockUserSession)(nil).SessionStoppedTraining), reason)
}

// SetContext mocks base method.
func (m *MockUserSession) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockUserSessionMockRecorder) SetContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockUserSession)(nil).SetContext), ctx)
}

// SetExpectingTraining mocks base method.
func (m *MockUserSession) SetExpectingTraining() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpectingTraining")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SetExpectingTraining indicates an expected call of SetExpectingTraining.
func (mr *MockUserSessionMockRecorder) SetExpectingTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpectingTraining", reflect.TypeOf((*MockUserSession)(nil).SetExpectingTraining))
}

// StartedAt mocks base method.
func (m *MockUserSession) StartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartedAt indicates an expected call of StartedAt.
func (mr *MockUserSessionMockRecorder) StartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedAt", reflect.TypeOf((*MockUserSession)(nil).StartedAt))
}

// String mocks base method.
func (m *MockUserSession) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockUserSessionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockUserSession)(nil).String))
}

// TrainingTime mocks base method.
func (m *MockUserSession) TrainingTime() scheduling.SessionStatistic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingTime")
	ret0, _ := ret[0].(scheduling.SessionStatistic)
	return ret0
}

// TrainingTime indicates an expected call of TrainingTime.
func (mr *MockUserSessionMockRecorder) TrainingTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingTime", reflect.TypeOf((*MockUserSession)(nil).TrainingTime))
}

// Unlock mocks base method.
func (m *MockUserSession) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockUserSessionMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockUserSession)(nil).Unlock))
}

// UpdateResourceSpec mocks base method.
func (m *MockUserSession) UpdateResourceSpec(spec types.CloneableSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateResourceSpec", spec)
}

// UpdateResourceSpec indicates an expected call of UpdateResourceSpec.
func (mr *MockUserSessionMockRecorder) UpdateResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSpec", reflect.TypeOf((*MockUserSession)(nil).UpdateResourceSpec), spec)
}

// MockKernel is a mock of Kernel interface.
type MockKernel struct {
	ctrl     *gomock.Controller
	recorder *MockKernelMockRecorder
	isgomock struct{}
}

// MockKernelMockRecorder is the mock recorder for MockKernel.
type MockKernelMockRecorder struct {
	mock *MockKernel
}

// NewMockKernel creates a new mock instance.
func NewMockKernel(ctrl *gomock.Controller) *MockKernel {
	mock := &MockKernel{ctrl: ctrl}
	mock.recorder = &MockKernelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernel) EXPECT() *MockKernelMockRecorder {
	return m.recorder
}

// AddOperationCompleted mocks base method.
func (m *MockKernel) AddOperationCompleted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationCompleted")
}

// AddOperationCompleted indicates an expected call of AddOperationCompleted.
func (mr *MockKernelMockRecorder) AddOperationCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationCompleted", reflect.TypeOf((*MockKernel)(nil).AddOperationCompleted))
}

// AddOperationStarted mocks base method.
func (m *MockKernel) AddOperationStarted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOperationStarted")
}

// AddOperationStarted indicates an expected call of AddOperationStarted.
func (mr *MockKernelMockRecorder) AddOperationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOperationStarted", reflect.TypeOf((*MockKernel)(nil).AddOperationStarted))
}

// AddReplica mocks base method.
func (m *MockKernel) AddReplica(r scheduling.KernelReplica, host scheduling.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", r, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockKernelMockRecorder) AddReplica(r, host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockKernel)(nil).AddReplica), r, host)
}

// AggregateBusyStatus mocks base method.
func (m *MockKernel) AggregateBusyStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateBusyStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// AggregateBusyStatus indicates an expected call of AggregateBusyStatus.
func (mr *MockKernelMockRecorder) AggregateBusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateBusyStatus", reflect.TypeOf((*MockKernel)(nil).AggregateBusyStatus))
}

// AssignMessagingMetricsProvider mocks base method.
func (m *MockKernel) AssignMessagingMetricsProvider(messagingMetricsProvider server.MessagingMetricsProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignMessagingMetricsProvider", messagingMetricsProvider)
}

// AssignMessagingMetricsProvider indicates an expected call of AssignMessagingMetricsProvider.
func (mr *MockKernelMockRecorder) AssignMessagingMetricsProvider(messagingMetricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignMessagingMetricsProvider", reflect.TypeOf((*MockKernel)(nil).AssignMessagingMetricsProvider), messagingMetricsProvider)
}

// BindSession mocks base method.
func (m *MockKernel) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockKernelMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockKernel)(nil).BindSession), sess)
}

// ClearSessions mocks base method.
func (m *MockKernel) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockKernelMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockKernel)(nil).ClearSessions))
}

// Close mocks base method.
func (m *MockKernel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKernelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKernel)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockKernel) ConnectionInfo() *jupyter.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*jupyter.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockKernelMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockKernel)(nil).ConnectionInfo))
}

// Context mocks base method.
func (m *MockKernel) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockKernelMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKernel)(nil).Context))
}

// DebugMode mocks base method.
func (m *MockKernel) DebugMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DebugMode indicates an expected call of DebugMode.
func (mr *MockKernelMockRecorder) DebugMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugMode", reflect.TypeOf((*MockKernel)(nil).DebugMode))
}

// ExecutionFailedCallback mocks base method.
func (m *MockKernel) ExecutionFailedCallback() scheduling.ExecutionFailedCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionFailedCallback")
	ret0, _ := ret[0].(scheduling.ExecutionFailedCallback)
	return ret0
}

// ExecutionFailedCallback indicates an expected call of ExecutionFailedCallback.
func (mr *MockKernelMockRecorder) ExecutionFailedCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionFailedCallback", reflect.TypeOf((*MockKernel)(nil).ExecutionFailedCallback))
}

// GetContainers mocks base method.
func (m *MockKernel) GetContainers() []scheduling.KernelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]scheduling.KernelContainer)
	return ret0
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockKernelMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockKernel)(nil).GetContainers))
}

// GetExecutionManager mocks base method.
func (m *MockKernel) GetExecutionManager() scheduling.ExecutionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionManager")
	ret0, _ := ret[0].(scheduling.ExecutionManager)
	return ret0
}

// GetExecutionManager indicates an expected call of GetExecutionManager.
func (mr *MockKernelMockRecorder) GetExecutionManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionManager", reflect.TypeOf((*MockKernel)(nil).GetExecutionManager))
}

// GetReadyReplica mocks base method.
func (m *MockKernel) GetReadyReplica() scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyReplica")
	ret0, _ := ret[0].(scheduling.KernelReplica)
	return ret0
}

// GetReadyReplica indicates an expected call of GetReadyReplica.
func (mr *MockKernelMockRecorder) GetReadyReplica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyReplica", reflect.TypeOf((*MockKernel)(nil).GetReadyReplica))
}

// GetReplicaByID mocks base method.
func (m *MockKernel) GetReplicaByID(id int32) (scheduling.KernelReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaByID", id)
	ret0, _ := ret[0].(scheduling.KernelReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaByID indicates an expected call of GetReplicaByID.
func (mr *MockKernelMockRecorder) GetReplicaByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaByID", reflect.TypeOf((*MockKernel)(nil).GetReplicaByID), id)
}

// GetSession mocks base method.
func (m *MockKernel) GetSession() scheduling.UserSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(scheduling.UserSession)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockKernelMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockKernel)(nil).GetSession))
}

// GetSocketPort mocks base method.
func (m *MockKernel) GetSocketPort(typ messaging.MessageType) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocketPort", typ)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSocketPort indicates an expected call of GetSocketPort.
func (mr *MockKernelMockRecorder) GetSocketPort(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketPort", reflect.TypeOf((*MockKernel)(nil).GetSocketPort), typ)
}

// ID mocks base method.
func (m *MockKernel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernel)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockKernel) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockKernelMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockKernel)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockKernel) InitializeIOForwarder() (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockKernelMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockKernel)(nil).InitializeIOForwarder))
}

// InitializeShellForwarder mocks base method.
func (m *MockKernel) InitializeShellForwarder(handler scheduling.KernelMessageHandler) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockKernelMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockKernel)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockKernel) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockKernelMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockKernel)(nil).IsReady))
}

// IsReplicaReady mocks base method.
func (m *MockKernel) IsReplicaReady(replicaId int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReplicaReady", replicaId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsReplicaReady indicates an expected call of IsReplicaReady.
func (mr *MockKernelMockRecorder) IsReplicaReady(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReplicaReady", reflect.TypeOf((*MockKernel)(nil).IsReplicaReady), replicaId)
}

// IsTraining mocks base method.
func (m *MockKernel) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockKernelMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockKernel)(nil).IsTraining))
}

// KernelSpec mocks base method.
func (m *MockKernel) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernel)(nil).KernelSpec))
}

// LastPrimaryReplica mocks base method.
func (m *MockKernel) LastPrimaryReplica() scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastPrimaryReplica")
	ret0, _ := ret[0].(scheduling.KernelReplica)
	return ret0
}

// LastPrimaryReplica indicates an expected call of LastPrimaryReplica.
func (mr *MockKernelMockRecorder) LastPrimaryReplica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastPrimaryReplica", reflect.TypeOf((*MockKernel)(nil).LastPrimaryReplica))
}

// MessageAcknowledgementsEnabled mocks base method.
func (m *MockKernel) MessageAcknowledgementsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAcknowledgementsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MessageAcknowledgementsEnabled indicates an expected call of MessageAcknowledgementsEnabled.
func (mr *MockKernelMockRecorder) MessageAcknowledgementsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAcknowledgementsEnabled", reflect.TypeOf((*MockKernel)(nil).MessageAcknowledgementsEnabled))
}

// NumActiveExecutionOperations mocks base method.
func (m *MockKernel) NumActiveExecutionOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveExecutionOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveExecutionOperations indicates an expected call of NumActiveExecutionOperations.
func (mr *MockKernelMockRecorder) NumActiveExecutionOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveExecutionOperations", reflect.TypeOf((*MockKernel)(nil).NumActiveExecutionOperations))
}

// NumActiveMigrationOperations mocks base method.
func (m *MockKernel) NumActiveMigrationOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveMigrationOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveMigrationOperations indicates an expected call of NumActiveMigrationOperations.
func (mr *MockKernelMockRecorder) NumActiveMigrationOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveMigrationOperations", reflect.TypeOf((*MockKernel)(nil).NumActiveMigrationOperations))
}

// PersistentID mocks base method.
func (m *MockKernel) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockKernelMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockKernel)(nil).PersistentID))
}

// PodOrContainerName mocks base method.
func (m *MockKernel) PodOrContainerName(id int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodOrContainerName", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodOrContainerName indicates an expected call of PodOrContainerName.
func (mr *MockKernelMockRecorder) PodOrContainerName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodOrContainerName", reflect.TypeOf((*MockKernel)(nil).PodOrContainerName), id)
}

// PrepareNewReplica mocks base method.
func (m *MockKernel) PrepareNewReplica(persistentId string, smrNodeId int32) *proto.KernelReplicaSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNewReplica", persistentId, smrNodeId)
	ret0, _ := ret[0].(*proto.KernelReplicaSpec)
	return ret0
}

// PrepareNewReplica indicates an expected call of PrepareNewReplica.
func (mr *MockKernelMockRecorder) PrepareNewReplica(persistentId, smrNodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNewReplica", reflect.TypeOf((*MockKernel)(nil).PrepareNewReplica), persistentId, smrNodeId)
}

// RegisterAck mocks base method.
func (m *MockKernel) RegisterAck(msg *messaging.JupyterMessage) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAck", msg)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAck indicates an expected call of RegisterAck.
func (mr *MockKernelMockRecorder) RegisterAck(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAck", reflect.TypeOf((*MockKernel)(nil).RegisterAck), msg)
}

// RegisterAckForRequest mocks base method.
func (m *MockKernel) RegisterAckForRequest(req messaging.Request) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAckForRequest", req)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAckForRequest indicates an expected call of RegisterAckForRequest.
func (mr *MockKernelMockRecorder) RegisterAckForRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAckForRequest", reflect.TypeOf((*MockKernel)(nil).RegisterAckForRequest), req)
}

// RegisterActiveExecution mocks base method.
func (m *MockKernel) RegisterActiveExecution(msg *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterActiveExecution", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterActiveExecution indicates an expected call of RegisterActiveExecution.
func (mr *MockKernelMockRecorder) RegisterActiveExecution(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActiveExecution", reflect.TypeOf((*MockKernel)(nil).RegisterActiveExecution), msg)
}

// ReleasePreCommitedResourcesFromReplica mocks base method.
func (m *MockKernel) ReleasePreCommitedResourcesFromReplica(replica scheduling.KernelReplica, msg *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePreCommitedResourcesFromReplica", replica, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleasePreCommitedResourcesFromReplica indicates an expected call of ReleasePreCommitedResourcesFromReplica.
func (mr *MockKernelMockRecorder) ReleasePreCommitedResourcesFromReplica(replica, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePreCommitedResourcesFromReplica", reflect.TypeOf((*MockKernel)(nil).ReleasePreCommitedResourcesFromReplica), replica, msg)
}

// RemoveAllReplicas mocks base method.
func (m *MockKernel) RemoveAllReplicas(remover scheduling.ReplicaRemover, noop bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllReplicas", remover, noop)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllReplicas indicates an expected call of RemoveAllReplicas.
func (mr *MockKernelMockRecorder) RemoveAllReplicas(remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllReplicas", reflect.TypeOf((*MockKernel)(nil).RemoveAllReplicas), remover, noop)
}

// RemoveReplica mocks base method.
func (m *MockKernel) RemoveReplica(r scheduling.KernelReplica, remover scheduling.ReplicaRemover, noop bool) (scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplica", r, remover, noop)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplica indicates an expected call of RemoveReplica.
func (mr *MockKernelMockRecorder) RemoveReplica(r, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockKernel)(nil).RemoveReplica), r, remover, noop)
}

// RemoveReplicaByID mocks base method.
func (m *MockKernel) RemoveReplicaByID(id int32, remover scheduling.ReplicaRemover, noop bool) (scheduling.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaByID", id, remover, noop)
	ret0, _ := ret[0].(scheduling.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveReplicaByID indicates an expected call of RemoveReplicaByID.
func (mr *MockKernelMockRecorder) RemoveReplicaByID(id, remover, noop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaByID", reflect.TypeOf((*MockKernel)(nil).RemoveReplicaByID), id, remover, noop)
}

// Replicas mocks base method.
func (m *MockKernel) Replicas() []scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicas")
	ret0, _ := ret[0].([]scheduling.KernelReplica)
	return ret0
}

// Replicas indicates an expected call of Replicas.
func (mr *MockKernelMockRecorder) Replicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicas", reflect.TypeOf((*MockKernel)(nil).Replicas))
}

// ReplicasAreScheduled mocks base method.
func (m *MockKernel) ReplicasAreScheduled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicasAreScheduled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReplicasAreScheduled indicates an expected call of ReplicasAreScheduled.
func (mr *MockKernelMockRecorder) ReplicasAreScheduled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicasAreScheduled", reflect.TypeOf((*MockKernel)(nil).ReplicasAreScheduled))
}

// RequestWithHandler mocks base method.
func (m *MockKernel) RequestWithHandler(ctx context.Context, arg1 string, typ messaging.MessageType, msg *messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, arg1, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockKernelMockRecorder) RequestWithHandler(ctx, arg1, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockKernel)(nil).RequestWithHandler), ctx, arg1, typ, msg, handler, done)
}

// RequestWithHandlerAndReplicas mocks base method.
func (m *MockKernel) RequestWithHandlerAndReplicas(ctx context.Context, arg1 string, typ messaging.MessageType, jupyterMessages []*messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func(), replicas ...scheduling.KernelReplica) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, arg1, typ, jupyterMessages, handler, done}
	for _, a := range replicas {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithHandlerAndReplicas", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandlerAndReplicas indicates an expected call of RequestWithHandlerAndReplicas.
func (mr *MockKernelMockRecorder) RequestWithHandlerAndReplicas(ctx, arg1, typ, jupyterMessages, handler, done any, replicas ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, arg1, typ, jupyterMessages, handler, done}, replicas...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandlerAndReplicas", reflect.TypeOf((*MockKernel)(nil).RequestWithHandlerAndReplicas), varargs...)
}

// ResetID mocks base method.
func (m *MockKernel) ResetID(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetID", id)
}

// ResetID indicates an expected call of ResetID.
func (mr *MockKernelMockRecorder) ResetID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetID", reflect.TypeOf((*MockKernel)(nil).ResetID), id)
}

// ResourceSpec mocks base method.
func (m *MockKernel) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernel)(nil).ResourceSpec))
}

// SendRequest mocks base method.
func (m *MockKernel) SendRequest(request messaging.Request, socket *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", request, socket)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockKernelMockRecorder) SendRequest(request, socket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockKernel)(nil).SendRequest), request, socket)
}

// Sessions mocks base method.
func (m *MockKernel) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockKernelMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockKernel)(nil).Sessions))
}

// SetComponentId mocks base method.
func (m *MockKernel) SetComponentId(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentId", id)
}

// SetComponentId indicates an expected call of SetComponentId.
func (mr *MockKernelMockRecorder) SetComponentId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentId", reflect.TypeOf((*MockKernel)(nil).SetComponentId), id)
}

// SetContext mocks base method.
func (m *MockKernel) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockKernelMockRecorder) SetContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockKernel)(nil).SetContext), arg0)
}

// SetIOPubSocket mocks base method.
func (m *MockKernel) SetIOPubSocket(iopub *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIOPubSocket", iopub)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIOPubSocket indicates an expected call of SetIOPubSocket.
func (mr *MockKernelMockRecorder) SetIOPubSocket(iopub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOPubSocket", reflect.TypeOf((*MockKernel)(nil).SetIOPubSocket), iopub)
}

// SetKernelKey mocks base method.
func (m *MockKernel) SetKernelKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKernelKey", arg0)
}

// SetKernelKey indicates an expected call of SetKernelKey.
func (mr *MockKernelMockRecorder) SetKernelKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKernelKey", reflect.TypeOf((*MockKernel)(nil).SetKernelKey), arg0)
}

// SetSession mocks base method.
func (m *MockKernel) SetSession(session scheduling.UserSession) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", session)
}

// SetSession indicates an expected call of SetSession.
func (mr *MockKernelMockRecorder) SetSession(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockKernel)(nil).SetSession), session)
}

// SetSignatureScheme mocks base method.
func (m *MockKernel) SetSignatureScheme(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSignatureScheme", arg0)
}

// SetSignatureScheme indicates an expected call of SetSignatureScheme.
func (mr *MockKernelMockRecorder) SetSignatureScheme(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSignatureScheme", reflect.TypeOf((*MockKernel)(nil).SetSignatureScheme), arg0)
}

// ShellListenPort mocks base method.
func (m *MockKernel) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockKernelMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockKernel)(nil).ShellListenPort))
}

// Shutdown mocks base method.
func (m *MockKernel) Shutdown(remover scheduling.ReplicaRemover, restart bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", remover, restart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockKernelMockRecorder) Shutdown(remover, restart any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockKernel)(nil).Shutdown), remover, restart)
}

// Size mocks base method.
func (m *MockKernel) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockKernelMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockKernel)(nil).Size))
}

// Socket mocks base method.
func (m *MockKernel) Socket(typ messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernel)(nil).Socket), typ)
}

// SourceKernelID mocks base method.
func (m *MockKernel) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockKernelMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockKernel)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockKernel) Status() jupyter.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(jupyter.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockKernelMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKernel)(nil).Status))
}

// String mocks base method.
func (m *MockKernel) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernel)(nil).String))
}

// TemporaryKernelReplicaClient mocks base method.
func (m *MockKernel) TemporaryKernelReplicaClient() scheduling.KernelReplicaInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemporaryKernelReplicaClient")
	ret0, _ := ret[0].(scheduling.KernelReplicaInfo)
	return ret0
}

// TemporaryKernelReplicaClient indicates an expected call of TemporaryKernelReplicaClient.
func (mr *MockKernelMockRecorder) TemporaryKernelReplicaClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemporaryKernelReplicaClient", reflect.TypeOf((*MockKernel)(nil).TemporaryKernelReplicaClient))
}

// TrainingStartedAt mocks base method.
func (m *MockKernel) TrainingStartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingStartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TrainingStartedAt indicates an expected call of TrainingStartedAt.
func (mr *MockKernelMockRecorder) TrainingStartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingStartedAt", reflect.TypeOf((*MockKernel)(nil).TrainingStartedAt))
}

// UnbindSession mocks base method.
func (m *MockKernel) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockKernelMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockKernel)(nil).UnbindSession), sess)
}

// UpdateResourceSpec mocks base method.
func (m *MockKernel) UpdateResourceSpec(spec types.CloneableSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceSpec", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceSpec indicates an expected call of UpdateResourceSpec.
func (mr *MockKernelMockRecorder) UpdateResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSpec", reflect.TypeOf((*MockKernel)(nil).UpdateResourceSpec), spec)
}

// Validate mocks base method.
func (m *MockKernel) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockKernelMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockKernel)(nil).Validate))
}

// WaitClosed mocks base method.
func (m *MockKernel) WaitClosed() jupyter.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitClosed")
	ret0, _ := ret[0].(jupyter.KernelStatus)
	return ret0
}

// WaitClosed indicates an expected call of WaitClosed.
func (mr *MockKernelMockRecorder) WaitClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitClosed", reflect.TypeOf((*MockKernel)(nil).WaitClosed))
}

// MockKernelReplica is a mock of KernelReplica interface.
type MockKernelReplica struct {
	ctrl     *gomock.Controller
	recorder *MockKernelReplicaMockRecorder
	isgomock struct{}
}

// MockKernelReplicaMockRecorder is the mock recorder for MockKernelReplica.
type MockKernelReplicaMockRecorder struct {
	mock *MockKernelReplica
}

// NewMockKernelReplica creates a new mock instance.
func NewMockKernelReplica(ctrl *gomock.Controller) *MockKernelReplica {
	mock := &MockKernelReplica{ctrl: ctrl}
	mock.recorder = &MockKernelReplicaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelReplica) EXPECT() *MockKernelReplicaMockRecorder {
	return m.recorder
}

// AddIOHandler mocks base method.
func (m *MockKernelReplica) AddIOHandler(topic string, handler scheduling.MessageBrokerHandler[scheduling.KernelReplica, *messaging.JupyterFrames, *messaging.JupyterMessage]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIOHandler", topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIOHandler indicates an expected call of AddIOHandler.
func (mr *MockKernelReplicaMockRecorder) AddIOHandler(topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIOHandler", reflect.TypeOf((*MockKernelReplica)(nil).AddIOHandler), topic, handler)
}

// Address mocks base method.
func (m *MockKernelReplica) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockKernelReplicaMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockKernelReplica)(nil).Address))
}

// AssignMessagingMetricsProvider mocks base method.
func (m *MockKernelReplica) AssignMessagingMetricsProvider(messagingMetricsProvider server.MessagingMetricsProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AssignMessagingMetricsProvider", messagingMetricsProvider)
}

// AssignMessagingMetricsProvider indicates an expected call of AssignMessagingMetricsProvider.
func (mr *MockKernelReplicaMockRecorder) AssignMessagingMetricsProvider(messagingMetricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignMessagingMetricsProvider", reflect.TypeOf((*MockKernelReplica)(nil).AssignMessagingMetricsProvider), messagingMetricsProvider)
}

// BindSession mocks base method.
func (m *MockKernelReplica) BindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindSession", sess)
}

// BindSession indicates an expected call of BindSession.
func (mr *MockKernelReplicaMockRecorder) BindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindSession", reflect.TypeOf((*MockKernelReplica)(nil).BindSession), sess)
}

// BusyStatus mocks base method.
func (m *MockKernelReplica) BusyStatus() (string, *messaging.JupyterMessage) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BusyStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*messaging.JupyterMessage)
	return ret0, ret1
}

// BusyStatus indicates an expected call of BusyStatus.
func (mr *MockKernelReplicaMockRecorder) BusyStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BusyStatus", reflect.TypeOf((*MockKernelReplica)(nil).BusyStatus))
}

// ClearSessions mocks base method.
func (m *MockKernelReplica) ClearSessions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessions")
}

// ClearSessions indicates an expected call of ClearSessions.
func (mr *MockKernelReplicaMockRecorder) ClearSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessions", reflect.TypeOf((*MockKernelReplica)(nil).ClearSessions))
}

// Close mocks base method.
func (m *MockKernelReplica) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKernelReplicaMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKernelReplica)(nil).Close))
}

// ConnectionInfo mocks base method.
func (m *MockKernelReplica) ConnectionInfo() *jupyter.ConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionInfo")
	ret0, _ := ret[0].(*jupyter.ConnectionInfo)
	return ret0
}

// ConnectionInfo indicates an expected call of ConnectionInfo.
func (mr *MockKernelReplicaMockRecorder) ConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionInfo", reflect.TypeOf((*MockKernelReplica)(nil).ConnectionInfo))
}

// Container mocks base method.
func (m *MockKernelReplica) Container() scheduling.KernelContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(scheduling.KernelContainer)
	return ret0
}

// Container indicates an expected call of Container.
func (mr *MockKernelReplicaMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockKernelReplica)(nil).Container))
}

// Context mocks base method.
func (m *MockKernelReplica) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockKernelReplicaMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKernelReplica)(nil).Context))
}

// GetPodOrContainerName mocks base method.
func (m *MockKernelReplica) GetPodOrContainerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodOrContainerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPodOrContainerName indicates an expected call of GetPodOrContainerName.
func (mr *MockKernelReplicaMockRecorder) GetPodOrContainerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodOrContainerName", reflect.TypeOf((*MockKernelReplica)(nil).GetPodOrContainerName))
}

// GetSocketPort mocks base method.
func (m *MockKernelReplica) GetSocketPort(typ messaging.MessageType) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocketPort", typ)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSocketPort indicates an expected call of GetSocketPort.
func (mr *MockKernelReplicaMockRecorder) GetSocketPort(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocketPort", reflect.TypeOf((*MockKernelReplica)(nil).GetSocketPort), typ)
}

// HandleIOKernelStatus mocks base method.
func (m *MockKernelReplica) HandleIOKernelStatus(kernelReplica scheduling.KernelReplica, frames *messaging.JupyterFrames, msg *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIOKernelStatus", kernelReplica, frames, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIOKernelStatus indicates an expected call of HandleIOKernelStatus.
func (mr *MockKernelReplicaMockRecorder) HandleIOKernelStatus(kernelReplica, frames, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIOKernelStatus", reflect.TypeOf((*MockKernelReplica)(nil).HandleIOKernelStatus), kernelReplica, frames, msg)
}

// Host mocks base method.
func (m *MockKernelReplica) Host() scheduling.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(scheduling.Host)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockKernelReplicaMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockKernelReplica)(nil).Host))
}

// HostId mocks base method.
func (m *MockKernelReplica) HostId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostId")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostId indicates an expected call of HostId.
func (mr *MockKernelReplicaMockRecorder) HostId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostId", reflect.TypeOf((*MockKernelReplica)(nil).HostId))
}

// ID mocks base method.
func (m *MockKernelReplica) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockKernelReplicaMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockKernelReplica)(nil).ID))
}

// IOPubListenPort mocks base method.
func (m *MockKernelReplica) IOPubListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IOPubListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// IOPubListenPort indicates an expected call of IOPubListenPort.
func (mr *MockKernelReplicaMockRecorder) IOPubListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IOPubListenPort", reflect.TypeOf((*MockKernelReplica)(nil).IOPubListenPort))
}

// InitializeIOForwarder mocks base method.
func (m *MockKernelReplica) InitializeIOForwarder() (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOForwarder")
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOForwarder indicates an expected call of InitializeIOForwarder.
func (mr *MockKernelReplicaMockRecorder) InitializeIOForwarder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOForwarder", reflect.TypeOf((*MockKernelReplica)(nil).InitializeIOForwarder))
}

// InitializeIOSub mocks base method.
func (m *MockKernelReplica) InitializeIOSub(handler messaging.MessageHandler, subscriptionTopic string) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeIOSub", handler, subscriptionTopic)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeIOSub indicates an expected call of InitializeIOSub.
func (mr *MockKernelReplicaMockRecorder) InitializeIOSub(handler, subscriptionTopic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeIOSub", reflect.TypeOf((*MockKernelReplica)(nil).InitializeIOSub), handler, subscriptionTopic)
}

// InitializeResourceSpec mocks base method.
func (m *MockKernelReplica) InitializeResourceSpec(spec *proto.ResourceSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitializeResourceSpec", spec)
}

// InitializeResourceSpec indicates an expected call of InitializeResourceSpec.
func (mr *MockKernelReplicaMockRecorder) InitializeResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeResourceSpec", reflect.TypeOf((*MockKernelReplica)(nil).InitializeResourceSpec), spec)
}

// InitializeShellForwarder mocks base method.
func (m *MockKernelReplica) InitializeShellForwarder(handler scheduling.KernelMessageHandler) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeShellForwarder", handler)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeShellForwarder indicates an expected call of InitializeShellForwarder.
func (mr *MockKernelReplicaMockRecorder) InitializeShellForwarder(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeShellForwarder", reflect.TypeOf((*MockKernelReplica)(nil).InitializeShellForwarder), handler)
}

// IsReady mocks base method.
func (m *MockKernelReplica) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockKernelReplicaMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockKernelReplica)(nil).IsReady))
}

// IsTraining mocks base method.
func (m *MockKernelReplica) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockKernelReplicaMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockKernelReplica)(nil).IsTraining))
}

// KernelReplicaSpec mocks base method.
func (m *MockKernelReplica) KernelReplicaSpec() *proto.KernelReplicaSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelReplicaSpec")
	ret0, _ := ret[0].(*proto.KernelReplicaSpec)
	return ret0
}

// KernelReplicaSpec indicates an expected call of KernelReplicaSpec.
func (mr *MockKernelReplicaMockRecorder) KernelReplicaSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelReplicaSpec", reflect.TypeOf((*MockKernelReplica)(nil).KernelReplicaSpec))
}

// KernelSpec mocks base method.
func (m *MockKernelReplica) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockKernelReplicaMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockKernelReplica)(nil).KernelSpec))
}

// KernelStartedTraining mocks base method.
func (m *MockKernelReplica) KernelStartedTraining() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelStartedTraining")
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelStartedTraining indicates an expected call of KernelStartedTraining.
func (mr *MockKernelReplicaMockRecorder) KernelStartedTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelStartedTraining", reflect.TypeOf((*MockKernelReplica)(nil).KernelStartedTraining))
}

// KernelStoppedTraining mocks base method.
func (m *MockKernelReplica) KernelStoppedTraining(reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelStoppedTraining", reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// KernelStoppedTraining indicates an expected call of KernelStoppedTraining.
func (mr *MockKernelReplicaMockRecorder) KernelStoppedTraining(reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelStoppedTraining", reflect.TypeOf((*MockKernelReplica)(nil).KernelStoppedTraining), reason)
}

// LastTrainingTimePrometheusUpdate mocks base method.
func (m *MockKernelReplica) LastTrainingTimePrometheusUpdate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastTrainingTimePrometheusUpdate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastTrainingTimePrometheusUpdate indicates an expected call of LastTrainingTimePrometheusUpdate.
func (mr *MockKernelReplicaMockRecorder) LastTrainingTimePrometheusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTrainingTimePrometheusUpdate", reflect.TypeOf((*MockKernelReplica)(nil).LastTrainingTimePrometheusUpdate))
}

// MessageAcknowledgementsEnabled mocks base method.
func (m *MockKernelReplica) MessageAcknowledgementsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAcknowledgementsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MessageAcknowledgementsEnabled indicates an expected call of MessageAcknowledgementsEnabled.
func (mr *MockKernelReplicaMockRecorder) MessageAcknowledgementsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAcknowledgementsEnabled", reflect.TypeOf((*MockKernelReplica)(nil).MessageAcknowledgementsEnabled))
}

// NodeName mocks base method.
func (m *MockKernelReplica) NodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// NodeName indicates an expected call of NodeName.
func (mr *MockKernelReplicaMockRecorder) NodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeName", reflect.TypeOf((*MockKernelReplica)(nil).NodeName))
}

// NumPendingExecuteRequests mocks base method.
func (m *MockKernelReplica) NumPendingExecuteRequests() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumPendingExecuteRequests")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumPendingExecuteRequests indicates an expected call of NumPendingExecuteRequests.
func (mr *MockKernelReplicaMockRecorder) NumPendingExecuteRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumPendingExecuteRequests", reflect.TypeOf((*MockKernelReplica)(nil).NumPendingExecuteRequests))
}

// PersistentID mocks base method.
func (m *MockKernelReplica) PersistentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// PersistentID indicates an expected call of PersistentID.
func (mr *MockKernelReplicaMockRecorder) PersistentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentID", reflect.TypeOf((*MockKernelReplica)(nil).PersistentID))
}

// ReceivedExecuteReply mocks base method.
func (m *MockKernelReplica) ReceivedExecuteReply(msg *messaging.JupyterMessage, own bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceivedExecuteReply", msg, own)
}

// ReceivedExecuteReply indicates an expected call of ReceivedExecuteReply.
func (mr *MockKernelReplicaMockRecorder) ReceivedExecuteReply(msg, own any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedExecuteReply", reflect.TypeOf((*MockKernelReplica)(nil).ReceivedExecuteReply), msg, own)
}

// ReconnectSocket mocks base method.
func (m *MockKernelReplica) ReconnectSocket(typ messaging.MessageType) (*messaging.Socket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconnectSocket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectSocket indicates an expected call of ReconnectSocket.
func (mr *MockKernelReplicaMockRecorder) ReconnectSocket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectSocket", reflect.TypeOf((*MockKernelReplica)(nil).ReconnectSocket), typ)
}

// RegisterAck mocks base method.
func (m *MockKernelReplica) RegisterAck(msg *messaging.JupyterMessage) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAck", msg)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAck indicates an expected call of RegisterAck.
func (mr *MockKernelReplicaMockRecorder) RegisterAck(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAck", reflect.TypeOf((*MockKernelReplica)(nil).RegisterAck), msg)
}

// RegisterAckForRequest mocks base method.
func (m *MockKernelReplica) RegisterAckForRequest(req messaging.Request) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAckForRequest", req)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// RegisterAckForRequest indicates an expected call of RegisterAckForRequest.
func (mr *MockKernelReplicaMockRecorder) RegisterAckForRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAckForRequest", reflect.TypeOf((*MockKernelReplica)(nil).RegisterAckForRequest), req)
}

// ReplicaID mocks base method.
func (m *MockKernelReplica) ReplicaID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ReplicaID indicates an expected call of ReplicaID.
func (mr *MockKernelReplicaMockRecorder) ReplicaID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaID", reflect.TypeOf((*MockKernelReplica)(nil).ReplicaID))
}

// RequestWithHandler mocks base method.
func (m *MockKernelReplica) RequestWithHandler(ctx context.Context, arg1 string, typ messaging.MessageType, msg *messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandler", ctx, arg1, typ, msg, handler, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandler indicates an expected call of RequestWithHandler.
func (mr *MockKernelReplicaMockRecorder) RequestWithHandler(ctx, arg1, typ, msg, handler, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandler", reflect.TypeOf((*MockKernelReplica)(nil).RequestWithHandler), ctx, arg1, typ, msg, handler, done)
}

// RequestWithHandlerAndWaitOptionGetter mocks base method.
func (m *MockKernelReplica) RequestWithHandlerAndWaitOptionGetter(parentContext context.Context, typ messaging.MessageType, msg *messaging.JupyterMessage, handler scheduling.KernelReplicaMessageHandler, getOption server.WaitResponseOptionGetter, done func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithHandlerAndWaitOptionGetter", parentContext, typ, msg, handler, getOption, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestWithHandlerAndWaitOptionGetter indicates an expected call of RequestWithHandlerAndWaitOptionGetter.
func (mr *MockKernelReplicaMockRecorder) RequestWithHandlerAndWaitOptionGetter(parentContext, typ, msg, handler, getOption, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithHandlerAndWaitOptionGetter", reflect.TypeOf((*MockKernelReplica)(nil).RequestWithHandlerAndWaitOptionGetter), parentContext, typ, msg, handler, getOption, done)
}

// ResourceSpec mocks base method.
func (m *MockKernelReplica) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelReplicaMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernelReplica)(nil).ResourceSpec))
}

// SendRequest mocks base method.
func (m *MockKernelReplica) SendRequest(request messaging.Request, socket *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", request, socket)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockKernelReplicaMockRecorder) SendRequest(request, socket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockKernelReplica)(nil).SendRequest), request, socket)
}

// SendingExecuteRequest mocks base method.
func (m *MockKernelReplica) SendingExecuteRequest(msg *messaging.JupyterMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendingExecuteRequest", msg)
}

// SendingExecuteRequest indicates an expected call of SendingExecuteRequest.
func (mr *MockKernelReplicaMockRecorder) SendingExecuteRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendingExecuteRequest", reflect.TypeOf((*MockKernelReplica)(nil).SendingExecuteRequest), msg)
}

// Sessions mocks base method.
func (m *MockKernelReplica) Sessions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sessions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sessions indicates an expected call of Sessions.
func (mr *MockKernelReplicaMockRecorder) Sessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sessions", reflect.TypeOf((*MockKernelReplica)(nil).Sessions))
}

// SetComponentId mocks base method.
func (m *MockKernelReplica) SetComponentId(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComponentId", id)
}

// SetComponentId indicates an expected call of SetComponentId.
func (mr *MockKernelReplicaMockRecorder) SetComponentId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComponentId", reflect.TypeOf((*MockKernelReplica)(nil).SetComponentId), id)
}

// SetContainer mocks base method.
func (m *MockKernelReplica) SetContainer(container scheduling.KernelContainer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContainer", container)
}

// SetContainer indicates an expected call of SetContainer.
func (mr *MockKernelReplicaMockRecorder) SetContainer(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainer", reflect.TypeOf((*MockKernelReplica)(nil).SetContainer), container)
}

// SetContext mocks base method.
func (m *MockKernelReplica) SetContext(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", arg0)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockKernelReplicaMockRecorder) SetContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockKernelReplica)(nil).SetContext), arg0)
}

// SetIOPubSocket mocks base method.
func (m *MockKernelReplica) SetIOPubSocket(iopub *messaging.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIOPubSocket", iopub)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIOPubSocket indicates an expected call of SetIOPubSocket.
func (mr *MockKernelReplicaMockRecorder) SetIOPubSocket(iopub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIOPubSocket", reflect.TypeOf((*MockKernelReplica)(nil).SetIOPubSocket), iopub)
}

// SetLastTrainingTimePrometheusUpdate mocks base method.
func (m *MockKernelReplica) SetLastTrainingTimePrometheusUpdate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastTrainingTimePrometheusUpdate")
}

// SetLastTrainingTimePrometheusUpdate indicates an expected call of SetLastTrainingTimePrometheusUpdate.
func (mr *MockKernelReplicaMockRecorder) SetLastTrainingTimePrometheusUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastTrainingTimePrometheusUpdate", reflect.TypeOf((*MockKernelReplica)(nil).SetLastTrainingTimePrometheusUpdate))
}

// SetNodeName mocks base method.
func (m *MockKernelReplica) SetNodeName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNodeName", name)
}

// SetNodeName indicates an expected call of SetNodeName.
func (mr *MockKernelReplicaMockRecorder) SetNodeName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeName", reflect.TypeOf((*MockKernelReplica)(nil).SetNodeName), name)
}

// SetPersistentID mocks base method.
func (m *MockKernelReplica) SetPersistentID(persistentId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPersistentID", persistentId)
}

// SetPersistentID indicates an expected call of SetPersistentID.
func (mr *MockKernelReplicaMockRecorder) SetPersistentID(persistentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersistentID", reflect.TypeOf((*MockKernelReplica)(nil).SetPersistentID), persistentId)
}

// SetPodOrContainerName mocks base method.
func (m *MockKernelReplica) SetPodOrContainerName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPodOrContainerName", name)
}

// SetPodOrContainerName indicates an expected call of SetPodOrContainerName.
func (mr *MockKernelReplicaMockRecorder) SetPodOrContainerName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPodOrContainerName", reflect.TypeOf((*MockKernelReplica)(nil).SetPodOrContainerName), name)
}

// SetReady mocks base method.
func (m *MockKernelReplica) SetReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReady")
}

// SetReady indicates an expected call of SetReady.
func (mr *MockKernelReplicaMockRecorder) SetReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockKernelReplica)(nil).SetReady))
}

// SetReplicaID mocks base method.
func (m *MockKernelReplica) SetReplicaID(replicaId int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReplicaID", replicaId)
}

// SetReplicaID indicates an expected call of SetReplicaID.
func (mr *MockKernelReplicaMockRecorder) SetReplicaID(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicaID", reflect.TypeOf((*MockKernelReplica)(nil).SetReplicaID), replicaId)
}

// SetWorkloadId mocks base method.
func (m *MockKernelReplica) SetWorkloadId(workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWorkloadId", workloadId)
}

// SetWorkloadId indicates an expected call of SetWorkloadId.
func (mr *MockKernelReplicaMockRecorder) SetWorkloadId(workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkloadId", reflect.TypeOf((*MockKernelReplica)(nil).SetWorkloadId), workloadId)
}

// ShellListenPort mocks base method.
func (m *MockKernelReplica) ShellListenPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShellListenPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// ShellListenPort indicates an expected call of ShellListenPort.
func (mr *MockKernelReplicaMockRecorder) ShellListenPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShellListenPort", reflect.TypeOf((*MockKernelReplica)(nil).ShellListenPort))
}

// ShouldAckMessages mocks base method.
func (m *MockKernelReplica) ShouldAckMessages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldAckMessages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldAckMessages indicates an expected call of ShouldAckMessages.
func (mr *MockKernelReplicaMockRecorder) ShouldAckMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldAckMessages", reflect.TypeOf((*MockKernelReplica)(nil).ShouldAckMessages))
}

// Socket mocks base method.
func (m *MockKernelReplica) Socket(typ messaging.MessageType) *messaging.Socket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", typ)
	ret0, _ := ret[0].(*messaging.Socket)
	return ret0
}

// Socket indicates an expected call of Socket.
func (mr *MockKernelReplicaMockRecorder) Socket(typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockKernelReplica)(nil).Socket), typ)
}

// SourceKernelID mocks base method.
func (m *MockKernelReplica) SourceKernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceKernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SourceKernelID indicates an expected call of SourceKernelID.
func (mr *MockKernelReplicaMockRecorder) SourceKernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceKernelID", reflect.TypeOf((*MockKernelReplica)(nil).SourceKernelID))
}

// Status mocks base method.
func (m *MockKernelReplica) Status() jupyter.KernelStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(jupyter.KernelStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockKernelReplicaMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockKernelReplica)(nil).Status))
}

// String mocks base method.
func (m *MockKernelReplica) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelReplicaMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelReplica)(nil).String))
}

// SupposedToYieldNextExecutionRequest mocks base method.
func (m *MockKernelReplica) SupposedToYieldNextExecutionRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupposedToYieldNextExecutionRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupposedToYieldNextExecutionRequest indicates an expected call of SupposedToYieldNextExecutionRequest.
func (mr *MockKernelReplicaMockRecorder) SupposedToYieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupposedToYieldNextExecutionRequest", reflect.TypeOf((*MockKernelReplica)(nil).SupposedToYieldNextExecutionRequest))
}

// TrainingStartedAt mocks base method.
func (m *MockKernelReplica) TrainingStartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingStartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// TrainingStartedAt indicates an expected call of TrainingStartedAt.
func (mr *MockKernelReplicaMockRecorder) TrainingStartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingStartedAt", reflect.TypeOf((*MockKernelReplica)(nil).TrainingStartedAt))
}

// UnbindSession mocks base method.
func (m *MockKernelReplica) UnbindSession(sess string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnbindSession", sess)
}

// UnbindSession indicates an expected call of UnbindSession.
func (mr *MockKernelReplicaMockRecorder) UnbindSession(sess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindSession", reflect.TypeOf((*MockKernelReplica)(nil).UnbindSession), sess)
}

// UpdateResourceSpec mocks base method.
func (m *MockKernelReplica) UpdateResourceSpec(newSpec types.Spec, tx *transaction.CoordinatedTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceSpec", newSpec, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceSpec indicates an expected call of UpdateResourceSpec.
func (mr *MockKernelReplicaMockRecorder) UpdateResourceSpec(newSpec, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSpec", reflect.TypeOf((*MockKernelReplica)(nil).UpdateResourceSpec), newSpec, tx)
}

// Validate mocks base method.
func (m *MockKernelReplica) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockKernelReplicaMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockKernelReplica)(nil).Validate))
}

// WaitForPendingExecuteRequests mocks base method.
func (m *MockKernelReplica) WaitForPendingExecuteRequests() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForPendingExecuteRequests")
}

// WaitForPendingExecuteRequests indicates an expected call of WaitForPendingExecuteRequests.
func (mr *MockKernelReplicaMockRecorder) WaitForPendingExecuteRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForPendingExecuteRequests", reflect.TypeOf((*MockKernelReplica)(nil).WaitForPendingExecuteRequests))
}

// WaitForTrainingToStop mocks base method.
func (m *MockKernelReplica) WaitForTrainingToStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForTrainingToStop")
}

// WaitForTrainingToStop indicates an expected call of WaitForTrainingToStop.
func (mr *MockKernelReplicaMockRecorder) WaitForTrainingToStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTrainingToStop", reflect.TypeOf((*MockKernelReplica)(nil).WaitForTrainingToStop))
}

// WorkloadId mocks base method.
func (m *MockKernelReplica) WorkloadId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadId")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkloadId indicates an expected call of WorkloadId.
func (mr *MockKernelReplicaMockRecorder) WorkloadId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadId", reflect.TypeOf((*MockKernelReplica)(nil).WorkloadId))
}

// WorkloadIdSet mocks base method.
func (m *MockKernelReplica) WorkloadIdSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadIdSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WorkloadIdSet indicates an expected call of WorkloadIdSet.
func (mr *MockKernelReplicaMockRecorder) WorkloadIdSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadIdSet", reflect.TypeOf((*MockKernelReplica)(nil).WorkloadIdSet))
}

// YieldNextExecutionRequest mocks base method.
func (m *MockKernelReplica) YieldNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldNextExecutionRequest")
}

// YieldNextExecutionRequest indicates an expected call of YieldNextExecutionRequest.
func (mr *MockKernelReplicaMockRecorder) YieldNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldNextExecutionRequest", reflect.TypeOf((*MockKernelReplica)(nil).YieldNextExecutionRequest))
}

// YieldedNextExecutionRequest mocks base method.
func (m *MockKernelReplica) YieldedNextExecutionRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "YieldedNextExecutionRequest")
}

// YieldedNextExecutionRequest indicates an expected call of YieldedNextExecutionRequest.
func (mr *MockKernelReplicaMockRecorder) YieldedNextExecutionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldedNextExecutionRequest", reflect.TypeOf((*MockKernelReplica)(nil).YieldedNextExecutionRequest))
}

// MockKernelContainer is a mock of KernelContainer interface.
type MockKernelContainer struct {
	ctrl     *gomock.Controller
	recorder *MockKernelContainerMockRecorder
	isgomock struct{}
}

// MockKernelContainerMockRecorder is the mock recorder for MockKernelContainer.
type MockKernelContainerMockRecorder struct {
	mock *MockKernelContainer
}

// NewMockKernelContainer creates a new mock instance.
func NewMockKernelContainer(ctrl *gomock.Controller) *MockKernelContainer {
	mock := &MockKernelContainer{ctrl: ctrl}
	mock.recorder = &MockKernelContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelContainer) EXPECT() *MockKernelContainerMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockKernelContainer) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockKernelContainerMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockKernelContainer)(nil).Address))
}

// ContainerID mocks base method.
func (m *MockKernelContainer) ContainerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContainerID indicates an expected call of ContainerID.
func (mr *MockKernelContainerMockRecorder) ContainerID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerID", reflect.TypeOf((*MockKernelContainer)(nil).ContainerID))
}

// ContainerState mocks base method.
func (m *MockKernelContainer) ContainerState() scheduling.ContainerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerState")
	ret0, _ := ret[0].(scheduling.ContainerState)
	return ret0
}

// ContainerState indicates an expected call of ContainerState.
func (mr *MockKernelContainerMockRecorder) ContainerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerState", reflect.TypeOf((*MockKernelContainer)(nil).ContainerState))
}

// ContainerStatistics mocks base method.
func (m *MockKernelContainer) ContainerStatistics() scheduling.ContainerStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStatistics")
	ret0, _ := ret[0].(scheduling.ContainerStatistics)
	return ret0
}

// ContainerStatistics indicates an expected call of ContainerStatistics.
func (mr *MockKernelContainerMockRecorder) ContainerStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatistics", reflect.TypeOf((*MockKernelContainer)(nil).ContainerStatistics))
}

// ContainerStopped mocks base method.
func (m *MockKernelContainer) ContainerStopped() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStopped")
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStopped indicates an expected call of ContainerStopped.
func (mr *MockKernelContainerMockRecorder) ContainerStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStopped", reflect.TypeOf((*MockKernelContainer)(nil).ContainerStopped))
}

// ContainerStoppedTraining mocks base method.
func (m *MockKernelContainer) ContainerStoppedTraining() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStoppedTraining")
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStoppedTraining indicates an expected call of ContainerStoppedTraining.
func (mr *MockKernelContainerMockRecorder) ContainerStoppedTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStoppedTraining", reflect.TypeOf((*MockKernelContainer)(nil).ContainerStoppedTraining))
}

// Explain mocks base method.
func (m *MockKernelContainer) Explain(key scheduling.ExplainerEntry) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explain", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Explain indicates an expected call of Explain.
func (mr *MockKernelContainerMockRecorder) Explain(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockKernelContainer)(nil).Explain), key)
}

// GetClient mocks base method.
func (m *MockKernelContainer) GetClient() scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(scheduling.KernelReplica)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockKernelContainerMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockKernelContainer)(nil).GetClient))
}

// Host mocks base method.
func (m *MockKernelContainer) Host() scheduling.Host {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(scheduling.Host)
	return ret0
}

// Host indicates an expected call of Host.
func (mr *MockKernelContainerMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockKernelContainer)(nil).Host))
}

// InteractivePriority mocks base method.
func (m *MockKernelContainer) InteractivePriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractivePriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// InteractivePriority indicates an expected call of InteractivePriority.
func (mr *MockKernelContainerMockRecorder) InteractivePriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractivePriority", reflect.TypeOf((*MockKernelContainer)(nil).InteractivePriority))
}

// InvalidateInteractivePriority mocks base method.
func (m *MockKernelContainer) InvalidateInteractivePriority() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateInteractivePriority")
}

// InvalidateInteractivePriority indicates an expected call of InvalidateInteractivePriority.
func (mr *MockKernelContainerMockRecorder) InvalidateInteractivePriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateInteractivePriority", reflect.TypeOf((*MockKernelContainer)(nil).InvalidateInteractivePriority))
}

// IsIdle mocks base method.
func (m *MockKernelContainer) IsIdle() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdle")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIdle indicates an expected call of IsIdle.
func (mr *MockKernelContainerMockRecorder) IsIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdle", reflect.TypeOf((*MockKernelContainer)(nil).IsIdle))
}

// IsMigrating mocks base method.
func (m *MockKernelContainer) IsMigrating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMigrating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMigrating indicates an expected call of IsMigrating.
func (mr *MockKernelContainerMockRecorder) IsMigrating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMigrating", reflect.TypeOf((*MockKernelContainer)(nil).IsMigrating))
}

// IsStopped mocks base method.
func (m *MockKernelContainer) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockKernelContainerMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockKernelContainer)(nil).IsStopped))
}

// IsTraining mocks base method.
func (m *MockKernelContainer) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockKernelContainerMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockKernelContainer)(nil).IsTraining))
}

// KernelID mocks base method.
func (m *MockKernelContainer) KernelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// KernelID indicates an expected call of KernelID.
func (mr *MockKernelContainerMockRecorder) KernelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelID", reflect.TypeOf((*MockKernelContainer)(nil).KernelID))
}

// NumTrainingEventsProcessed mocks base method.
func (m *MockKernelContainer) NumTrainingEventsProcessed() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumTrainingEventsProcessed")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumTrainingEventsProcessed indicates an expected call of NumTrainingEventsProcessed.
func (mr *MockKernelContainerMockRecorder) NumTrainingEventsProcessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumTrainingEventsProcessed", reflect.TypeOf((*MockKernelContainer)(nil).NumTrainingEventsProcessed))
}

// PreemptionPriority mocks base method.
func (m *MockKernelContainer) PreemptionPriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreemptionPriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PreemptionPriority indicates an expected call of PreemptionPriority.
func (mr *MockKernelContainerMockRecorder) PreemptionPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptionPriority", reflect.TypeOf((*MockKernelContainer)(nil).PreemptionPriority))
}

// ReplicaId mocks base method.
func (m *MockKernelContainer) ReplicaId() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaId")
	ret0, _ := ret[0].(int32)
	return ret0
}

// ReplicaId indicates an expected call of ReplicaId.
func (mr *MockKernelContainerMockRecorder) ReplicaId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaId", reflect.TypeOf((*MockKernelContainer)(nil).ReplicaId))
}

// ResourceSpec mocks base method.
func (m *MockKernelContainer) ResourceSpec() *types.DecimalSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(*types.DecimalSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockKernelContainerMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockKernelContainer)(nil).ResourceSpec))
}

// ScaleOutPriority mocks base method.
func (m *MockKernelContainer) ScaleOutPriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleOutPriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// ScaleOutPriority indicates an expected call of ScaleOutPriority.
func (mr *MockKernelContainerMockRecorder) ScaleOutPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleOutPriority", reflect.TypeOf((*MockKernelContainer)(nil).ScaleOutPriority))
}

// Session mocks base method.
func (m *MockKernelContainer) Session() scheduling.UserSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(scheduling.UserSession)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockKernelContainerMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockKernelContainer)(nil).Session))
}

// SetClient mocks base method.
func (m *MockKernelContainer) SetClient(client scheduling.KernelReplica) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", client)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockKernelContainerMockRecorder) SetClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockKernelContainer)(nil).SetClient), client)
}

// SetHost mocks base method.
func (m *MockKernelContainer) SetHost(host scheduling.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHost", host)
}

// SetHost indicates an expected call of SetHost.
func (mr *MockKernelContainerMockRecorder) SetHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHost", reflect.TypeOf((*MockKernelContainer)(nil).SetHost), host)
}

// StartedAt mocks base method.
func (m *MockKernelContainer) StartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartedAt indicates an expected call of StartedAt.
func (mr *MockKernelContainerMockRecorder) StartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedAt", reflect.TypeOf((*MockKernelContainer)(nil).StartedAt))
}

// String mocks base method.
func (m *MockKernelContainer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelContainerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelContainer)(nil).String))
}

// ToDockerContainer mocks base method.
func (m *MockKernelContainer) ToDockerContainer() *proto.DockerContainer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDockerContainer")
	ret0, _ := ret[0].(*proto.DockerContainer)
	return ret0
}

// ToDockerContainer indicates an expected call of ToDockerContainer.
func (mr *MockKernelContainerMockRecorder) ToDockerContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDockerContainer", reflect.TypeOf((*MockKernelContainer)(nil).ToDockerContainer))
}

// TrainingStartedInContainer mocks base method.
func (m *MockKernelContainer) TrainingStartedInContainer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingStartedInContainer")
	ret0, _ := ret[0].(error)
	return ret0
}

// TrainingStartedInContainer indicates an expected call of TrainingStartedInContainer.
func (mr *MockKernelContainerMockRecorder) TrainingStartedInContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingStartedInContainer", reflect.TypeOf((*MockKernelContainer)(nil).TrainingStartedInContainer))
}

// UpdateResourceSpec mocks base method.
func (m *MockKernelContainer) UpdateResourceSpec(spec *types.DecimalSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateResourceSpec", spec)
}

// UpdateResourceSpec indicates an expected call of UpdateResourceSpec.
func (mr *MockKernelContainerMockRecorder) UpdateResourceSpec(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceSpec", reflect.TypeOf((*MockKernelContainer)(nil).UpdateResourceSpec), spec)
}

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
	isgomock struct{}
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// ContainerLifetime mocks base method.
func (m *MockPolicy) ContainerLifetime() scheduling.ContainerLifetime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLifetime")
	ret0, _ := ret[0].(scheduling.ContainerLifetime)
	return ret0
}

// ContainerLifetime indicates an expected call of ContainerLifetime.
func (mr *MockPolicyMockRecorder) ContainerLifetime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLifetime", reflect.TypeOf((*MockPolicy)(nil).ContainerLifetime))
}

// GetGpusPerHost mocks base method.
func (m *MockPolicy) GetGpusPerHost() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGpusPerHost")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetGpusPerHost indicates an expected call of GetGpusPerHost.
func (mr *MockPolicyMockRecorder) GetGpusPerHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGpusPerHost", reflect.TypeOf((*MockPolicy)(nil).GetGpusPerHost))
}

// GetNewPlacer mocks base method.
func (m *MockPolicy) GetNewPlacer(metricsProvider scheduling.MetricsProvider) (scheduling.Placer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewPlacer", metricsProvider)
	ret0, _ := ret[0].(scheduling.Placer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewPlacer indicates an expected call of GetNewPlacer.
func (mr *MockPolicyMockRecorder) GetNewPlacer(metricsProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPlacer", reflect.TypeOf((*MockPolicy)(nil).GetNewPlacer), metricsProvider)
}

// IdleSessionReclamationPolicy mocks base method.
func (m *MockPolicy) IdleSessionReclamationPolicy() scheduling.IdleSessionReclamationPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleSessionReclamationPolicy")
	ret0, _ := ret[0].(scheduling.IdleSessionReclamationPolicy)
	return ret0
}

// IdleSessionReclamationPolicy indicates an expected call of IdleSessionReclamationPolicy.
func (mr *MockPolicyMockRecorder) IdleSessionReclamationPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleSessionReclamationPolicy", reflect.TypeOf((*MockPolicy)(nil).IdleSessionReclamationPolicy))
}

// Name mocks base method.
func (m *MockPolicy) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPolicyMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPolicy)(nil).Name))
}

// NumReplicas mocks base method.
func (m *MockPolicy) NumReplicas() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumReplicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumReplicas indicates an expected call of NumReplicas.
func (mr *MockPolicyMockRecorder) NumReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumReplicas", reflect.TypeOf((*MockPolicy)(nil).NumReplicas))
}

// PolicyKey mocks base method.
func (m *MockPolicy) PolicyKey() scheduling.PolicyKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyKey")
	ret0, _ := ret[0].(scheduling.PolicyKey)
	return ret0
}

// PolicyKey indicates an expected call of PolicyKey.
func (mr *MockPolicyMockRecorder) PolicyKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyKey", reflect.TypeOf((*MockPolicy)(nil).PolicyKey))
}

// PostExecutionStatePolicy mocks base method.
func (m *MockPolicy) PostExecutionStatePolicy() scheduling.PostExecutionStatePolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostExecutionStatePolicy")
	ret0, _ := ret[0].(scheduling.PostExecutionStatePolicy)
	return ret0
}

// PostExecutionStatePolicy indicates an expected call of PostExecutionStatePolicy.
func (mr *MockPolicyMockRecorder) PostExecutionStatePolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostExecutionStatePolicy", reflect.TypeOf((*MockPolicy)(nil).PostExecutionStatePolicy))
}

// PreExecutionStatePolicy mocks base method.
func (m *MockPolicy) PreExecutionStatePolicy() scheduling.PreExecutionStatePolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreExecutionStatePolicy")
	ret0, _ := ret[0].(scheduling.PreExecutionStatePolicy)
	return ret0
}

// PreExecutionStatePolicy indicates an expected call of PreExecutionStatePolicy.
func (mr *MockPolicyMockRecorder) PreExecutionStatePolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreExecutionStatePolicy", reflect.TypeOf((*MockPolicy)(nil).PreExecutionStatePolicy))
}

// ResourceBindingMode mocks base method.
func (m *MockPolicy) ResourceBindingMode() scheduling.ResourceBindingMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceBindingMode")
	ret0, _ := ret[0].(scheduling.ResourceBindingMode)
	return ret0
}

// ResourceBindingMode indicates an expected call of ResourceBindingMode.
func (mr *MockPolicyMockRecorder) ResourceBindingMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceBindingMode", reflect.TypeOf((*MockPolicy)(nil).ResourceBindingMode))
}

// ResourceScalingPolicy mocks base method.
func (m *MockPolicy) ResourceScalingPolicy() scheduling.ResourceScalingPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceScalingPolicy")
	ret0, _ := ret[0].(scheduling.ResourceScalingPolicy)
	return ret0
}

// ResourceScalingPolicy indicates an expected call of ResourceScalingPolicy.
func (mr *MockPolicyMockRecorder) ResourceScalingPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceScalingPolicy", reflect.TypeOf((*MockPolicy)(nil).ResourceScalingPolicy))
}

// ScalingConfiguration mocks base method.
func (m *MockPolicy) ScalingConfiguration() *scheduling.ScalingConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScalingConfiguration")
	ret0, _ := ret[0].(*scheduling.ScalingConfiguration)
	return ret0
}

// ScalingConfiguration indicates an expected call of ScalingConfiguration.
func (mr *MockPolicyMockRecorder) ScalingConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScalingConfiguration", reflect.TypeOf((*MockPolicy)(nil).ScalingConfiguration))
}

// SmrEnabled mocks base method.
func (m *MockPolicy) SmrEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmrEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SmrEnabled indicates an expected call of SmrEnabled.
func (mr *MockPolicyMockRecorder) SmrEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmrEnabled", reflect.TypeOf((*MockPolicy)(nil).SmrEnabled))
}

// SupportsDynamicResourceAdjustments mocks base method.
func (m *MockPolicy) SupportsDynamicResourceAdjustments() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsDynamicResourceAdjustments")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsDynamicResourceAdjustments indicates an expected call of SupportsDynamicResourceAdjustments.
func (mr *MockPolicyMockRecorder) SupportsDynamicResourceAdjustments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsDynamicResourceAdjustments", reflect.TypeOf((*MockPolicy)(nil).SupportsDynamicResourceAdjustments))
}

// SupportsMigration mocks base method.
func (m *MockPolicy) SupportsMigration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsMigration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsMigration indicates an expected call of SupportsMigration.
func (mr *MockPolicyMockRecorder) SupportsMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsMigration", reflect.TypeOf((*MockPolicy)(nil).SupportsMigration))
}

// SupportsPredictiveAutoscaling mocks base method.
func (m *MockPolicy) SupportsPredictiveAutoscaling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsPredictiveAutoscaling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsPredictiveAutoscaling indicates an expected call of SupportsPredictiveAutoscaling.
func (mr *MockPolicyMockRecorder) SupportsPredictiveAutoscaling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsPredictiveAutoscaling", reflect.TypeOf((*MockPolicy)(nil).SupportsPredictiveAutoscaling))
}

// ValidateCapacity mocks base method.
func (m *MockPolicy) ValidateCapacity(cluster scheduling.Cluster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ValidateCapacity", cluster)
}

// ValidateCapacity indicates an expected call of ValidateCapacity.
func (mr *MockPolicyMockRecorder) ValidateCapacity(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCapacity", reflect.TypeOf((*MockPolicy)(nil).ValidateCapacity), cluster)
}

// MockStatisticsProvider is a mock of StatisticsProvider interface.
type MockStatisticsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsProviderMockRecorder
	isgomock struct{}
}

// MockStatisticsProviderMockRecorder is the mock recorder for MockStatisticsProvider.
type MockStatisticsProviderMockRecorder struct {
	mock *MockStatisticsProvider
}

// NewMockStatisticsProvider creates a new mock instance.
func NewMockStatisticsProvider(ctrl *gomock.Controller) *MockStatisticsProvider {
	mock := &MockStatisticsProvider{ctrl: ctrl}
	mock.recorder = &MockStatisticsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsProvider) EXPECT() *MockStatisticsProviderMockRecorder {
	return m.recorder
}

// AddAckReceivedLatency mocks base method.
func (m *MockStatisticsProvider) AddAckReceivedLatency(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAckReceivedLatency", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAckReceivedLatency indicates an expected call of AddAckReceivedLatency.
func (mr *MockStatisticsProviderMockRecorder) AddAckReceivedLatency(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAckReceivedLatency", reflect.TypeOf((*MockStatisticsProvider)(nil).AddAckReceivedLatency), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddFailedSendAttempt mocks base method.
func (m *MockStatisticsProvider) AddFailedSendAttempt(nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailedSendAttempt", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailedSendAttempt indicates an expected call of AddFailedSendAttempt.
func (mr *MockStatisticsProviderMockRecorder) AddFailedSendAttempt(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailedSendAttempt", reflect.TypeOf((*MockStatisticsProvider)(nil).AddFailedSendAttempt), nodeId, nodeType, socketType, jupyterMessageType)
}

// AddMessageE2ELatencyObservation mocks base method.
func (m *MockStatisticsProvider) AddMessageE2ELatencyObservation(latency time.Duration, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageE2ELatencyObservation", latency, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageE2ELatencyObservation indicates an expected call of AddMessageE2ELatencyObservation.
func (mr *MockStatisticsProviderMockRecorder) AddMessageE2ELatencyObservation(latency, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageE2ELatencyObservation", reflect.TypeOf((*MockStatisticsProvider)(nil).AddMessageE2ELatencyObservation), latency, nodeId, nodeType, socketType, jupyterMessageType)
}

// AddNumSendAttemptsRequiredObservation mocks base method.
func (m *MockStatisticsProvider) AddNumSendAttemptsRequiredObservation(acksRequired float64, nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNumSendAttemptsRequiredObservation", acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNumSendAttemptsRequiredObservation indicates an expected call of AddNumSendAttemptsRequiredObservation.
func (mr *MockStatisticsProviderMockRecorder) AddNumSendAttemptsRequiredObservation(acksRequired, nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNumSendAttemptsRequiredObservation", reflect.TypeOf((*MockStatisticsProvider)(nil).AddNumSendAttemptsRequiredObservation), acksRequired, nodeId, nodeType, socketType, jupyterMessageType)
}

// DecrementResourceCountsForRemovedHost mocks base method.
func (m *MockStatisticsProvider) DecrementResourceCountsForRemovedHost(host metrics.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecrementResourceCountsForRemovedHost", host)
}

// DecrementResourceCountsForRemovedHost indicates an expected call of DecrementResourceCountsForRemovedHost.
func (mr *MockStatisticsProviderMockRecorder) DecrementResourceCountsForRemovedHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementResourceCountsForRemovedHost", reflect.TypeOf((*MockStatisticsProvider)(nil).DecrementResourceCountsForRemovedHost), host)
}

// GetHostRemoteSyncLatencyMicrosecondsHistogram mocks base method.
func (m *MockStatisticsProvider) GetHostRemoteSyncLatencyMicrosecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRemoteSyncLatencyMicrosecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetHostRemoteSyncLatencyMicrosecondsHistogram indicates an expected call of GetHostRemoteSyncLatencyMicrosecondsHistogram.
func (mr *MockStatisticsProviderMockRecorder) GetHostRemoteSyncLatencyMicrosecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRemoteSyncLatencyMicrosecondsHistogram", reflect.TypeOf((*MockStatisticsProvider)(nil).GetHostRemoteSyncLatencyMicrosecondsHistogram))
}

// GetNumDisabledHostsGauge mocks base method.
func (m *MockStatisticsProvider) GetNumDisabledHostsGauge() prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumDisabledHostsGauge")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// GetNumDisabledHostsGauge indicates an expected call of GetNumDisabledHostsGauge.
func (mr *MockStatisticsProviderMockRecorder) GetNumDisabledHostsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumDisabledHostsGauge", reflect.TypeOf((*MockStatisticsProvider)(nil).GetNumDisabledHostsGauge))
}

// GetNumHostsGauge mocks base method.
func (m *MockStatisticsProvider) GetNumHostsGauge() prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumHostsGauge")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// GetNumHostsGauge indicates an expected call of GetNumHostsGauge.
func (mr *MockStatisticsProviderMockRecorder) GetNumHostsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumHostsGauge", reflect.TypeOf((*MockStatisticsProvider)(nil).GetNumHostsGauge))
}

// GetPlacerFindHostLatencyMicrosecondsHistogram mocks base method.
func (m *MockStatisticsProvider) GetPlacerFindHostLatencyMicrosecondsHistogram() *prometheus.HistogramVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacerFindHostLatencyMicrosecondsHistogram")
	ret0, _ := ret[0].(*prometheus.HistogramVec)
	return ret0
}

// GetPlacerFindHostLatencyMicrosecondsHistogram indicates an expected call of GetPlacerFindHostLatencyMicrosecondsHistogram.
func (mr *MockStatisticsProviderMockRecorder) GetPlacerFindHostLatencyMicrosecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacerFindHostLatencyMicrosecondsHistogram", reflect.TypeOf((*MockStatisticsProvider)(nil).GetPlacerFindHostLatencyMicrosecondsHistogram))
}

// GetScaleInLatencyMillisecondsHistogram mocks base method.
func (m *MockStatisticsProvider) GetScaleInLatencyMillisecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleInLatencyMillisecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetScaleInLatencyMillisecondsHistogram indicates an expected call of GetScaleInLatencyMillisecondsHistogram.
func (mr *MockStatisticsProviderMockRecorder) GetScaleInLatencyMillisecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleInLatencyMillisecondsHistogram", reflect.TypeOf((*MockStatisticsProvider)(nil).GetScaleInLatencyMillisecondsHistogram))
}

// GetScaleOutLatencyMillisecondsHistogram mocks base method.
func (m *MockStatisticsProvider) GetScaleOutLatencyMillisecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleOutLatencyMillisecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetScaleOutLatencyMillisecondsHistogram indicates an expected call of GetScaleOutLatencyMillisecondsHistogram.
func (mr *MockStatisticsProviderMockRecorder) GetScaleOutLatencyMillisecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleOutLatencyMillisecondsHistogram", reflect.TypeOf((*MockStatisticsProvider)(nil).GetScaleOutLatencyMillisecondsHistogram))
}

// IncrementNumTrainingEventsCompletedCounterVec mocks base method.
func (m *MockStatisticsProvider) IncrementNumTrainingEventsCompletedCounterVec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementNumTrainingEventsCompletedCounterVec")
}

// IncrementNumTrainingEventsCompletedCounterVec indicates an expected call of IncrementNumTrainingEventsCompletedCounterVec.
func (mr *MockStatisticsProviderMockRecorder) IncrementNumTrainingEventsCompletedCounterVec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNumTrainingEventsCompletedCounterVec", reflect.TypeOf((*MockStatisticsProvider)(nil).IncrementNumTrainingEventsCompletedCounterVec))
}

// IncrementResourceCountsForNewHost mocks base method.
func (m *MockStatisticsProvider) IncrementResourceCountsForNewHost(host metrics.Host) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementResourceCountsForNewHost", host)
}

// IncrementResourceCountsForNewHost indicates an expected call of IncrementResourceCountsForNewHost.
func (mr *MockStatisticsProviderMockRecorder) IncrementResourceCountsForNewHost(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementResourceCountsForNewHost", reflect.TypeOf((*MockStatisticsProvider)(nil).IncrementResourceCountsForNewHost), host)
}

// PrometheusMetricsEnabled mocks base method.
func (m *MockStatisticsProvider) PrometheusMetricsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusMetricsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrometheusMetricsEnabled indicates an expected call of PrometheusMetricsEnabled.
func (mr *MockStatisticsProviderMockRecorder) PrometheusMetricsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusMetricsEnabled", reflect.TypeOf((*MockStatisticsProvider)(nil).PrometheusMetricsEnabled))
}

// SentMessage mocks base method.
func (m *MockStatisticsProvider) SentMessage(nodeId string, sendLatency time.Duration, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessage", nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessage indicates an expected call of SentMessage.
func (mr *MockStatisticsProviderMockRecorder) SentMessage(nodeId, sendLatency, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessage", reflect.TypeOf((*MockStatisticsProvider)(nil).SentMessage), nodeId, sendLatency, nodeType, socketType, jupyterMessageType)
}

// SentMessageUnique mocks base method.
func (m *MockStatisticsProvider) SentMessageUnique(nodeId string, nodeType metrics.NodeType, socketType messaging.MessageType, jupyterMessageType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentMessageUnique", nodeId, nodeType, socketType, jupyterMessageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentMessageUnique indicates an expected call of SentMessageUnique.
func (mr *MockStatisticsProviderMockRecorder) SentMessageUnique(nodeId, nodeType, socketType, jupyterMessageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentMessageUnique", reflect.TypeOf((*MockStatisticsProvider)(nil).SentMessageUnique), nodeId, nodeType, socketType, jupyterMessageType)
}

// UpdateClusterStatistics mocks base method.
func (m *MockStatisticsProvider) UpdateClusterStatistics(arg0 func(*metrics.ClusterStatistics)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateClusterStatistics", arg0)
}

// UpdateClusterStatistics indicates an expected call of UpdateClusterStatistics.
func (mr *MockStatisticsProviderMockRecorder) UpdateClusterStatistics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterStatistics", reflect.TypeOf((*MockStatisticsProvider)(nil).UpdateClusterStatistics), arg0)
}

// MockPrometheusMetricsProvider is a mock of PrometheusMetricsProvider interface.
type MockPrometheusMetricsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusMetricsProviderMockRecorder
	isgomock struct{}
}

// MockPrometheusMetricsProviderMockRecorder is the mock recorder for MockPrometheusMetricsProvider.
type MockPrometheusMetricsProviderMockRecorder struct {
	mock *MockPrometheusMetricsProvider
}

// NewMockPrometheusMetricsProvider creates a new mock instance.
func NewMockPrometheusMetricsProvider(ctrl *gomock.Controller) *MockPrometheusMetricsProvider {
	mock := &MockPrometheusMetricsProvider{ctrl: ctrl}
	mock.recorder = &MockPrometheusMetricsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusMetricsProvider) EXPECT() *MockPrometheusMetricsProviderMockRecorder {
	return m.recorder
}

// GetHostRemoteSyncLatencyMicrosecondsHistogram mocks base method.
func (m *MockPrometheusMetricsProvider) GetHostRemoteSyncLatencyMicrosecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostRemoteSyncLatencyMicrosecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetHostRemoteSyncLatencyMicrosecondsHistogram indicates an expected call of GetHostRemoteSyncLatencyMicrosecondsHistogram.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetHostRemoteSyncLatencyMicrosecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostRemoteSyncLatencyMicrosecondsHistogram", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetHostRemoteSyncLatencyMicrosecondsHistogram))
}

// GetNumDisabledHostsGauge mocks base method.
func (m *MockPrometheusMetricsProvider) GetNumDisabledHostsGauge() prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumDisabledHostsGauge")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// GetNumDisabledHostsGauge indicates an expected call of GetNumDisabledHostsGauge.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetNumDisabledHostsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumDisabledHostsGauge", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetNumDisabledHostsGauge))
}

// GetNumHostsGauge mocks base method.
func (m *MockPrometheusMetricsProvider) GetNumHostsGauge() prometheus.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumHostsGauge")
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// GetNumHostsGauge indicates an expected call of GetNumHostsGauge.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetNumHostsGauge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumHostsGauge", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetNumHostsGauge))
}

// GetPlacerFindHostLatencyMicrosecondsHistogram mocks base method.
func (m *MockPrometheusMetricsProvider) GetPlacerFindHostLatencyMicrosecondsHistogram() *prometheus.HistogramVec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlacerFindHostLatencyMicrosecondsHistogram")
	ret0, _ := ret[0].(*prometheus.HistogramVec)
	return ret0
}

// GetPlacerFindHostLatencyMicrosecondsHistogram indicates an expected call of GetPlacerFindHostLatencyMicrosecondsHistogram.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetPlacerFindHostLatencyMicrosecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlacerFindHostLatencyMicrosecondsHistogram", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetPlacerFindHostLatencyMicrosecondsHistogram))
}

// GetScaleInLatencyMillisecondsHistogram mocks base method.
func (m *MockPrometheusMetricsProvider) GetScaleInLatencyMillisecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleInLatencyMillisecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetScaleInLatencyMillisecondsHistogram indicates an expected call of GetScaleInLatencyMillisecondsHistogram.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetScaleInLatencyMillisecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleInLatencyMillisecondsHistogram", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetScaleInLatencyMillisecondsHistogram))
}

// GetScaleOutLatencyMillisecondsHistogram mocks base method.
func (m *MockPrometheusMetricsProvider) GetScaleOutLatencyMillisecondsHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleOutLatencyMillisecondsHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetScaleOutLatencyMillisecondsHistogram indicates an expected call of GetScaleOutLatencyMillisecondsHistogram.
func (mr *MockPrometheusMetricsProviderMockRecorder) GetScaleOutLatencyMillisecondsHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleOutLatencyMillisecondsHistogram", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).GetScaleOutLatencyMillisecondsHistogram))
}

// IncrementNumTrainingEventsCompletedCounterVec mocks base method.
func (m *MockPrometheusMetricsProvider) IncrementNumTrainingEventsCompletedCounterVec() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementNumTrainingEventsCompletedCounterVec")
}

// IncrementNumTrainingEventsCompletedCounterVec indicates an expected call of IncrementNumTrainingEventsCompletedCounterVec.
func (mr *MockPrometheusMetricsProviderMockRecorder) IncrementNumTrainingEventsCompletedCounterVec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementNumTrainingEventsCompletedCounterVec", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).IncrementNumTrainingEventsCompletedCounterVec))
}

// PrometheusMetricsEnabled mocks base method.
func (m *MockPrometheusMetricsProvider) PrometheusMetricsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusMetricsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PrometheusMetricsEnabled indicates an expected call of PrometheusMetricsEnabled.
func (mr *MockPrometheusMetricsProviderMockRecorder) PrometheusMetricsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusMetricsEnabled", reflect.TypeOf((*MockPrometheusMetricsProvider)(nil).PrometheusMetricsEnabled))
}

// MockExecutionManager is a mock of ExecutionManager interface.
type MockExecutionManager struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionManagerMockRecorder
	isgomock struct{}
}

// MockExecutionManagerMockRecorder is the mock recorder for MockExecutionManager.
type MockExecutionManagerMockRecorder struct {
	mock *MockExecutionManager
}

// NewMockExecutionManager creates a new mock instance.
func NewMockExecutionManager(ctrl *gomock.Controller) *MockExecutionManager {
	mock := &MockExecutionManager{ctrl: ctrl}
	mock.recorder = &MockExecutionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionManager) EXPECT() *MockExecutionManagerMockRecorder {
	return m.recorder
}

// ExecutionComplete mocks base method.
func (m *MockExecutionManager) ExecutionComplete(msg *messaging.JupyterMessage, replica scheduling.KernelReplica) (scheduling.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionComplete", msg, replica)
	ret0, _ := ret[0].(scheduling.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutionComplete indicates an expected call of ExecutionComplete.
func (mr *MockExecutionManagerMockRecorder) ExecutionComplete(msg, replica any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionComplete", reflect.TypeOf((*MockExecutionManager)(nil).ExecutionComplete), msg, replica)
}

// ExecutionFailedCallback mocks base method.
func (m *MockExecutionManager) ExecutionFailedCallback() scheduling.ExecutionFailedCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionFailedCallback")
	ret0, _ := ret[0].(scheduling.ExecutionFailedCallback)
	return ret0
}

// ExecutionFailedCallback indicates an expected call of ExecutionFailedCallback.
func (mr *MockExecutionManagerMockRecorder) ExecutionFailedCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionFailedCallback", reflect.TypeOf((*MockExecutionManager)(nil).ExecutionFailedCallback))
}

// ExecutionIndexIsLarger mocks base method.
func (m *MockExecutionManager) ExecutionIndexIsLarger(executionIndex int32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionIndexIsLarger", executionIndex)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExecutionIndexIsLarger indicates an expected call of ExecutionIndexIsLarger.
func (mr *MockExecutionManagerMockRecorder) ExecutionIndexIsLarger(executionIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionIndexIsLarger", reflect.TypeOf((*MockExecutionManager)(nil).ExecutionIndexIsLarger), executionIndex)
}

// GetActiveExecution mocks base method.
func (m *MockExecutionManager) GetActiveExecution(msgId string) scheduling.Execution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecution", msgId)
	ret0, _ := ret[0].(scheduling.Execution)
	return ret0
}

// GetActiveExecution indicates an expected call of GetActiveExecution.
func (mr *MockExecutionManagerMockRecorder) GetActiveExecution(msgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecution", reflect.TypeOf((*MockExecutionManager)(nil).GetActiveExecution), msgId)
}

// HandleExecuteReplyMessage mocks base method.
func (m *MockExecutionManager) HandleExecuteReplyMessage(msg *messaging.JupyterMessage, replica scheduling.KernelReplica) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleExecuteReplyMessage", msg, replica)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleExecuteReplyMessage indicates an expected call of HandleExecuteReplyMessage.
func (mr *MockExecutionManagerMockRecorder) HandleExecuteReplyMessage(msg, replica any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleExecuteReplyMessage", reflect.TypeOf((*MockExecutionManager)(nil).HandleExecuteReplyMessage), msg, replica)
}

// HandleSmrLeadTaskMessage mocks base method.
func (m *MockExecutionManager) HandleSmrLeadTaskMessage(msg *messaging.JupyterMessage, kernelReplica scheduling.KernelReplica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSmrLeadTaskMessage", msg, kernelReplica)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSmrLeadTaskMessage indicates an expected call of HandleSmrLeadTaskMessage.
func (mr *MockExecutionManagerMockRecorder) HandleSmrLeadTaskMessage(msg, kernelReplica any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSmrLeadTaskMessage", reflect.TypeOf((*MockExecutionManager)(nil).HandleSmrLeadTaskMessage), msg, kernelReplica)
}

// LastPrimaryReplica mocks base method.
func (m *MockExecutionManager) LastPrimaryReplica() scheduling.KernelReplica {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastPrimaryReplica")
	ret0, _ := ret[0].(scheduling.KernelReplica)
	return ret0
}

// LastPrimaryReplica indicates an expected call of LastPrimaryReplica.
func (mr *MockExecutionManagerMockRecorder) LastPrimaryReplica() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastPrimaryReplica", reflect.TypeOf((*MockExecutionManager)(nil).LastPrimaryReplica))
}

// NumActiveExecutionOperations mocks base method.
func (m *MockExecutionManager) NumActiveExecutionOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveExecutionOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveExecutionOperations indicates an expected call of NumActiveExecutionOperations.
func (mr *MockExecutionManagerMockRecorder) NumActiveExecutionOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveExecutionOperations", reflect.TypeOf((*MockExecutionManager)(nil).NumActiveExecutionOperations))
}

// RegisterExecution mocks base method.
func (m *MockExecutionManager) RegisterExecution(msg *messaging.JupyterMessage) (scheduling.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterExecution", msg)
	ret0, _ := ret[0].(scheduling.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterExecution indicates an expected call of RegisterExecution.
func (mr *MockExecutionManagerMockRecorder) RegisterExecution(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterExecution", reflect.TypeOf((*MockExecutionManager)(nil).RegisterExecution), msg)
}

// SendingExecuteRequest mocks base method.
func (m *MockExecutionManager) SendingExecuteRequest(msg *messaging.JupyterMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendingExecuteRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendingExecuteRequest indicates an expected call of SendingExecuteRequest.
func (mr *MockExecutionManagerMockRecorder) SendingExecuteRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendingExecuteRequest", reflect.TypeOf((*MockExecutionManager)(nil).SendingExecuteRequest), msg)
}

// TotalNumExecutionOperations mocks base method.
func (m *MockExecutionManager) TotalNumExecutionOperations() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalNumExecutionOperations")
	ret0, _ := ret[0].(int)
	return ret0
}

// TotalNumExecutionOperations indicates an expected call of TotalNumExecutionOperations.
func (mr *MockExecutionManagerMockRecorder) TotalNumExecutionOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalNumExecutionOperations", reflect.TypeOf((*MockExecutionManager)(nil).TotalNumExecutionOperations))
}

// YieldProposalReceived mocks base method.
func (m *MockExecutionManager) YieldProposalReceived(replica scheduling.KernelReplica, executeReplyMsg *messaging.JupyterMessage, msgErr *messaging.MessageErrorWithYieldReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YieldProposalReceived", replica, executeReplyMsg, msgErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// YieldProposalReceived indicates an expected call of YieldProposalReceived.
func (mr *MockExecutionManagerMockRecorder) YieldProposalReceived(replica, executeReplyMsg, msgErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YieldProposalReceived", reflect.TypeOf((*MockExecutionManager)(nil).YieldProposalReceived), replica, executeReplyMsg, msgErr)
}

// MockExecution is a mock of Execution interface.
type MockExecution struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionMockRecorder
	isgomock struct{}
}

// MockExecutionMockRecorder is the mock recorder for MockExecution.
type MockExecutionMockRecorder struct {
	mock *MockExecution
}

// NewMockExecution creates a new mock instance.
func NewMockExecution(ctrl *gomock.Controller) *MockExecution {
	mock := &MockExecution{ctrl: ctrl}
	mock.recorder = &MockExecutionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecution) EXPECT() *MockExecutionMockRecorder {
	return m.recorder
}

// GetAttemptNumber mocks base method.
func (m *MockExecution) GetAttemptNumber() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttemptNumber")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAttemptNumber indicates an expected call of GetAttemptNumber.
func (mr *MockExecutionMockRecorder) GetAttemptNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttemptNumber", reflect.TypeOf((*MockExecution)(nil).GetAttemptNumber))
}

// GetExecuteRequestMessageId mocks base method.
func (m *MockExecution) GetExecuteRequestMessageId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecuteRequestMessageId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExecuteRequestMessageId indicates an expected call of GetExecuteRequestMessageId.
func (mr *MockExecutionMockRecorder) GetExecuteRequestMessageId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecuteRequestMessageId", reflect.TypeOf((*MockExecution)(nil).GetExecuteRequestMessageId))
}

// GetExecutionIndex mocks base method.
func (m *MockExecution) GetExecutionIndex() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionIndex")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetExecutionIndex indicates an expected call of GetExecutionIndex.
func (mr *MockExecutionMockRecorder) GetExecutionIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionIndex", reflect.TypeOf((*MockExecution)(nil).GetExecutionIndex))
}

// GetNumReplicas mocks base method.
func (m *MockExecution) GetNumReplicas() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumReplicas")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNumReplicas indicates an expected call of GetNumReplicas.
func (mr *MockExecutionMockRecorder) GetNumReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumReplicas", reflect.TypeOf((*MockExecution)(nil).GetNumReplicas))
}

// GetOriginallySentAtTime mocks base method.
func (m *MockExecution) GetOriginallySentAtTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginallySentAtTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetOriginallySentAtTime indicates an expected call of GetOriginallySentAtTime.
func (mr *MockExecutionMockRecorder) GetOriginallySentAtTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginallySentAtTime", reflect.TypeOf((*MockExecution)(nil).GetOriginallySentAtTime))
}

// GetWorkloadId mocks base method.
func (m *MockExecution) GetWorkloadId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkloadId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkloadId indicates an expected call of GetWorkloadId.
func (mr *MockExecutionMockRecorder) GetWorkloadId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadId", reflect.TypeOf((*MockExecution)(nil).GetWorkloadId))
}

// HasExecuted mocks base method.
func (m *MockExecution) HasExecuted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExecuted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExecuted indicates an expected call of HasExecuted.
func (mr *MockExecutionMockRecorder) HasExecuted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExecuted", reflect.TypeOf((*MockExecution)(nil).HasExecuted))
}

// HasValidOriginalSentTimestamp mocks base method.
func (m *MockExecution) HasValidOriginalSentTimestamp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValidOriginalSentTimestamp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasValidOriginalSentTimestamp indicates an expected call of HasValidOriginalSentTimestamp.
func (mr *MockExecutionMockRecorder) HasValidOriginalSentTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValidOriginalSentTimestamp", reflect.TypeOf((*MockExecution)(nil).HasValidOriginalSentTimestamp))
}

// HasValidWorkloadId mocks base method.
func (m *MockExecution) HasValidWorkloadId() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValidWorkloadId")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasValidWorkloadId indicates an expected call of HasValidWorkloadId.
func (mr *MockExecutionMockRecorder) HasValidWorkloadId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValidWorkloadId", reflect.TypeOf((*MockExecution)(nil).HasValidWorkloadId))
}

// IsCompleted mocks base method.
func (m *MockExecution) IsCompleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCompleted indicates an expected call of IsCompleted.
func (mr *MockExecutionMockRecorder) IsCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompleted", reflect.TypeOf((*MockExecution)(nil).IsCompleted))
}

// IsErred mocks base method.
func (m *MockExecution) IsErred() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErred")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErred indicates an expected call of IsErred.
func (mr *MockExecutionMockRecorder) IsErred() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErred", reflect.TypeOf((*MockExecution)(nil).IsErred))
}

// IsPending mocks base method.
func (m *MockExecution) IsPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPending indicates an expected call of IsPending.
func (mr *MockExecutionMockRecorder) IsPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPending", reflect.TypeOf((*MockExecution)(nil).IsPending))
}

// IsRunning mocks base method.
func (m *MockExecution) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockExecutionMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockExecution)(nil).IsRunning))
}

// LinkNextAttempt mocks base method.
func (m *MockExecution) LinkNextAttempt(nextAttempt scheduling.Execution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LinkNextAttempt", nextAttempt)
}

// LinkNextAttempt indicates an expected call of LinkNextAttempt.
func (mr *MockExecutionMockRecorder) LinkNextAttempt(nextAttempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNextAttempt", reflect.TypeOf((*MockExecution)(nil).LinkNextAttempt), nextAttempt)
}

// LinkPreviousAttempt mocks base method.
func (m *MockExecution) LinkPreviousAttempt(previousAttempt scheduling.Execution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LinkPreviousAttempt", previousAttempt)
}

// LinkPreviousAttempt indicates an expected call of LinkPreviousAttempt.
func (mr *MockExecutionMockRecorder) LinkPreviousAttempt(previousAttempt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkPreviousAttempt", reflect.TypeOf((*MockExecution)(nil).LinkPreviousAttempt), previousAttempt)
}

// Msg mocks base method.
func (m *MockExecution) Msg() *messaging.JupyterMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Msg")
	ret0, _ := ret[0].(*messaging.JupyterMessage)
	return ret0
}

// Msg indicates an expected call of Msg.
func (mr *MockExecutionMockRecorder) Msg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Msg", reflect.TypeOf((*MockExecution)(nil).Msg))
}

// NumLeadReceived mocks base method.
func (m *MockExecution) NumLeadReceived() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumLeadReceived")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumLeadReceived indicates an expected call of NumLeadReceived.
func (mr *MockExecutionMockRecorder) NumLeadReceived() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumLeadReceived", reflect.TypeOf((*MockExecution)(nil).NumLeadReceived))
}

// NumRolesReceived mocks base method.
func (m *MockExecution) NumRolesReceived() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumRolesReceived")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumRolesReceived indicates an expected call of NumRolesReceived.
func (mr *MockExecutionMockRecorder) NumRolesReceived() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumRolesReceived", reflect.TypeOf((*MockExecution)(nil).NumRolesReceived))
}

// NumYieldReceived mocks base method.
func (m *MockExecution) NumYieldReceived() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumYieldReceived")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumYieldReceived indicates an expected call of NumYieldReceived.
func (mr *MockExecutionMockRecorder) NumYieldReceived() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumYieldReceived", reflect.TypeOf((*MockExecution)(nil).NumYieldReceived))
}

// OriginalTimestampOrCreatedAt mocks base method.
func (m *MockExecution) OriginalTimestampOrCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OriginalTimestampOrCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// OriginalTimestampOrCreatedAt indicates an expected call of OriginalTimestampOrCreatedAt.
func (mr *MockExecutionMockRecorder) OriginalTimestampOrCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginalTimestampOrCreatedAt", reflect.TypeOf((*MockExecution)(nil).OriginalTimestampOrCreatedAt))
}

// RangeRoles mocks base method.
func (m *MockExecution) RangeRoles(rangeFunc func(int32, scheduling.Proposal) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RangeRoles", rangeFunc)
}

// RangeRoles indicates an expected call of RangeRoles.
func (mr *MockExecutionMockRecorder) RangeRoles(rangeFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeRoles", reflect.TypeOf((*MockExecution)(nil).RangeRoles), rangeFunc)
}

// ReceivedLeadNotification mocks base method.
func (m *MockExecution) ReceivedLeadNotification(smrNodeId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedLeadNotification", smrNodeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceivedLeadNotification indicates an expected call of ReceivedLeadNotification.
func (mr *MockExecutionMockRecorder) ReceivedLeadNotification(smrNodeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedLeadNotification", reflect.TypeOf((*MockExecution)(nil).ReceivedLeadNotification), smrNodeId)
}

// ReceivedYieldNotification mocks base method.
func (m *MockExecution) ReceivedYieldNotification(smrNodeId int32, yieldReason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivedYieldNotification", smrNodeId, yieldReason)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceivedYieldNotification indicates an expected call of ReceivedYieldNotification.
func (mr *MockExecutionMockRecorder) ReceivedYieldNotification(smrNodeId, yieldReason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivedYieldNotification", reflect.TypeOf((*MockExecution)(nil).ReceivedYieldNotification), smrNodeId, yieldReason)
}

// RegisterReply mocks base method.
func (m *MockExecution) RegisterReply(replicaId int32, response *messaging.JupyterMessage, overwrite bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterReply", replicaId, response, overwrite)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterReply indicates an expected call of RegisterReply.
func (mr *MockExecutionMockRecorder) RegisterReply(replicaId, response, overwrite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterReply", reflect.TypeOf((*MockExecution)(nil).RegisterReply), replicaId, response, overwrite)
}

// SetActiveReplica mocks base method.
func (m *MockExecution) SetActiveReplica(replica scheduling.KernelReplica) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActiveReplica", replica)
}

// SetActiveReplica indicates an expected call of SetActiveReplica.
func (mr *MockExecutionMockRecorder) SetActiveReplica(replica any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveReplica", reflect.TypeOf((*MockExecution)(nil).SetActiveReplica), replica)
}

// SetExecuted mocks base method.
func (m *MockExecution) SetExecuted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExecuted")
}

// SetExecuted indicates an expected call of SetExecuted.
func (mr *MockExecutionMockRecorder) SetExecuted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExecuted", reflect.TypeOf((*MockExecution)(nil).SetExecuted))
}

// String mocks base method.
func (m *MockExecution) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockExecutionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockExecution)(nil).String))
}
