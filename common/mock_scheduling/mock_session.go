// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source types.go -package mock_scheduling -destination /home/scusemua/go/pkg/distributed-notebook/common/mock_scheduling/mock_session.go
//

// Package mock_scheduling is a generated GoMock package.
package mock_scheduling

import (
	context "context"
	reflect "reflect"
	time "time"

	promise "github.com/mason-leap-lab/go-utils/promise"
	proto "github.com/zhangjyr/distributed-notebook/common/proto"
	scheduling "github.com/zhangjyr/distributed-notebook/common/scheduling"
	types "github.com/zhangjyr/distributed-notebook/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAbstractSession is a mock of AbstractSession interface.
type MockAbstractSession struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractSessionMockRecorder
}

// MockAbstractSessionMockRecorder is the mock recorder for MockAbstractSession.
type MockAbstractSessionMockRecorder struct {
	mock *MockAbstractSession
}

// NewMockAbstractSession creates a new mock instance.
func NewMockAbstractSession(ctrl *gomock.Controller) *MockAbstractSession {
	mock := &MockAbstractSession{ctrl: ctrl}
	mock.recorder = &MockAbstractSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractSession) EXPECT() *MockAbstractSessionMockRecorder {
	return m.recorder
}

// AddReplica mocks base method.
func (m *MockAbstractSession) AddReplica(container *scheduling.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReplica", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica.
func (mr *MockAbstractSessionMockRecorder) AddReplica(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockAbstractSession)(nil).AddReplica), container)
}

// Context mocks base method.
func (m *MockAbstractSession) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAbstractSessionMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAbstractSession)(nil).Context))
}

// Duration mocks base method.
func (m *MockAbstractSession) Duration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockAbstractSessionMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockAbstractSession)(nil).Duration))
}

// Explain mocks base method.
func (m *MockAbstractSession) Explain(key scheduling.ExplainerEntry) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explain", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Explain indicates an expected call of Explain.
func (mr *MockAbstractSessionMockRecorder) Explain(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockAbstractSession)(nil).Explain), key)
}

// GetState mocks base method.
func (m *MockAbstractSession) GetState() scheduling.SessionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(scheduling.SessionState)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockAbstractSessionMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockAbstractSession)(nil).GetState))
}

// ID mocks base method.
func (m *MockAbstractSession) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockAbstractSessionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockAbstractSession)(nil).ID))
}

// InteractivePriority mocks base method.
func (m *MockAbstractSession) InteractivePriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractivePriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// InteractivePriority indicates an expected call of InteractivePriority.
func (mr *MockAbstractSessionMockRecorder) InteractivePriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractivePriority", reflect.TypeOf((*MockAbstractSession)(nil).InteractivePriority))
}

// IsIdle mocks base method.
func (m *MockAbstractSession) IsIdle() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdle")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIdle indicates an expected call of IsIdle.
func (mr *MockAbstractSessionMockRecorder) IsIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdle", reflect.TypeOf((*MockAbstractSession)(nil).IsIdle))
}

// IsMigrating mocks base method.
func (m *MockAbstractSession) IsMigrating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMigrating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMigrating indicates an expected call of IsMigrating.
func (mr *MockAbstractSessionMockRecorder) IsMigrating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMigrating", reflect.TypeOf((*MockAbstractSession)(nil).IsMigrating))
}

// IsStopped mocks base method.
func (m *MockAbstractSession) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockAbstractSessionMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockAbstractSession)(nil).IsStopped))
}

// IsTraining mocks base method.
func (m *MockAbstractSession) IsTraining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTraining indicates an expected call of IsTraining.
func (mr *MockAbstractSessionMockRecorder) IsTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraining", reflect.TypeOf((*MockAbstractSession)(nil).IsTraining))
}

// KernelSpec mocks base method.
func (m *MockAbstractSession) KernelSpec() *proto.KernelSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelSpec")
	ret0, _ := ret[0].(*proto.KernelSpec)
	return ret0
}

// KernelSpec indicates an expected call of KernelSpec.
func (mr *MockAbstractSessionMockRecorder) KernelSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelSpec", reflect.TypeOf((*MockAbstractSession)(nil).KernelSpec))
}

// Lock mocks base method.
func (m *MockAbstractSession) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockAbstractSessionMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockAbstractSession)(nil).Lock))
}

// MigrationComplete mocks base method.
func (m *MockAbstractSession) MigrationComplete() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationComplete")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// MigrationComplete indicates an expected call of MigrationComplete.
func (mr *MockAbstractSessionMockRecorder) MigrationComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationComplete", reflect.TypeOf((*MockAbstractSession)(nil).MigrationComplete))
}

// MigrationStarted mocks base method.
func (m *MockAbstractSession) MigrationStarted() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationStarted")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// MigrationStarted indicates an expected call of MigrationStarted.
func (mr *MockAbstractSessionMockRecorder) MigrationStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationStarted", reflect.TypeOf((*MockAbstractSession)(nil).MigrationStarted))
}

// MigrationTime mocks base method.
func (m *MockAbstractSession) MigrationTime() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationTime")
	ret0, _ := ret[0].(float64)
	return ret0
}

// MigrationTime indicates an expected call of MigrationTime.
func (mr *MockAbstractSessionMockRecorder) MigrationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationTime", reflect.TypeOf((*MockAbstractSession)(nil).MigrationTime))
}

// PreemptionPriority mocks base method.
func (m *MockAbstractSession) PreemptionPriority() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreemptionPriority")
	ret0, _ := ret[0].(float64)
	return ret0
}

// PreemptionPriority indicates an expected call of PreemptionPriority.
func (mr *MockAbstractSessionMockRecorder) PreemptionPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreemptionPriority", reflect.TypeOf((*MockAbstractSession)(nil).PreemptionPriority))
}

// RemoveReplica mocks base method.
func (m *MockAbstractSession) RemoveReplica(container *scheduling.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplica", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplica indicates an expected call of RemoveReplica.
func (mr *MockAbstractSessionMockRecorder) RemoveReplica(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockAbstractSession)(nil).RemoveReplica), container)
}

// RemoveReplicaById mocks base method.
func (m *MockAbstractSession) RemoveReplicaById(replicaId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReplicaById", replicaId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplicaById indicates an expected call of RemoveReplicaById.
func (mr *MockAbstractSessionMockRecorder) RemoveReplicaById(replicaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplicaById", reflect.TypeOf((*MockAbstractSession)(nil).RemoveReplicaById), replicaId)
}

// ResourceSpec mocks base method.
func (m *MockAbstractSession) ResourceSpec() types.CloneableSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSpec")
	ret0, _ := ret[0].(types.CloneableSpec)
	return ret0
}

// ResourceSpec indicates an expected call of ResourceSpec.
func (mr *MockAbstractSessionMockRecorder) ResourceSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSpec", reflect.TypeOf((*MockAbstractSession)(nil).ResourceSpec))
}

// ResourceUtilization mocks base method.
func (m *MockAbstractSession) ResourceUtilization() *scheduling.ResourceUtilization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceUtilization")
	ret0, _ := ret[0].(*scheduling.ResourceUtilization)
	return ret0
}

// ResourceUtilization indicates an expected call of ResourceUtilization.
func (mr *MockAbstractSessionMockRecorder) ResourceUtilization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceUtilization", reflect.TypeOf((*MockAbstractSession)(nil).ResourceUtilization))
}

// SessionStarted mocks base method.
func (m *MockAbstractSession) SessionStarted() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStarted")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SessionStarted indicates an expected call of SessionStarted.
func (mr *MockAbstractSessionMockRecorder) SessionStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStarted", reflect.TypeOf((*MockAbstractSession)(nil).SessionStarted))
}

// SessionStatistics mocks base method.
func (m *MockAbstractSession) SessionStatistics() scheduling.SessionStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStatistics")
	ret0, _ := ret[0].(scheduling.SessionStatistics)
	return ret0
}

// SessionStatistics indicates an expected call of SessionStatistics.
func (mr *MockAbstractSessionMockRecorder) SessionStatistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStatistics", reflect.TypeOf((*MockAbstractSession)(nil).SessionStatistics))
}

// SessionStopped mocks base method.
func (m *MockAbstractSession) SessionStopped() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionStopped")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SessionStopped indicates an expected call of SessionStopped.
func (mr *MockAbstractSessionMockRecorder) SessionStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionStopped", reflect.TypeOf((*MockAbstractSession)(nil).SessionStopped))
}

// SetContext mocks base method.
func (m *MockAbstractSession) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockAbstractSessionMockRecorder) SetContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockAbstractSession)(nil).SetContext), ctx)
}

// SetExpectingTraining mocks base method.
func (m *MockAbstractSession) SetExpectingTraining() promise.Promise {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpectingTraining")
	ret0, _ := ret[0].(promise.Promise)
	return ret0
}

// SetExpectingTraining indicates an expected call of SetExpectingTraining.
func (mr *MockAbstractSessionMockRecorder) SetExpectingTraining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpectingTraining", reflect.TypeOf((*MockAbstractSession)(nil).SetExpectingTraining))
}

// SetResourceUtilization mocks base method.
func (m *MockAbstractSession) SetResourceUtilization(util *scheduling.ResourceUtilization) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceUtilization", util)
}

// SetResourceUtilization indicates an expected call of SetResourceUtilization.
func (mr *MockAbstractSessionMockRecorder) SetResourceUtilization(util any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceUtilization", reflect.TypeOf((*MockAbstractSession)(nil).SetResourceUtilization), util)
}

// StartedAt mocks base method.
func (m *MockAbstractSession) StartedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartedAt indicates an expected call of StartedAt.
func (mr *MockAbstractSessionMockRecorder) StartedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedAt", reflect.TypeOf((*MockAbstractSession)(nil).StartedAt))
}

// String mocks base method.
func (m *MockAbstractSession) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAbstractSessionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAbstractSession)(nil).String))
}

// TrainingTime mocks base method.
func (m *MockAbstractSession) TrainingTime() scheduling.SessionStatistic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrainingTime")
	ret0, _ := ret[0].(scheduling.SessionStatistic)
	return ret0
}

// TrainingTime indicates an expected call of TrainingTime.
func (mr *MockAbstractSessionMockRecorder) TrainingTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrainingTime", reflect.TypeOf((*MockAbstractSession)(nil).TrainingTime))
}

// Unlock mocks base method.
func (m *MockAbstractSession) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockAbstractSessionMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockAbstractSession)(nil).Unlock))
}
