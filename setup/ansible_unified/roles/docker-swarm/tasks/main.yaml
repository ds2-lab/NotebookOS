- name: Ensure the requests Python module is installed
  pip:
    name: requests
    virtualenv: "{{ python_virtual_env_dir }}"
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
  vars:
    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

- name: Ensure the docker Python module is installed
  pip:
    name: docker
    virtualenv: "{{ python_virtual_env_dir }}"
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
  vars:
    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

- name: Ensure the jsondiff Python module is installed
  pip:
    name: jsondiff
    virtualenv: "{{ python_virtual_env_dir }}"
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
  vars:
    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

#- name: Ensure the docker-compose Python module is installed
#  pip:
#    name: docker-compose
#    virtualenv: "{{ python_virtual_env_dir }}"
#  environment:
#    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
#    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

- name: Print auto-selected 'advertise address' for Docker Swarm cluster
  debug:
    msg: "Docker Swarm 'advertise' address: {{ hostvars[groups['docker-swarm-manager'][0]].ansible_default_ipv4.address|default(hostvars[groups['docker-swarm-manager'][0]].ansible_all_ipv4_addresses[0]) }}:{{ docker_swarm_advertise_address_port }}"

- name: Initialize Docker Swarm cluster with first manager node
  docker_swarm:
    state: present
    advertise_addr: "{{ hostvars[groups['docker-swarm-manager'][0]].ansible_default_ipv4.address|default(hostvars[groups['docker-swarm-manager'][0]].ansible_all_ipv4_addresses[0]) }}:{{ docker_swarm_advertise_address_port }}"
  register: swarm_output
  when: inventory_hostname in groups['docker-swarm-manager'][0]
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
  vars:
    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

- name: Print swarm facts
  debug:
    msg: "hostvars[groups['docker-swarm-manager'][0]]['swarm_output']: {{ hostvars[groups['docker-swarm-manager'][0]]['swarm_output'] }}"

- name: Add any additional manager nodes to the Docker Swarm cluster
  docker_swarm:
    state: join
    timeout: "{{ docker_swarm_api_response_timeout }}"
    advertise_addr: "{{ hostvars[groups['docker-swarm-manager'][0]].ansible_default_ipv4.address|default(hostvars[groups['docker-swarm-manager'][0]].ansible_all_ipv4_addresses[0]) }}:{{ docker_swarm_advertise_address_port }}"
    join_token: "{{ hostvars[groups['docker-swarm-manager'][0]]['swarm_output']['swarm_facts']['JoinTokens']['Manager']}}"
    remote_addrs: "{{ hostvars[groups['docker-swarm-manager'][0]].ansible_default_ipv4.address|default(hostvars[groups['docker-swarm-manager'][0]].ansible_all_ipv4_addresses[0]) }}:{{ docker_swarm_advertise_address_port }}"
  when: inventory_hostname in groups['docker-swarm-manager'] and inventory_hostname not in groups['docker-swarm-manager'][0]
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
  vars:
    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

- name: Add worker node to Docker Swarm cluster
  docker_swarm:
    state: join
    timeout: "{{ docker_swarm_api_response_timeout }}"
    advertise_addr: "{{ hostvars[groups['docker-swarm-manager'][0]].ansible_default_ipv4.address|default(hostvars[groups['docker-swarm-manager'][0]].ansible_all_ipv4_addresses[0]) }}:{{ docker_swarm_advertise_address_port }}"
    join_token: "{{ hostvars[groups['docker-swarm-manager'][0]]['swarm_output']['swarm_facts']['JoinTokens']['Worker'] }}"
    remote_addrs: "{{ hostvars[groups['docker-swarm-manager'][0]].ansible_default_ipv4.address|default(hostvars[groups['docker-swarm-manager'][0]].ansible_all_ipv4_addresses[0]) }}:{{ docker_swarm_advertise_address_port }}"
  when: inventory_hostname in groups['docker-swarm-worker']
  environment:
    LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:{{ python_build_dir }}/Python-{{ python_version }}"
  vars:
    ansible_python_interpreter: "{{ python_virtual_env_dir }}/bin/python3.12"

- name: Wait for Docker Swarm cluster size to reach the desired number of nodes
  become: true
  command: docker node ls -q | wc -l
  register: node_count
  until: node_count.stdout | int >= desired_node_count
  retries: 10  # Number of retries before giving up
  delay: 10    # Time to wait between retries in seconds
  when: inventory_hostname in groups['docker-swarm-manager'][0]

- name: Label each Docker Swarm node with a 'node-name' label using the associated property from the inventory file
  become: true
  command: docker node update --label-add node-name={{ swarm_node_name }} {{ inventory_hostname }}
  when: swarm_node_name is defined
  vars:
    swarm_node_name: "{{ hostvars[inventory_hostname].swarm_node_name }}"