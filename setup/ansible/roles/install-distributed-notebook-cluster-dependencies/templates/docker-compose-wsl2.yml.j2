# Important: this value should not be changed.
# If you have to change it, then you need to update the code.
# Specifically, you need to change the value of the 'DockerProjectName' variable/const that is defined in "gateway/domain/types.go".
name: distributed_cluster

services:
  docker-hoster:
    platform: linux/amd64
    build:
      context: ../..
      dockerfile: deploy/docker-WSL2/hoster/Dockerfile
    image: {{ docker_username }}/docker-hoster:latest
    labels:
      app: "distributed_cluster"
      component: "docker_hoster"
    container_name: "docker-hoster"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /etc/hosts:/tmp/hosts
    extra_hosts:
      - "host.docker.internal:host-gateway"

  jupyter:
    platform: linux/amd64
    environment:
      - DOCKER_NETWORK_NAME=distributed_cluster_default # If you change the name of the docker compose app, then you must change this as well.
      - USING_WSL2=1
    image: {{ docker_username }}/jupyter-debug:latest
    labels:
      app: "distributed_cluster"
      component: "jupyter_server"
      logging: "promtail"
      logging_jobname: "jupyter"
    container_name: "jupyter"
    command: start-notebook.sh --NotebookApp.token='' --log-level=DEBUG
    expose:
      - 8888
    ports:
      - "8888:8888"
    depends_on:
      - gateway
      - docker-hoster
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  gateway:
    platform: linux/amd64
    environment:
      - DOCKER_NETWORK_NAME=distributed_cluster_default # If you change the name of the docker compose app, then you must change this as well.
      - USING_WSL2=1
    image: {{ docker_username }}/gateway:latest
    labels:
      app: "distributed_cluster"
      component: "cluster_gateway"
      logging: "promtail"
      logging_jobname: "gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/{{ remote_username }}/gateway-runtime-state:/gateway-runtime-state
      - /home/{{ remote_username }}/go/pkg/distributed-notebook/deploy/docker-WSL2/gateway/gateway.yml:/gateway.yml
      - /home/{{ remote_username }}/go/pkg/distributed-notebook/deploy/docker-WSL2/local_daemon/daemon.yml:/local_daemon/daemon.yml
      - /home/{{ remote_username }}/go/pkg/distributed-notebook/deploy/docker-WSL2/docker-compose.yml:/docker-compose.yml
    container_name: "gateway"
    restart: unless-stopped
    expose:
      - 8079
      - 9996
      - 8081
    ports:
      - "8079:8079"
      - "9996:9996"
      - "8081:8081"
      - "8089:8089"
    depends_on:
      - docker-hoster
      - prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"

  daemon:
    platform: linux/amd64
    environment:
      - KERNEL_TEMP_BASE_IN_CONTAINER=/{{ kernel_base_directory_name }}
      - KERNEL_IMAGE={{ docker_username }}/jupyter-debug:latest
      - HOST_MOUNT_DIR=/home/{{ remote_username }}/{{ kernel_base_directory_name }}
      - TARGET_MOUNT_DIR=/{{ kernel_base_directory_name }}
      - STORAGE=/home/{{ remote_username }}/{{ kernel_storage_directory }}
      - DOCKER_NETWORK_NAME=distributed_cluster_default # If you change the name of the docker compose app, then you must change this as well.
      - USING_WSL2=1
    image: {{ docker_username }}/daemon:latest
    labels:
      app: "distributed_cluster"
      component: "local_daemon"
      logging: "promtail"
      logging_jobname: "local_daemon"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/{{ remote_username }}/{{ kernel_base_directory_name }}:/{{ kernel_base_directory_name }}
      - /home/{{ remote_username }}/go/pkg/distributed-notebook/deploy/docker-WSL2/local_daemon/daemon.yml:/daemon.yml
    depends_on:
      - gateway
      - docker-hoster
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  init-prometheus:
    platform: linux/amd64
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus/data
    image: busybox:latest
    command: [ "/bin/chmod","-R","777", "/metrics" ]
    container_name: prometheus-data-permission-fix
    user: 0:0

  prometheus:
    platform: linux/amd64
    ports:
      - "8500:8500"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus/data
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.listen-address=0.0.0.0:8500
      - --web.enable-admin-api
    image: {{ prometheus_docker_image_name }}:{{ prometheus_docker_image_tag }}
    container_name: prometheus
    restart: unless-stopped
    user: 0:0
    depends_on:
      init-prometheus:
        condition: service_completed_successfully
    extra_hosts:
      - "host.docker.internal:host-gateway"

  loki:
    image: {{ loki_docker_image_name }}:{{ loki_docker_image_tag }}
    command: -config.file=/etc/loki/loki-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml

  promtail:
    image: {{ promtail_docker_image_name }}:{{ promtail_docker_image_tag }}
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  grafana:
    image: {{ grafana_docker_image_name }}:{{ grafana_docker_image_tag }}
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER={{ grafana_admin_username }}
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password }}
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana

  dashboard_backend:
    image: scusemua/distributed-notebook-dashboard-backend:latest
    ports:
    - "9000:9000"
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - ./dashboard-backend/config-docker.yaml:/etc/distributed-notebook-cluster/dashboard.yaml

  dashboard_frontend:
    image: scusemua/distributed-notebook-dashboard-frontend:latest
    ports:
    - "8001:8001"
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  coredumps_volume:
  prometheus_data:
  grafana_data:
  loki_data:
