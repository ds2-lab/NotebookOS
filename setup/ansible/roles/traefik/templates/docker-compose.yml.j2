services:
  traefik:
    image: traefik:v3.2
    ports:
      # Host mode is essential to work with IPv6
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host
        protocol: tcp
      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host
        protocol: tcp

      # portainer
      - '9001:9001'
      # elasticsearch / kibana
      - '9002:9002'
      # traefik ui
      - '9004:9004'

      # phpmyadmin
      - '9005:9005'

      # mailhog
      - '8025:8025'
    networks:
      - traefik-public
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"
      # Do not expose all Docker services, only the ones explicitly exposed
      - "--providers.docker.exposedbydefault=false"
      - "--providers.swarm.network=traefik-public"
      # Create an entrypoint "http" listening on address 80
      - "--entryPoints.http.address=:80"
      # Enable the access log, with HTTP requests
      - "--accesslog"
      # Enable the Traefik log, for configurations and errors
      - "--log"
      # Enable the Dashboard and API
      - "--api"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      # Use the traefik-public network
      - "--providers.docker.network=traefik-public"
      - "--log.level=debug"
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - "--providers.swarm.constraints=Label(`traefik.constraint-label`, `traefik-public`)"

      # SMDM entrypoints additional services
      - "--entryPoints.dashboard.address=:8000"
      - "--entryPoints.traefik-ui.address=:9004"
      - "--entryPoints.gateway.address=:{{ distributed_notebook_debug_port }}"
      - "--entryPoints.jupyter.address=:8888"
    environment:
    - "TRAEFIK_API_INSECURE=true"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}"
        - "traefik.http.routers.traefik-public-http.rule=Host(`{{ hostvars['swarm-leader'].ansible_host }}`)"
        - "traefik.http.routers.traefik-public-http.entrypoints=traefik-ui"
        - "traefik.http.services.traefik-public.loadbalancer.server.port=8080"
        - "traefik.http.routers.api.service=api@internal"
        - "traefik.http.routers.api.rule=Host(`{{ hostvars['swarm-leader'].ansible_host }}`)"
        - "traefik.constraint-label=traefik-public"
        # - "traefik.http.routers.api.rule=Host(`{{ hostvars['swarm-leader'].ansible_host }}`) && PathPrefix(`/api`)"

# volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  # traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true