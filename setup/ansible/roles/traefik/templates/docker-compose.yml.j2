services:
  traefik:
    image: traefik:v3.2
    ports:
      # listen on host ports without ingress network
      - "80:80"
      - "8054:8054"
    networks:
      - traefik-public
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"
      # Do not expose all Docker services, only the ones explicitly exposed
      - "--providers.docker.exposedbydefault=false"
      # Create an entrypoint "http" listening on address 80
      - "--entrypoints.http.address=:80"
      # Enable the access log, with HTTP requests
      - "--accesslog"
      # Enable the Traefik log, for configurations and errors
      - "--log"
      # Enable the Dashboard and API
      - "--api"
      # Use the traefik-public network
      - "--providers.docker.network=traefik-public"
      - "--log.level=debug"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.services.api.loadbalancer.server.port=8054"
        - "traefik.http.routers.api.rule=Host(`{{ hostvars['swarm-leader'].ansible_host }}`) && PathPrefix(`/api`)"

# volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  # traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true