global:
  scrape_interval: 15s
  scrape_timeout: 10s
  evaluation_interval: 15s
alerting:
  alertmanagers:
    - static_configs:
        targets: [ ]
      scheme: http
      timeout: 10s
      api_version: v2
scrape_configs:
  # Scraping Prometheus' own metrics
  - job_name: 'prometheus'
    scrape_interval: 5s
    static_configs:
      targets: ['prometheus:9090']

  # Create a job for Docker daemons.
  - job_name: 'docker'
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: nodes
    relabel_configs:
      # Fetch metrics on port 9323.
      - source_labels: [__meta_dockerswarm_node_address]
        target_label: __address__
        replacement: $1:9323
      # Set hostname as instance label
      - source_labels: [__meta_dockerswarm_node_hostname]
        target_label: instance

  # Scraping ZooKeeper on the Docker Swarm hosts (bare-metal)
  - job_name: 'zookeeper'
    scrape_interval: 10s
    static_configs:
      - targets:
{% for host in groups['docker_swarm'] %}
          - '{{ hostvars[host].ansible_default_ipv4.address|default(hostvars[host].ansible_all_ipv4_addresses[0]) }}:7000'
{% endfor %}
        labels:
          job: 'zookeeper'
          instance: 'zookeeper-swarm-node'

  # Scrape Docker Swarm services via service discovery
  - job_name: 'docker-swarm'
    dockerswarm_sd_configs:
        # We could use HTTP/HTTPS/TCP instead, if desired, by passing the following "host" parameter:
        # "tcp://{{ hostvars['swarm-leader'].ansible_default_ipv4.address|default(hostvars['swarm-leader'].ansible_all_ipv4_addresses[0]) }}:2375"
      - host: "unix:///var/run/docker.sock"
        role: 'tasks'  # Discover containers
    relabel_configs:
      # Only keep containers that should be running.
      - source_labels: [__meta_dockerswarm_task_desired_state]
        regex: running
        action: keep
      - source_labels: [__meta_docker_container_label_component]
        regex: kernel_replica
        action: keep
      - source_labels: [__meta_docker_container_label_app]
        regex: distributed_cluster
        action: keep
      - source_labels: [__meta_dockerswarm_network_name]
        regex: traefik-public
        action: keep
      - source_labels: [__address__, __meta_dockerswarm_service_label_prometheus_metrics_port]
        regex: '(.*):(\d+);(\d+)'
        target_label: __address__
        replacement: "$1:$3"