---
# Variables listed here are applicable to all host groups

##################################################################
# Distributed Notebook Application/Cluster
##################################################################
distributed_notebook_docker_stack_name: distributed_notebook
deploy_distributed_jupyter_notebook_app: true
distributed_notebook_kernel_docker_image_name: scusemua/jupyter
distributed_notebook_kernel_docker_image_tag: latest
distributed_notebook_num_replicas: 3
distributed_notebook_scheduling_policy: static
distributed_notebook_predictive_autoscaling_enabled: true
distributed_notebook_debug_mode: true
distributed_notebook_debug_port: 9996
distributed_notebook_prometheus_interval: 15
distributed_notebook_prometheus_port: 8089
distributed_notebook_message_acknowledgements_enabled: false
distributed_notebook_simulate_checkpointing_latency: true
distributed_notebook_gpu_poll_interval: 5
distributed_notebook_num_resend_attempts: 1
distributed_notebook_run_kernels_in_gdb: false

distributed_notebook_smr_port: 8080
distributed_notebook_max_subscribed_ratio: 7.0
distributed_notebook_gpus_per_host: 8
distributed_notebook_scaling_buffer_size: 3
distributed_notebook_subscribed_ratio_update_interval: 1
distributed_notebook_subscribed_scaling_factor: 1.05
distributed_notebook_subscribed_scaling_interval: 30
distributed_notebook_subscribed_scaling_limit: 1.1
distributed_notebook_subscribed_scaling_in_limit: 2

# The 'advertise address' is an externally reachable address advertised to other nodes.
# This port is used with the 'advertise address', which is set to the "ansible_nodename" of the first manager node.
# Only used when swarm is initialised or joined. Because of this, it's not considered for idempotency checking.
docker_swarm_advertise_address_port: 2377

# The maximum amount of time in seconds to wait on a response from the API.
docker_swarm_api_response_timeout: 60

##################################################################
# Traefik
##################################################################
traefik_username: admin
traefik_password: 123456
traefik_email: your_email@provider.com
traefik_docker_swarm_stack_name: distributed_notebook_traefik
traefik_ui_port: 8054

##################################################################
# SSH and Top-Level Variables
##################################################################
remote_username: "ubuntu"
remote_user: "{{ remote_username }}"
ansible_ssh_private_key_file: <path to ssh key>
private_key_to_upload: <path to private ssh key that can be copied to remote VMs so they can SSH between each other>
public_key_to_upload: <path to public key of the private_key_to_upload>

##################################################################
# Cluster Gateway
##################################################################
gateway_dashboard_grpc_port: 8079
gateway_debug_logging_enabled: true

gateway_provisioner_port: 8081
gateway_port: 8080

gateway_docker_username: scusemua
gateway_docker_image_name: gateway
gateway_docker_image_tag: latest

##################################################################
# Local Daemon
##################################################################
local_daemon_kernel_registry_port: 8075
local_daemon_port: 8080

local_daemon_debug_logging_enabled: true

local_daemon_docker_username: scusemua
local_daemon_docker_image_name: daemon
local_daemon_docker_image_tag: latest

##################################################################
# Jupyter Server
##################################################################

jupyter_server_docker_username: scusemua
jupyter_server_docker_image_name: jupyter-debug
jupyter_server_docker_image_tag: latest

##################################################################
# Grafana
##################################################################
grafana_admin_username: grafana
grafana_admin_password: 12345
grafana_logs_dir: /var/lib/grafana/logs
grafana_data_dir: /var/lib/grafana/data
grafana_plugins_dir: /var/lib/grafana/plugins
grafana_docker_image_name: grafana/grafana-enterprise
grafana_docker_image_tag: latest

########
# Loki #
########
loki_docker_image_name: grafana/loki
loki_docker_image_tag: 3.2.0

############
# Promtail #
############
promtail_docker_image_name: grafana/promtail
promtail_docker_image_tag: 3.2.0

##############
# Prometheus #
##############
prometheus_docker_image_name: prom/prometheus
prometheus_docker_image_tag: main

##################################################################
# Dashboard Backend Configuration
##################################################################
dashboard_admin_username: admin
dashboard_admin_password: 12345
dashboard_token_valid_duration_sec: 3600
dashboard_token_refresh_interval_sec: 5400
dashboard_backend_config_directory: /etc/distributed-notebook-cluster
gateway-address: gateway:8079
dashboard_backend_server_port: 8000
dashboard_backend_grpc_port: 8078
dashboard_backend_websocket_proxy_port: 8077
dashboard_backend_docker_username: scusemua
dashboard_backend_docker_image_name: distributed-notebook-dashboard-backend
dashboard_backend_docker_image_tag: latest

##################################################################
# Filesystem
##################################################################
gateway_runtime_state_directory: "/home/{{ remote_username }}/gateway-runtime-state"
kernel_storage_directory: "/home/{{ remote_username }}/kernel_storage"
kernel_base_directory: "/home/{{ remote_username }}/kernel_base"

##################################################################
# Hadoop HDFS
##################################################################
hadoop_user: "hadoop"
hadoop_password: "12345"
hadoop_version: "3.3.6"s
hadoop_hdfs_home_dir: /opt/hadoop
hadoop_hdfs_conf_dir: "{{ hadoop_hdfs_home_dir }}/etc/hadoop"
java_home: /usr/lib/jvm/java-8-openjdk-amd64
hdfs_dfs_replication: 1
hdfs_dfs_namenode_name_dir: "/home/hadoop/hadoopdata/hdfs/namenode"
hdfs_dfs_datanode_data_dir: "/home/hadoop/hadoopdata/hdfs/datanode"
hadoop_hdfs_heapsize_max: ''
hadoop_hdfs_heapsize_min: ''
hadoop_hdfs_log_dir: /var/log/hadoop
hadoop_hdfs_root_logger: DEBUG,RFA
hadoop_unarchive_dir: /opt

##################################################################
# Git Configuration & Repo Configuration
##################################################################
git_repo_name: "distributed-notebook"
gitbranch: <branch of repo to use>
git_username: scusemua # change this to your own username if you created a fork of the repo
git_personal_access_token: < github personal access token with read access to the repo's code >
git_repo_url: "https://{{git_username}}:{{git_personal_access_token}}@github.com/{{git_username}}/{{git_repo_name}}.git"

##################################################################
# Protoc
##################################################################
protoc_install_path: /home/{{ remote_user}}/.local/
protoc_version: 27.2
protoc_release_url: "https://github.com/protocolbuffers/protobuf/releases/download/v{{ protoc_version }}/protoc-{{ protoc_version }}-linux-x86_64.zip"

##################################################################
# Golang (General)
##################################################################
target_go_version: "1.21.5"
go_download_url: "https://go.dev/dl/go{{ target_go_version }}.linux-amd64.tar.gz"
go_install_parent_dir: "/home/{{ remote_user }}/"
gopath: "{{ go_install_parent_dir }}/go"

##################################################################
# Golang (Gopy)
##################################################################
gopy_bin_path: "{{ gopath }}/gopy"
gopy_build_dir: "{{ gopath }}/pkg/gopy"
gopy_source_bin: "{{ gopy_build_dir }}/gopy"
gopy_image_name: "scusemua/gopy"
gopy_image_tag: "latest"

###################################################################
# Golang (protoc)
###################################################################
protoc_gen_go: "google.golang.org/protobuf/cmd/protoc-gen-go@latest"
protoc_gen_go_grpc: "google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest"

##################################################################
# Kind
##################################################################
kind_version: "v0.22.0"

##################################################################
# Miscellaneous
##################################################################
tmp_dir: "/tmp"
profile_file: "/home/{{ remote_user }}/.profile"  # Update this if using a different profile file

##################################################################
# Helm
##################################################################
helm_install_script_url: "https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
helm_script: "{{ tmp_dir }}/get_helm.sh"
helm_bin_path: "/usr/local/bin/helm"

##################################################################
# Kubectl
##################################################################
kubectl_url: "https://dl.k8s.io/release"
kubectl_bin_path: "/usr/bin/kubectl"

##################################################################
# Python
##################################################################
python_version: "3.12.6"
python_short_version: "3.12"
python_build_dir: "/home/ubuntu"
python_virtual_env_dir: "/home/{{ remote_username }}/distributed-notebook-python-venv"

##################################################################
# ZooKeeper
##################################################################

# Version of Zookeeper to install and use.
zookeeper_version: 3.9.2
zookeeper_mirror: https://dlcdn.apache.org/zookeeper
zookeeper_package: apache-zookeeper-{{ zookeeper_version }}-bin.tar.gz

zookeeper_create_user_group: true
zookeeper_group: zookeeper
zookeeper_user: zookeeper

zookeeper_root_dir: /opt
zookeeper_install_dir: '{{ zookeeper_root_dir }}/apache-zookeeper-{{ zookeeper_version }}'

# The zookeeper_dir is created as a symlik to the actual installation directory.
# All other configuration and variables use the symlinked directory.
zookeeper_dir: '{{ zookeeper_root_dir }}/zookeeper'
zookeeper_log_dir: /var/log/zookeeper
# This is the port where ZooKeeper clients will listen on.
# This is where the Brokers will connect to ZooKeeper.
# Typically, this is set to 2181.
zookeeper_client_port: 2181

# This value is placed in the /var/lib/zookeeper/myid file.
zookeeper_id: 1
zookeeper_leader_port: 2888
zookeeper_election_port: 3888
zookeeper_servers: "{{ groups['zookeepers'] }}"

# The zookeeper_servers variable above accepts a list of inventory hostnames.
# These will be used in the zoo.cfg to configure a multi-server cluster so the hosts can find each other.
# By default, the hostname used in the zoo.cfg will be the hostname reported by the `hostname` command on the server,
# which is provided by the ansible_nodename variable.
#
# If you DO NOT want this behaviour and would like the zoo.cfg to template the inventory_hostname,
# then set zookeeper_servers_use_inventory_hostname to true.
zookeeper_servers_use_inventory_hostname: false

# The unit of time for ZooKeeper translated to milliseconds.
# This governs all ZooKeeper time dependent operations. It is used for heartbeats and timeouts especially.
# Note that the minimum session timeout will be two ticks.
zookeeper_ticktime: 3000

# Amount of time, in ticks (see tickTime), to allow followers to connect and sync to a leader.
# Increased this value as needed, if the amount of data managed by ZooKeeper is large.
zookeeper_init_limit: 10

zookeeper_environment: {}
# Start zookeeper after installation
zookeeper_start: yes
# Restart zookeeper on configuration change
zookeeper_restart: yes

# Amount of time, in ticks (see tickTime), to allow followers to sync with ZooKeeper.
# If followers fall too far behind a leader, they will be dropped.
zookeeper_sync_limit: 5

# The directory where ZooKeeper in-memory database snapshots and, unless specified in dataLogDir, the transaction log of updates to the database.
# This location should be a dedicated disk that is ideally an SSD.
# For more information, see the ZooKeeper Administration Guide (https://zookeeper.apache.org/doc/current/zookeeperAdmin.html).
zookeeper_data_dir: /var/lib/zookeeper

# The location where the transaction log is written to. If you don’t specify this option, the log is written to dataDir.
# By specifying this option, you can use a dedicated log device, and help avoid competition between logging and snapshots.
# For more information, see the ZooKeeper Administration Guide (https://zookeeper.apache.org/doc/current/zookeeperAdmin.html).
zookeeper_data_log_dir: /var/lib/zookeeper

# The maximum allowed number of client connections for a ZooKeeper server.
# To avoid running out of allowed connections set this to 0 (unlimited).
zookeeper_max_client_cnxns: 128

# When enabled, ZooKeeper auto purge feature retains the autopurge.snapRetainCount most recent snapshots and the corresponding transaction logs
# in the dataDir and dataLogDir respectively and deletes the rest.
zookeeper_autopurge_snap_retain_count: 3

# The time interval in hours for which the purge task has to be triggered. Set to a positive integer (1 and above) to enable the auto purging.
zookeeper_purge_interval: 0

# Set to "false" to disable the AdminServer. By default, the AdminServer is enabled.
zookeeper_enable_server: yes
# The address the embedded Jetty server listens on. Defaults to 0.0.0.0.
zookeeper_server_address: 0.0.0.0
# The port the embedded Jetty server listens on. Defaults to 8080.
zookeeper_server_port: 8080
# Set the maximum idle time in milliseconds that a connection can wait before sending or receiving data. Defaults to 30000 ms.
zookeeper_idle_timeout: 30000
# The URL for listing and issuing commands relative to the root URL. Defaults to "/commands".
zookeeper_command_url: /commands
# See https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_4lw. Use * to allow all commands.
zookeeper_command_whitelist: stat, ruok, conf, isro

# Set to "org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider" to enable Prometheus.io exporter.
zookeeper_metricsprovider_classname: org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider
#  Prometheus.io exporter will start a Jetty server and bind to this port, it defaults to 7000. Prometheus end point will be http://hostname:httPort/metrics.
zookeeper_metricsprovider_httpport: 7000
# If this property is set to true Prometheus.io will export useful metrics about the JVM. The default is true.
zookeeper_metricsprovider_exportjvminfo: yes
