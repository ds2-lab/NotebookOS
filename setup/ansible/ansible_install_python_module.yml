- name: Install the distributed-notebook Python module
  hosts: vms
  remote_user: "{{ remote_username }}"
  become: true       # Run tasks as root
  gather_facts: true
  environment:
    LD_LIBRARY_PATH: "{{ python_build_dir }}/Python-{{ python_version }}:$LD_LIBRARY_PATH"
  vars:
    python_dir: "{{ python_build_dir }}/Python-{{ python_version }}"
    pip_executable: "/usr/local/bin/pip{{ python_short_version }}"
    ansible_python_interpreter: "{{ python_dir }}/python"

  tasks:
    - name: Install the packaging module.
      shell: "{{ ansible_python_interpreter }} -m pip install --user packaging"

    - name: Ensure the virtualenv package is installed
      pip:
        name: virtualenv
        executable: "{{ pip_executable }}"  # Use the built Python executable
        state: present

    - name: Create the Python virtual environment
      shell: ". {{ profile_file }} && {{ ansible_python_interpreter }} -m venv {{ python_virtual_env_dir }}"
      args:
        creates: "{{ python_virtual_env_dir }}"  # Only run if the directory does not exist

    - name: Upgrade pip in the virtual environment
      pip:
        name: pip
        virtualenv_python: "{{ ansible_python_interpreter }}"
        virtualenv: "{{ python_virtual_env_dir }}"
        state: latest

    - name: Install the Python module from pyproject.toml
      shell: ". {{ profile_file}} && {{ python_virtual_env_dir }}/bin/pip3 install -e ."
      args:
        chdir: "{{ gopath }}/pkg/{{ git_repo_name }}"
      register: install_result

    - name: Fail if installation failed
      fail:
        msg: "Installation failed: {{ install_result.stderr }}"
      when: install_result.rc != 0

    - name: Display success message if installation was successful
      debug:
        msg: "Python module installed successfully from {{ gopath }}/pkg/{{ git_repo_name }}"
      when: install_result.rc == 0
